<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__usbd_8h" kind="file" language="C++">
    <compoundname>nrf_usbd.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfx__usbd_8h" local="no">drivers/include/nrfx_usbd.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_usbd.h</label>
        <link refid="nrf__usbd_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="user-defined">
      <header>Setup command frame functions.</header>
      <description><para>Functions for setting up command frame part access. </para>
</description>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gad9fa77301e304f15905f04db5ace16de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_setup_bmrequesttype_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading BMREQUESTTYPE - part of the SETUP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of BREQUESTTYPE on the last received SETUP frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1179" column="27" bodyfile="hal/nrf_usbd.h" bodystart="1179" bodyend="1182" declfile="hal/nrf_usbd.h" declline="774" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga5fd0236b99b50a8003d22e84b8571f45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_setup_brequest_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading BMREQUEST - part of the SETUP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of BREQUEST on the last received SETUP frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1184" column="27" bodyfile="hal/nrf_usbd.h" bodystart="1184" bodyend="1187" declfile="hal/nrf_usbd.h" declline="783" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gaa425fab84d090108aa23fdab54c4fae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_setup_wvalue_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading WVALUE - part of the SETUP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of WVALUE on the last received SETUP frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1189" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1189" bodyend="1193" declfile="hal/nrf_usbd.h" declline="792" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gafb4fa211dba6564eb365c50bbebd8c5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_setup_windex_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading WINDEX - part of the SETUP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of WINDEX on the last received SETUP frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1195" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1195" bodyend="1199" declfile="hal/nrf_usbd.h" declline="801" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga0ad7b416191ca996a435e79b2f6c60cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_setup_wlength_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for reading WLENGTH - part of the SETUP packet. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of WLENGTH on the last received SETUP frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1201" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1201" bodyend="1205" declfile="hal/nrf_usbd.h" declline="810" declcolumn="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga6bf887bf2b95efe9128ba52eccfae9a9" prot="public" static="no">
        <name>NRF_USBD_FRAMECNTR_SIZE</name>
        <initializer>    ( (USBD_FRAMECNTR_FRAMECNTR_Msk &gt;&gt; USBD_FRAMECNTR_FRAMECNTR_Pos) + 1UL )</initializer>
        <briefdescription>
<para>Frame counter size. </para>
        </briefdescription>
        <detaileddescription>
<para>The number of counts that can be fitted into frame counter. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="420" column="9" bodyfile="hal/nrf_usbd.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga2885b53c22521a2a3e2dbcda0dd0f044" prot="public" static="no">
        <name>NRF_USBD_EPISO_FIRST</name>
        <initializer>8</initializer>
        <briefdescription>
<para>First isochronous endpoint number. </para>
        </briefdescription>
        <detaileddescription>
<para>The number of the first isochronous endpoint. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="431" column="9" bodyfile="hal/nrf_usbd.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga44b9553409d9c4785eebaaadd4586f0f" prot="public" static="no">
        <name>NRF_USBD_EPIN_CNT</name>
        <initializer>9</initializer>
        <briefdescription>
<para>Total number of IN endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>Total number of IN endpoint (including ISOCHRONOUS). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="438" column="9" bodyfile="hal/nrf_usbd.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga437407a2f8d28b360a4ec9eb816e729d" prot="public" static="no">
        <name>NRF_USBD_EPOUT_CNT</name>
        <initializer>9</initializer>
        <briefdescription>
<para>Total number of OUT endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para>Total number of OUT endpoint (including ISOCHRONOUS). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="445" column="9" bodyfile="hal/nrf_usbd.h" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1gafab440dd7f6a642c240348da60092eb3" prot="public" static="no">
        <name>NRF_USBD_EP_DIR_Msk</name>
        <initializer>(1U &lt;&lt; 7)</initializer>
        <briefdescription>
<para>Mask of the direction bit in an endpoint number. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="448" column="9" bodyfile="hal/nrf_usbd.h" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga6357a6cf3e265f3f1c40077582cdc814" prot="public" static="no">
        <name>NRF_USBD_EP_DIR_IN</name>
        <initializer>(1U &lt;&lt; 7)</initializer>
        <briefdescription>
<para>The value of direction bit for the IN endpoint direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="451" column="9" bodyfile="hal/nrf_usbd.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga59e374ef98d3521cb386c425d43dd36d" prot="public" static="no">
        <name>NRF_USBD_EP_DIR_OUT</name>
        <initializer>(0U &lt;&lt; 7)</initializer>
        <briefdescription>
<para>The value of direction bit for the OUT endpoint direction. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="454" column="9" bodyfile="hal/nrf_usbd.h" bodystart="454" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga9be1e5cf3c38d21e1116c2771ab86bcf" prot="public" static="no">
        <name>NRF_USBD_EPIN</name>
        <param><defname>epnr</defname></param>
        <initializer>(((uint8_t)(epnr)) | <ref refid="group__nrf__usbd__hal_1ga6357a6cf3e265f3f1c40077582cdc814" kindref="member">NRF_USBD_EP_DIR_IN</ref>)</initializer>
        <briefdescription>
<para>Macro for making the IN endpoint identifier from endpoint number. </para>
        </briefdescription>
        <detaileddescription>
<para>Macro that sets direction bit to make IN endpoint.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>IN Endpoint identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="465" column="9" bodyfile="hal/nrf_usbd.h" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga8b6d96a8d69d5283919896d6f5b54b01" prot="public" static="no">
        <name>NRF_USBD_EPOUT</name>
        <param><defname>epnr</defname></param>
        <initializer>(((uint8_t)(epnr)) | <ref refid="group__nrf__usbd__hal_1ga59e374ef98d3521cb386c425d43dd36d" kindref="member">NRF_USBD_EP_DIR_OUT</ref>)</initializer>
        <briefdescription>
<para>Macro for making the OUT endpoint identifier from endpoint number. </para>
        </briefdescription>
        <detaileddescription>
<para>Macro that sets direction bit to make OUT endpoint.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">epnr</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OUT Endpoint identifier. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="476" column="9" bodyfile="hal/nrf_usbd.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" prot="public" static="no">
        <name>NRF_USBD_EP_NR_GET</name>
        <param><defname>ep</defname></param>
        <initializer>((uint8_t)(((uint8_t)(ep)) &amp; 0xFU))</initializer>
        <briefdescription>
<para>Macro for extracting the endpoint number from the specified endpoint identifier. </para>
        </briefdescription>
        <detaileddescription>
<para>Macro that strips out the information about endpoint direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Endpoint number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="487" column="9" bodyfile="hal/nrf_usbd.h" bodystart="487" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga3d429071b3003910f7aa3027fc2597d6" prot="public" static="no">
        <name>NRF_USBD_EPIN_CHECK</name>
        <param><defname>ep</defname></param>
        <initializer>( (((uint8_t)(ep)) &amp; <ref refid="group__nrf__usbd__hal_1gafab440dd7f6a642c240348da60092eb3" kindref="member">NRF_USBD_EP_DIR_Msk</ref>) == <ref refid="group__nrf__usbd__hal_1ga6357a6cf3e265f3f1c40077582cdc814" kindref="member">NRF_USBD_EP_DIR_IN</ref>  )</initializer>
        <briefdescription>
<para>Macro for checking the endpoint direction. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro checks if the specified endpoint has the IN direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint direction is IN. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint direction is OUT. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="499" column="9" bodyfile="hal/nrf_usbd.h" bodystart="499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1gaa3ed152cfe989b125a93a2687d8f7eae" prot="public" static="no">
        <name>NRF_USBD_EPOUT_CHECK</name>
        <param><defname>ep</defname></param>
        <initializer>( (((uint8_t)(ep)) &amp; <ref refid="group__nrf__usbd__hal_1gafab440dd7f6a642c240348da60092eb3" kindref="member">NRF_USBD_EP_DIR_Msk</ref>) == <ref refid="group__nrf__usbd__hal_1ga59e374ef98d3521cb386c425d43dd36d" kindref="member">NRF_USBD_EP_DIR_OUT</ref> )</initializer>
        <briefdescription>
<para>Macro for checking endpoint direction. </para>
        </briefdescription>
        <detaileddescription>
<para>This macro checks if given endpoint has OUT direction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint direction is OUT </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint direction is IN </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="511" column="9" bodyfile="hal/nrf_usbd.h" bodystart="511" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga47229aa88f189c973e6c93a942772a10" prot="public" static="no">
        <name>NRF_USBD_EPISO_CHECK</name>
        <param><defname>ep</defname></param>
        <initializer>(<ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep) &gt;= <ref refid="group__nrf__usbd__hal_1ga2885b53c22521a2a3e2dbcda0dd0f044" kindref="member">NRF_USBD_EPISO_FIRST</ref>)</initializer>
        <briefdescription>
<para>Macro for checking if endpoint is isochronous. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>It can be endpoint identifier or just endpoint number to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint is isochronous type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint is bulk of interrupt type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="521" column="9" bodyfile="hal/nrf_usbd.h" bodystart="521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1ga5517794f8da667831ee7a22bd476a4e3" prot="public" static="no">
        <name>NRF_USBD_EP_VALIDATE</name>
        <param><defname>ep</defname></param>
        <initializer>    (                                              \
    (<ref refid="group__nrf__usbd__hal_1ga3d429071b3003910f7aa3027fc2597d6" kindref="member">NRF_USBD_EPIN_CHECK</ref>(ep) &amp;&amp; (<ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep) &lt; <ref refid="group__nrf__usbd__hal_1ga44b9553409d9c4785eebaaadd4586f0f" kindref="member">NRF_USBD_EPIN_CNT</ref>))   \
    ||                                                                          \
    (<ref refid="group__nrf__usbd__hal_1gaa3ed152cfe989b125a93a2687d8f7eae" kindref="member">NRF_USBD_EPOUT_CHECK</ref>(ep) &amp;&amp; (<ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep) &lt; <ref refid="group__nrf__usbd__hal_1ga437407a2f8d28b360a4ec9eb816e729d" kindref="member">NRF_USBD_EPOUT_CNT</ref>)) \
    )</initializer>
        <briefdescription>
<para>Macro for checking if given number is valid endpoint number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint is valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint is not valid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="531" column="9" bodyfile="hal/nrf_usbd.h" bodystart="531" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__usbd__hal_1gae8241e0e42223e58adb98e2fb7b71a3f" prot="public" static="no">
        <name>NRF_USBD_EPISOOUT_NO_DATA</name>
        <initializer>((size_t)(-1))</initializer>
        <briefdescription>
<para>Not isochronous data frame received. </para>
        </briefdescription>
        <detaileddescription>
<para>Special value returned by <ref refid="group__nrf__usbd__hal_1ga781e617b1d8866be26f485f3b7f8320f" kindref="member">nrf_usbd_episoout_size_get</ref> function that means that data frame was not received at all. This allows differentiate between situations when zero size data comes or no data comes at all on isochronous endpoint. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="545" column="9" bodyfile="hal/nrf_usbd.h" bodystart="545" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__usbd__hal_1gacef518da985b1dea4e65fb035cc3ffb7" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_task_t</name>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7aaa692795b5120e01bf399355bf90c18c" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN0</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[0] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[0].PTR, EPIN[0].MAXCNT, and EPIN[0].CONFIG registers values, and enables control endpoint IN 0 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a47bbcd684ff4a662d5ef07efbca96c7d" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN1</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[1] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[1].PTR, EPIN[1].MAXCNT, and EPIN[1].CONFIG registers values, and enables data endpoint IN 1 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a0ab46fe3aca622bb2dbeef5237433e42" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN2</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[2] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[2].PTR, EPIN[2].MAXCNT, and EPIN[2].CONFIG registers values, and enables data endpoint IN 2 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a2814d3219dd0804b7287411f30f91ead" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN3</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[3] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[3].PTR, EPIN[3].MAXCNT, and EPIN[3].CONFIG registers values, and enables data endpoint IN 3 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ae804a47cbdd93d97696bfd18c36a94ee" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN4</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[4] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[4].PTR, EPIN[4].MAXCNT, and EPIN[4].CONFIG registers values, and enables data endpoint IN 4 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7af6e7f1750309ae67fe20f3032af514b9" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN5</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[5] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[5].PTR, EPIN[5].MAXCNT, and EPIN[5].CONFIG registers values, and enables data endpoint IN 5 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ad26ab7b45ef225a275e8d239cf0cedf1" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN6</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[6] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[6].PTR, EPIN[6].MAXCNT, and EPIN[6].CONFIG registers values, and enables data endpoint IN 6 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ae5181a7dab48989bbe300e67a26703cd" prot="public">
          <name>NRF_USBD_TASK_STARTEPIN7</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPIN[7] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPIN[7].PTR, EPIN[7].MAXCNT, and EPIN[7].CONFIG registers values, and enables data endpoint IN 7 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a0907bfacd52e75c55970b06b40c6f1d6" prot="public">
          <name>NRF_USBD_TASK_STARTISOIN</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTISOIN   )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the ISOIN.PTR, ISOIN.MAXCNT, and ISOIN.CONFIG registers values, and enables sending data on ISO endpoint 8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a3a2aa3531997cacc5c710f0b6a3a8bca" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT0</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[0].PTR, EPOUT[0].MAXCNT, and EPOUT[0].CONFIG registers values, and enables control endpoint 0 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7aeff7635ea0a9fc83aa4533927c2cb12d" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT1</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[1].PTR, EPOUT[1].MAXCNT, and EPOUT[1].CONFIG registers values, and enables data endpoint 1 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a6ac488aaacf506e91c384e41406254bb" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT2</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[2].PTR, EPOUT[2].MAXCNT, and EPOUT[2].CONFIG registers values, and enables data endpoint 2 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ac1afd870aca0d6f544cd7f8c8dec77b8" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT3</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[3].PTR, EPOUT[3].MAXCNT, and EPOUT[3].CONFIG registers values, and enables data endpoint 3 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a6c070678faad2173be91ecf9c130d803" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT4</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[4].PTR, EPOUT[4].MAXCNT, and EPOUT[4].CONFIG registers values, and enables data endpoint 4 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a6082df80a2229390a497b6a7ad8eaf50" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT5</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[5].PTR, EPOUT[5].MAXCNT, and EPOUT[5].CONFIG registers values, and enables data endpoint 5 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7adcda72f0323184b6daa5be2cdf2c8300" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT6</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[6].PTR, EPOUT[6].MAXCNT, and EPOUT[6].CONFIG registers values, and enables data endpoint 6 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7aea65678c751ab58f6fed90df07ebf70e" prot="public">
          <name>NRF_USBD_TASK_STARTEPOUT7</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTEPOUT[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the EPOUT[7].PTR, EPOUT[7].MAXCNT, and EPOUT[7].CONFIG registers values, and enables data endpoint 7 to respond to traffic from host. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ab1d149e5b95fbb7297a22e196222cb36" prot="public">
          <name>NRF_USBD_TASK_STARTISOOUT</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_STARTISOOUT  )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Captures the ISOOUT.PTR, ISOOUT.MAXCNT, and ISOOUT.CONFIG registers values, and enables receiving of data on ISO endpoint 8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a4972fc44d7c126e2d70108582c6808d5" prot="public">
          <name>NRF_USBD_TASK_EP0RCVOUT</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_EP0RCVOUT    )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Allows OUT data stage on the control endpoint 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a52811cb45db47f85042ab844929e8638" prot="public">
          <name>NRF_USBD_TASK_EP0STATUS</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_EP0STATUS    )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Allows status stage on the control endpoint 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ad4a98ee0874ff4f64285dbbebf258bd9" prot="public">
          <name>NRF_USBD_TASK_EP0STALL</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_EP0STALL     )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>STALLs data and status stage on the control endpoint 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ac9ba27e40be0a06543e210ae50915cca" prot="public">
          <name>NRF_USBD_TASK_DRIVEDPDM</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_DPDMDRIVE    )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Forces D+ and D-lines to the state defined in the DPDMVALUE register. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a3344ae7c97a03e4c3a24c456f13f50e2" prot="public">
          <name>NRF_USBD_TASK_NODRIVEDPDM</name>
          <initializer>= offsetof(NRF_USBD_Type, TASKS_DPDMNODRIVE  )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stops forcing D+ and D- lines to any state (USB engine takes control). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USBD tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="52" column="1" bodyfile="hal/nrf_usbd.h" bodystart="53" bodyend="77"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_event_t</name>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6af83cb0aff273a343ea398411ec6e1537" prot="public">
          <name>NRF_USBD_EVENT_USBRESET</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_USBRESET   )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signals that a USB reset condition is detected on the USB lines. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ae841c340feff31143770e2b3384a12fb" prot="public">
          <name>NRF_USBD_EVENT_STARTED</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_STARTED    )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Confirms that the EPIN[n].PTR, EPIN[n].MAXCNT, EPIN[n].CONFIG, or EPOUT[n].PTR, EPOUT[n].MAXCNT, and EPOUT[n].CONFIG registers have been captured on all endpoints reported in the EPSTATUS register. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ad04c0755ec5ce1eafe1a12e46c898822" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN0</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[0] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[0] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a658cd1bb7e3c3e6f9ea2c9311e0e3162" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN1</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[1] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[1] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a2145cb9e6a9f5de4a3ccc0f323b7de3d" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN2</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[2] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[2] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a28a65e73e6e125682f483734fdbeb238" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN3</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[3] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[3] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a917c50a3234d56030ef445541dda9141" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN4</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[4] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[4] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a28b6c47ec54fccae0dcbab0bc332ce28" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN5</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[5] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[5] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a1ece33d3fd52f5dd11e82f4a40ba9c42" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN6</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[6] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[6] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a24ede0a7230ba2f6705c5594963db249" prot="public">
          <name>NRF_USBD_EVENT_ENDEPIN7</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPIN[7] )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPIN[7] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a5d8be992cabec77f4753060597a1eddc" prot="public">
          <name>NRF_USBD_EVENT_EP0DATADONE</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_EP0DATADONE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An acknowledged data transfer has taken place on the control endpoint. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a5f870f773392a17f08d9494d7c8f10c6" prot="public">
          <name>NRF_USBD_EVENT_ENDISOIN0</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDISOIN   )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole ISOIN buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ad5936ba41dfccd2915fc0e2ec3a887bd" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT0</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[0] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6af21e07f0978c2fbeb063a8ae6155276d" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT1</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[1] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6abf3746cb4bdbd6e337d9c6c8fd38e6af" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT2</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[2] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6aa9f75a485be35880d29c84ab369e9c7b" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT3</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[3] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a612f10f64675333dffb9fe6b5823e377" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT4</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[4] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6acca649675f717f169d01aaad0b919f0d" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT5</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[5] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a10187f674c06474e4370bca5e4b6df18" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT6</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[6] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6adf9facfc2406fe5808076c8751d6f2b0" prot="public">
          <name>NRF_USBD_EVENT_ENDEPOUT7</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDEPOUT[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole EPOUT[7] buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a4bbee040b5f6b31a32febdbf90bad881" prot="public">
          <name>NRF_USBD_EVENT_ENDISOOUT0</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_ENDISOOUT  )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The whole ISOOUT buffer has been consumed. The RAM buffer can be accessed safely by software. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ae3cb91560fe95b107f7e7e324ecc69af" prot="public">
          <name>NRF_USBD_EVENT_SOF</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_SOF        )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signals that a SOF (start of frame) condition has been detected on the USB lines. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a4dd28ded5479d8b579e4641aa486af00" prot="public">
          <name>NRF_USBD_EVENT_USBEVENT</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_USBEVENT   )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An event or an error not covered by the specified events has occurred, check EVENTCAUSE register to find the cause. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ac660ce8ed22d201c0af693732a218026" prot="public">
          <name>NRF_USBD_EVENT_EP0SETUP</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_EP0SETUP   )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A valid SETUP token has been received (and acknowledged) on the control endpoint. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6aad1c28abf725d8d615738836e651c24c" prot="public">
          <name>NRF_USBD_EVENT_DATAEP</name>
          <initializer>= offsetof(NRF_USBD_Type, EVENTS_EPDATA     )</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A data transfer has occurred on a data endpoint, indicated by the EPDATASTATUS register. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USBD events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="80" column="1" bodyfile="hal/nrf_usbd.h" bodystart="81" bodyend="107"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1gafdd0cd13c3c89afb8a05dae04306a81f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_short_mask_t</name>
        <enumvalue id="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fa1b7356a0a28ca3d52198b78ad6fefe4c" prot="public">
          <name>NRF_USBD_SHORT_EP0DATADONE_STARTEPIN0_MASK</name>
          <initializer>= USBD_SHORTS_EP0DATADONE_STARTEPIN0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between EP0DATADONE event and STARTEPIN0 task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fa0b3f874c1ef8311e523b801fadd4b3e9" prot="public">
          <name>NRF_USBD_SHORT_EP0DATADONE_STARTEPOUT0_MASK</name>
          <initializer>= USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between EP0DATADONE event and STARTEPOUT0 task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fa81e66f5768d57e60244893d93c1d3bc8" prot="public">
          <name>NRF_USBD_SHORT_EP0DATADONE_EP0STATUS_MASK</name>
          <initializer>= USBD_SHORTS_EP0DATADONE_EP0STATUS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between EP0DATADONE event and EP0STATUS task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fad0617183c52a6bb7ca15c4e36b3d6e38" prot="public">
          <name>NRF_USBD_SHORT_ENDEPOUT0_EP0STATUS_MASK</name>
          <initializer>= USBD_SHORTS_ENDEPOUT0_EP0STATUS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between ENDEPOUT[0] event and EP0STATUS task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fa1d863080219bf895b1e723b8201fb2a9" prot="public">
          <name>NRF_USBD_SHORT_ENDEPOUT0_EP0RCVOUT_MASK</name>
          <initializer>= USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between ENDEPOUT[0] event and EP0RCVOUT task. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USBD shorts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="110" column="1" bodyfile="hal/nrf_usbd.h" bodystart="111" bodyend="117"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1gabb0886b59ca193e84b9405ea55444e99" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_int_mask_t</name>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ac37d68fdbd9aef08827ce94b49330ad7" prot="public">
          <name>NRF_USBD_INT_USBRESET_MASK</name>
          <initializer>= USBD_INTEN_USBRESET_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for USBRESET event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ada4192c314b47c030ca33d8c4e586305" prot="public">
          <name>NRF_USBD_INT_STARTED_MASK</name>
          <initializer>= USBD_INTEN_STARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for STARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99af575309faaea4de9909ee01d1da6debb" prot="public">
          <name>NRF_USBD_INT_ENDEPIN0_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[0] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ae5422bd3dce7ac7c604a82c56c565fba" prot="public">
          <name>NRF_USBD_INT_ENDEPIN1_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[1] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ae6dd16ba2e80c5d6e42b28925f214e53" prot="public">
          <name>NRF_USBD_INT_ENDEPIN2_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[2] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a6fa982339a54bc3a3dd70ee379033a68" prot="public">
          <name>NRF_USBD_INT_ENDEPIN3_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[3] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a47f1b11f42f5fabd892f23ef98917b43" prot="public">
          <name>NRF_USBD_INT_ENDEPIN4_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[4] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99accdc728d1dd0ffb3aa683b2d1dcb1126" prot="public">
          <name>NRF_USBD_INT_ENDEPIN5_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[5] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a90c66c4312063be527effed166ef0189" prot="public">
          <name>NRF_USBD_INT_ENDEPIN6_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[6] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99afd0bbd63552837726376b0294c1ec614" prot="public">
          <name>NRF_USBD_INT_ENDEPIN7_MASK</name>
          <initializer>= USBD_INTEN_ENDEPIN7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPIN[7] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a748b2373c4e31c7b325bf21ec76cb0f4" prot="public">
          <name>NRF_USBD_INT_EP0DATADONE_MASK</name>
          <initializer>= USBD_INTEN_EP0DATADONE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for EP0DATADONE event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a880f7153500a33e64bdc99d47281d18e" prot="public">
          <name>NRF_USBD_INT_ENDISOIN0_MASK</name>
          <initializer>= USBD_INTEN_ENDISOIN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDISOIN[0] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a5bd2330fe36dd832277019d9486c1120" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT0_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[0] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ac38bd0cd841901151c1b6454b27a4e06" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT1_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[1] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a9e00b89329eff80a86818b090a174d09" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT2_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[2] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a76a9c94091a0e32af6d059bdfbdca865" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT3_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[3] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99aa2151d91bb090113401dfd2c83d491d3" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT4_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[4] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a767506405908faf164481e4db334484a" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT5_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[5] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a3fca2864d752b289e59be96918792298" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT6_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[6] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ab115f6cb829a6b69c5a89c23ddef6ecf" prot="public">
          <name>NRF_USBD_INT_ENDEPOUT7_MASK</name>
          <initializer>= USBD_INTEN_ENDEPOUT7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDEPOUT[7] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a241af2b50bf2876d78573d5eae0e2770" prot="public">
          <name>NRF_USBD_INT_ENDISOOUT0_MASK</name>
          <initializer>= USBD_INTEN_ENDISOOUT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for ENDISOOUT[0] event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a234d4ad6a36d8a9e04b4f1d09ac79540" prot="public">
          <name>NRF_USBD_INT_SOF_MASK</name>
          <initializer>= USBD_INTEN_SOF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for SOF event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a455c86aa80aa62952865aef26ca3ec6f" prot="public">
          <name>NRF_USBD_INT_USBEVENT_MASK</name>
          <initializer>= USBD_INTEN_USBEVENT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for USBEVENT event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a596911d01498576994e83241e979d4e5" prot="public">
          <name>NRF_USBD_INT_EP0SETUP_MASK</name>
          <initializer>= USBD_INTEN_EP0SETUP_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for EP0SETUP event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ade8a86638b6c4777f261671ac4a72dca" prot="public">
          <name>NRF_USBD_INT_DATAEP_MASK</name>
          <initializer>= USBD_INTEN_EPDATA_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable or disable interrupt for EPDATA event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>USBD interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="120" column="1" bodyfile="hal/nrf_usbd.h" bodystart="121" bodyend="147"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1ga8588a7f666e82f6c441046d924ff197e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_eventcause_mask_t</name>
        <enumvalue id="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197ea526a378a0bce39373b3521252a404dab" prot="public">
          <name>NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK</name>
          <initializer>= USBD_EVENTCAUSE_ISOOUTCRC_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CRC error was detected on isochronous OUT endpoint 8. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197ea68761f3edd6f26802ec415c63315204d" prot="public">
          <name>NRF_USBD_EVENTCAUSE_SUSPEND_MASK</name>
          <initializer>= USBD_EVENTCAUSE_SUSPEND_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signals that the USB lines have been seen idle long enough for the device to enter suspend. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197ea9774c93c16b0f8d3557e1794df33d608" prot="public">
          <name>NRF_USBD_EVENTCAUSE_RESUME_MASK</name>
          <initializer>= USBD_EVENTCAUSE_RESUME_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Signals that a RESUME condition (K state or activity restart) has been detected on the USB lines. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197eaa71e0597c1c9ca8d665399d56a23b571" prot="public">
          <name>NRF_USBD_EVENTCAUSE_WUREQ_MASK</name>
          <initializer>= USBD_EVENTCAUSE_USBWUALLOWED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The USBD peripheral has exited Low Power mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197ea124d310529b710dba2b27bbfeaa23468" prot="public">
          <name>NRF_USBD_EVENTCAUSE_READY_MASK</name>
          <initializer>= USBD_EVENTCAUSE_READY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>MAC is ready for normal operation, rised few us after USBD enabling. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>EVENTCAUSE register bit masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="548" column="1" bodyfile="hal/nrf_usbd.h" bodystart="549" bodyend="555"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1ga86af0982c97904e6f14200709346f93e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_dpdmvalue_t</name>
        <enumvalue id="group__nrf__usbd__hal_1gga86af0982c97904e6f14200709346f93eaa3bb7c1a49d424f6bdfe82463cb86abb" prot="public">
          <name>NRF_USBD_DPDMVALUE_RESUME</name>
          <initializer>= USBD_DPDMVALUE_STATE_Resume</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generate RESUME signal. Signal is generated for 50<nonbreakablespace/>us or 5<nonbreakablespace/>ms, depending on bus state. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga86af0982c97904e6f14200709346f93ea5a47d0fdb93688f7dee41660599df12b" prot="public">
          <name>NRF_USBD_DPDMVALUE_J</name>
          <initializer>= USBD_DPDMVALUE_STATE_J</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>D+ Forced high, D- forced low (J state) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga86af0982c97904e6f14200709346f93ea5e1e542f5c263ee2d74b5e53887bf7d6" prot="public">
          <name>NRF_USBD_DPMVALUE_K</name>
          <initializer>= USBD_DPDMVALUE_STATE_K</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>D+ Forced low, D- forced high (K state) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>DPDMVALUE register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="558" column="1" bodyfile="hal/nrf_usbd.h" bodystart="559" bodyend="567"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1gac7a52ea2795a7ec86d88d2479115e8ab" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_dtoggle_t</name>
        <enumvalue id="group__nrf__usbd__hal_1ggac7a52ea2795a7ec86d88d2479115e8abad544fd91f626686855661c029f6783ed" prot="public">
          <name>NRF_USBD_DTOGGLE_NOP</name>
          <initializer>= USBD_DTOGGLE_VALUE_Nop</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>No operation - do not change the current data toggle on the selected endpoint. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggac7a52ea2795a7ec86d88d2479115e8aba840a6b8fd3f75337a0cf934631722bbe" prot="public">
          <name>NRF_USBD_DTOGGLE_DATA0</name>
          <initializer>= USBD_DTOGGLE_VALUE_Data0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data toggle is DATA0 on the selected endpoint. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggac7a52ea2795a7ec86d88d2479115e8aba1457b3fd3ca4bbcdcda2f124bd3bc4d7" prot="public">
          <name>NRF_USBD_DTOGGLE_DATA1</name>
          <initializer>= USBD_DTOGGLE_VALUE_Data1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data toggle is DATA1 on the selected endpoint. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Data toggle value or operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="570" column="1" bodyfile="hal/nrf_usbd.h" bodystart="571" bodyend="575"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1gadbdc3f9d30d220c792ee698ea3ab290e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_epstatus_mask_t</name>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea9930946a2822ff081aa0334b4daaed4b" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN0_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290eadf7ba9dc2ea5a140c44e85cde571778d" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN1_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea9834424b075a571be03f2a43df693707" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN2_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290eacd7948757404a6292186f06eba2c0f50" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN3_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea839d6215c2f8a13f67b29e6738b400ad" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN4_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea926b99539533e2b23de09e507c8ebaab" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN5_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea7c858e147834b090dbf109be768b95c6" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN6_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea145ddd2aec13dc941d405fe517f151fa" prot="public">
          <name>NRF_USBD_EPSTATUS_EPIN7_MASK</name>
          <initializer>= USBD_EPSTATUS_EPIN7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea02a098c65ee3bf5d3476af19ec002092" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT0_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea7a00c403af48744512e32ce64eac300d" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT1_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea8b20e0dfa551988c87481553a054e977" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT2_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea0f8f7cacb729f8e647912ebb5767b5c3" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT3_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea7bbe3764bb29a5aeacbe521857688425" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT4_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290eaea2068754fdffeccd363b3415a42f245" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT5_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290ea9ac1d86018357bc34f17d2232f227405" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT6_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggadbdc3f9d30d220c792ee698ea3ab290eab00bfaff080250255dbb318aff30727e" prot="public">
          <name>NRF_USBD_EPSTATUS_EPOUT7_MASK</name>
          <initializer>= USBD_EPSTATUS_EPOUT7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>EPSTATUS bit masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="578" column="1" bodyfile="hal/nrf_usbd.h" bodystart="579" bodyend="597"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1gaf16119bd371d2d9bae89ffe785b8a08b" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_dataepstatus_mask_t</name>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba26164dd9e22a7bb8d26408dcffafb3a2" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN1_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08bab8c9f4ac55d304226357942d4e97e752" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN2_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba8713a0b49a4a76c7b25c3174d9a954cb" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN3_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08baf7deffc53c77167e17de553c0b2e55e5" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN4_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba7d620b08703f2f6907b801c1ffea5eaf" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN5_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba5a6f4e98cb71616f6dc11228f996a8d2" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN6_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba92264f1eade7b382672cc65ceb5f1ea4" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPIN7_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPIN7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba8788930f35e9a80cc5e38f60d82d035f" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT1_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba5233a17d82421fb84aa13c72ad6d5a60" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT2_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba073c3cb6b9886e2d4f6b29a646dccb07" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT3_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba668b2d97366e75cc6f91920609b140d9" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT4_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba30b40d896bd6715cde549e410c04d27b" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT5_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba154cbac580af144e2c4503256b6b3cb4" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT6_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1ggaf16119bd371d2d9bae89ffe785b8a08ba5fa040b97a4d7e29188e7012061e1b5b" prot="public">
          <name>NRF_USBD_EPDATASTATUS_EPOUT7_MASK</name>
          <initializer>= USBD_EPDATASTATUS_EPOUT7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>DATAEPSTATUS bit masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="600" column="1" bodyfile="hal/nrf_usbd.h" bodystart="601" bodyend="617"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1ga2b397851455aff39727f26fa7f52a26c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_isosplit_t</name>
        <enumvalue id="group__nrf__usbd__hal_1gga2b397851455aff39727f26fa7f52a26ca75c5f68dab4ec2a06a61f5bedbde1b68" prot="public">
          <name>NRF_USBD_ISOSPLIT_ONEDIR</name>
          <initializer>= USBD_ISOSPLIT_SPLIT_OneDir</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Full buffer dedicated to either ISO IN or OUT. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga2b397851455aff39727f26fa7f52a26cafa3a5cc6980ae430de05d2fa27941b58" prot="public">
          <name>NRF_USBD_ISOSPLIT_HALF</name>
          <initializer>= USBD_ISOSPLIT_SPLIT_HalfIN</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Buffer divided in half. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ISOSPLIT configurations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="620" column="1" bodyfile="hal/nrf_usbd.h" bodystart="621" bodyend="624"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__usbd__hal_1ga2328f0becb99ca74db0490cd48af4861" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_usbd_isoinconfig_t</name>
        <enumvalue id="group__nrf__usbd__hal_1gga2328f0becb99ca74db0490cd48af4861af5220a5dd7d3def691031ebfc83e27be" prot="public">
          <name>NRF_USBD_ISOINCONFIG_NORESP</name>
          <initializer>= USBD_ISOINCONFIG_RESPONSE_NoResp</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Endpoint does not respond to an ISO IN token when no data is ready. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__usbd__hal_1gga2328f0becb99ca74db0490cd48af4861ac85cee2b3da471763645cfbf36bbbff5" prot="public">
          <name>NRF_USBD_ISOINCONFIG_ZERODATA</name>
          <initializer>= USBD_ISOINCONFIG_RESPONSE_ZeroData</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Endpoint responds with a zero-length data packet to an ISO IN token when no data is ready. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ISOINCONFIG configurations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="627" column="1" bodyfile="hal/nrf_usbd.h" bodystart="628" bodyend="631"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga5b6305bb613dbbe0fa8fe0c946113053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_task_trigger</definition>
        <argsstring>(NRF_USBD_Type *p_reg, nrf_usbd_task_t task)</argsstring>
        <name>nrf_usbd_task_trigger</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1gacef518da985b1dea4e65fb035cc3ffb7" kindref="member">nrf_usbd_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified USBD task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="322" column="24" bodyfile="hal/nrf_usbd.h" bodystart="322" bodyend="326" declfile="hal/nrf_usbd.h" declline="156" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga5d91d10e21fdcd9e9256eb2ac99db807" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_task_address_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, nrf_usbd_task_t task)</argsstring>
        <name>nrf_usbd_task_address_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1gacef518da985b1dea4e65fb035cc3ffb7" kindref="member">nrf_usbd_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of the specified USBD task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Task address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="328" column="28" bodyfile="hal/nrf_usbd.h" bodystart="328" bodyend="332" declfile="hal/nrf_usbd.h" declline="166" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gad3766f49d2d34f7e5bd7a39e2c4cc030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_event_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg, nrf_usbd_event_t event)</argsstring>
        <name>nrf_usbd_event_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="334" column="24" bodyfile="hal/nrf_usbd.h" bodystart="334" bodyend="338" declfile="hal/nrf_usbd.h" declline="175" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga819a09be036542e509f2fcceccf18c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_usbd_event_check</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, nrf_usbd_event_t event)</argsstring>
        <name>nrf_usbd_event_check</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the USBD event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="340" column="24" bodyfile="hal/nrf_usbd.h" bodystart="340" bodyend="343" declfile="hal/nrf_usbd.h" declline="186" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga6ba54cb078b7ac770ab19407d2dd5b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_usbd_event_get_and_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg, nrf_usbd_event_t event)</argsstring>
        <name>nrf_usbd_event_get_and_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting and clearing the state of the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks the state of the event and clears it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event was set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event was not set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="345" column="24" bodyfile="hal/nrf_usbd.h" bodystart="345" bodyend="353" declfile="hal/nrf_usbd.h" declline="199" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gaa8d89568dfc90f11a13cc4ec011614a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_event_address_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, nrf_usbd_event_t event)</argsstring>
        <name>nrf_usbd_event_address_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of the specified USBD event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="355" column="28" bodyfile="hal/nrf_usbd.h" bodystart="355" bodyend="359" declfile="hal/nrf_usbd.h" declline="209" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga848a66d0f7750d3c112c6e273b63eab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_shorts_enable</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_usbd_shorts_enable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcut mask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="361" column="24" bodyfile="hal/nrf_usbd.h" bodystart="361" bodyend="364" declfile="hal/nrf_usbd.h" declline="218" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga2fc4c421f2458cdaca584f38f19fc373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_shorts_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_usbd_shorts_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for clearing shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcut mask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="366" column="24" bodyfile="hal/nrf_usbd.h" bodystart="366" bodyend="377" declfile="hal/nrf_usbd.h" declline="226" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga4fdfbd1cac43daab01d95d68403799c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_shorts_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_shorts_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the shortcut mask. </para>
        </briefdescription>
        <detaileddescription>
<para>Function returns shortcut register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flags of the currently enabled shortcuts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="379" column="28" bodyfile="hal/nrf_usbd.h" bodystart="379" bodyend="382" declfile="hal/nrf_usbd.h" declline="237" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gab8394a8e2a2238621dd641533827e904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_int_enable</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_usbd_int_enable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the selected interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__usbd__hal_1gabb0886b59ca193e84b9405ea55444e99" kindref="member">nrf_usbd_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="384" column="24" bodyfile="hal/nrf_usbd.h" bodystart="384" bodyend="387" declfile="hal/nrf_usbd.h" declline="246" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gacc0de9e2275bb65dd566400f45ac73f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_int_enable_check</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_usbd_int_enable_check</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__usbd__hal_1gabb0886b59ca193e84b9405ea55444e99" kindref="member">nrf_usbd_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="389" column="28" bodyfile="hal/nrf_usbd.h" bodystart="389" bodyend="392" declfile="hal/nrf_usbd.h" declline="257" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga66829e1a9cd3920b2ff5b17fb3d39569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_int_enable_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_int_enable_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the information about the enabled interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flags of the enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="394" column="28" bodyfile="hal/nrf_usbd.h" bodystart="394" bodyend="397" declfile="hal/nrf_usbd.h" declline="266" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga71ac25b07069e1509d8005c56902f1fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_int_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_usbd_int_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the selected interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__usbd__hal_1gabb0886b59ca193e84b9405ea55444e99" kindref="member">nrf_usbd_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="399" column="24" bodyfile="hal/nrf_usbd.h" bodystart="399" bodyend="402" declfile="hal/nrf_usbd.h" declline="275" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="nrf__usbd_8h_1ab571bdd3190e0d27168a8c1109bebc89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE volatile uint32_t *</type>
        <definition>NRF_STATIC_INLINE volatile uint32_t * nrf_usbd_getRegPtr</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t offset)</argsstring>
        <name>nrf_usbd_getRegPtr</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="297" column="37" bodyfile="hal/nrf_usbd.h" bodystart="297" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="nrf__usbd_8h_1a62941efb2622741f7f73e11464ef1245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE volatile const uint32_t *</type>
        <definition>NRF_STATIC_INLINE volatile const uint32_t * nrf_usbd_getRegPtr_c</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint32_t offset)</argsstring>
        <name>nrf_usbd_getRegPtr_c</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="312" column="43" bodyfile="hal/nrf_usbd.h" bodystart="312" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga562e57247a2d9890b9468d0bd73e10ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_enable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_enable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the USBD. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1092" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1092" bodyend="1096" declfile="hal/nrf_usbd.h" declline="638" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga560e5d2709b79666577a22053b29d257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the USBD. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1098" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1098" bodyend="1102" declfile="hal/nrf_usbd.h" declline="645" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga6d9e732f036188c7bcffd40e1af8ddfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_eventcause_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_eventcause_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the EVENTCAUSE register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag values defined in <ref refid="group__nrf__usbd__hal_1ga8588a7f666e82f6c441046d924ff197e" kindref="member">nrf_usbd_eventcause_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1104" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1104" bodyend="1107" declfile="hal/nrf_usbd.h" declline="654" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga09314d6cf8bf067c28c4be5f6f900ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_eventcause_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t flags)</argsstring>
        <name>nrf_usbd_eventcause_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Function for clearing the EVENTCAUSE flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags defined in <ref refid="group__nrf__usbd__hal_1ga8588a7f666e82f6c441046d924ff197e" kindref="member">nrf_usbd_eventcause_mask_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1109" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1109" bodyend="1113" declfile="hal/nrf_usbd.h" declline="662" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gafdbf646da698addceb7fccbf6f19562d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_eventcause_get_and_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_eventcause_get_and_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the EVENTCAUSE register and clearing flags that are set. </para>
        </briefdescription>
        <detaileddescription>
<para>The safest way to return current EVENTCAUSE register. All the flags that are returned would be cleared inside EVENTCAUSE register.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag values defined in <ref refid="group__nrf__usbd__hal_1ga8588a7f666e82f6c441046d924ff197e" kindref="member">nrf_usbd_eventcause_mask_t</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1115" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1115" bodyend="1121" declfile="hal/nrf_usbd.h" declline="674" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga4b4a86b907d9d16354916efa13c913f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_halted_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_halted_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for getting the HALTEDEPIN register value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Use this function for the response for GetStatus() request to endpoint. To check whether the endpoint is stalled in the code, use <ref refid="group__nrf__usbd__hal_1gae6a606967bf03d76c70bf22552a94617" kindref="member">nrf_usbd_ep_is_stall</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number with IN or OUT flag.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the HALTEDEPIN or HALTEDOUT register for the selected endpoint. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1123" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1123" bodyend="1134" declfile="hal/nrf_usbd.h" declline="687" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gae6a606967bf03d76c70bf22552a94617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_usbd_ep_is_stall</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_is_stall</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the selected endpoint is stalled. </para>
        </briefdescription>
        <detaileddescription>
<para>Function to be used as a syntax sweeter for <ref refid="group__nrf__usbd__hal_1ga4b4a86b907d9d16354916efa13c913f4" kindref="member">nrf_usbd_halted_get</ref>.</para>
<para>Also as the isochronous endpoint cannot be halted - it returns always false if isochronous endpoint is checked.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number with IN or OUT flag.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint is halted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The endpoint is not halted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1136" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1136" bodyend="1141" declfile="hal/nrf_usbd.h" declline="703" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga6bf521fe906e06186dc3b1633cd334d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_epstatus_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_epstatus_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting EPSTATUS register value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag values defined in <ref refid="group__nrf__usbd__hal_1gadbdc3f9d30d220c792ee698ea3ab290e" kindref="member">nrf_usbd_epstatus_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1143" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1143" bodyend="1146" declfile="hal/nrf_usbd.h" declline="712" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga8aad5300a3ad73ce92b98a123282c714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_epstatus_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t flags)</argsstring>
        <name>nrf_usbd_epstatus_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Function for clearing EPSTATUS register value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags defined in <ref refid="group__nrf__usbd__hal_1gadbdc3f9d30d220c792ee698ea3ab290e" kindref="member">nrf_usbd_epstatus_mask_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1148" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1148" bodyend="1151" declfile="hal/nrf_usbd.h" declline="720" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gac1a2a0466ceee8179df9d7d3a7e865ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_epstatus_get_and_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_epstatus_get_and_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting and clearing EPSTATUS register value. </para>
        </briefdescription>
        <detaileddescription>
<para>Function clears all flags in register set before returning its value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag values defined in <ref refid="group__nrf__usbd__hal_1gadbdc3f9d30d220c792ee698ea3ab290e" kindref="member">nrf_usbd_epstatus_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1153" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1153" bodyend="1159" declfile="hal/nrf_usbd.h" declline="731" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga23746eeddcdc074aa2639fe406212a3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_epdatastatus_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_epdatastatus_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting DATAEPSTATUS register value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag values defined in <ref refid="group__nrf__usbd__hal_1gaf16119bd371d2d9bae89ffe785b8a08b" kindref="member">nrf_usbd_dataepstatus_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1161" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1161" bodyend="1164" declfile="hal/nrf_usbd.h" declline="740" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga165b2891148dc620c4105f1b430832ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_epdatastatus_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint32_t flags)</argsstring>
        <name>nrf_usbd_epdatastatus_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Function for clearing DATAEPSTATUS register value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags defined in <ref refid="group__nrf__usbd__hal_1gaf16119bd371d2d9bae89ffe785b8a08b" kindref="member">nrf_usbd_dataepstatus_mask_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1166" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1166" bodyend="1169" declfile="hal/nrf_usbd.h" declline="748" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gadfa04941d3bcefa5119bc69ec39cb259" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_epdatastatus_get_and_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_epdatastatus_get_and_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting and clearing DATAEPSTATUS register value. </para>
        </briefdescription>
        <detaileddescription>
<para>Function clears all flags in register set before returning its value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flag values defined in <ref refid="group__nrf__usbd__hal_1gaf16119bd371d2d9bae89ffe785b8a08b" kindref="member">nrf_usbd_dataepstatus_mask_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1171" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1171" bodyend="1177" declfile="hal/nrf_usbd.h" declline="759" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga484d691a3f3ac383b700cafe2b2d2ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE size_t</type>
        <definition>NRF_STATIC_INLINE size_t nrf_usbd_epout_size_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_epout_size_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of received bytes on the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function can be used on bulk, interrupt, and isochronous endpoints. </para>
</simplesect>
<simplesect kind="note"><para>For the function that returns different value for the ISOOUT zero transfer or no transfer at all, see the <ref refid="group__nrf__usbd__hal_1ga781e617b1d8866be26f485f3b7f8320f" kindref="member">nrf_usbd_episoout_size_get</ref> function. This function will return 0 for both cases.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of received bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1207" column="26" bodyfile="hal/nrf_usbd.h" bodystart="1207" bodyend="1223" declfile="hal/nrf_usbd.h" declline="826" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga781e617b1d8866be26f485f3b7f8320f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE size_t</type>
        <definition>NRF_STATIC_INLINE size_t nrf_usbd_episoout_size_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_episoout_size_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for getting number of the received bytes on isochronous endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier, must be an isochronous OUT endpoint.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes received or <ref refid="group__nrf__usbd__hal_1gae8241e0e42223e58adb98e2fb7b71a3f" kindref="member">NRF_USBD_EPISOOUT_NO_DATA</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1225" column="26" bodyfile="hal/nrf_usbd.h" bodystart="1225" bodyend="1242" declfile="hal/nrf_usbd.h" declline="836" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gaf64d7d3c97e6dd3f6cfd0ba8b5297ca2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_epout_clear</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_epout_clear</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for clearing OUT endpoint to accept any new incoming traffic. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier. Only OUT interrupt/bulk endpoints are accepted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1244" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1244" bodyend="1249" declfile="hal/nrf_usbd.h" declline="844" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gacde4d643e37439183c87b23d9a3a077a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_pullup_enable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_pullup_enable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the USB pullup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1251" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1251" bodyend="1255" declfile="hal/nrf_usbd.h" declline="851" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gabf52b8f824fcdcb9ff10aaaecdfcabe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_pullup_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_pullup_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the USB pullup. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1257" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1257" bodyend="1261" declfile="hal/nrf_usbd.h" declline="858" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga0c4627bb70c2fdaf5f5e65edca4e2739" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_usbd_pullup_check</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_pullup_check</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for returning the current the USB pullup state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The USB pullup is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The USB pullup is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1263" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1263" bodyend="1266" declfile="hal/nrf_usbd.h" declline="868" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga3f0f369fe4c04df616590d69487339c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_dpdmvalue_set</definition>
        <argsstring>(NRF_USBD_Type *p_reg, nrf_usbd_dpdmvalue_t val)</argsstring>
        <name>nrf_usbd_dpdmvalue_set</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga86af0982c97904e6f14200709346f93e" kindref="member">nrf_usbd_dpdmvalue_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Function for configuring the value to be forced on the bus on the DRIVEDPDM task. </para>
        </briefdescription>
        <detaileddescription>
<para>The selected state will be forced on the bus when <ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ac9ba27e40be0a06543e210ae50915cca" kindref="member">NRF_USBD_TASK_DRIVEDPDM</ref> is set. The state will be removed from the bus on <ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a3344ae7c97a03e4c3a24c456f13f50e2" kindref="member">NRF_USBD_TASK_NODRIVEDPDM</ref> and the control will be returned to the USBD peripheral.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">val</parametername>
</parameternamelist>
<parameterdescription>
<para>State to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1268" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1268" bodyend="1271" declfile="hal/nrf_usbd.h" declline="880" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga60b7f36031cd0ae233d609ab390eae84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_dtoggle_set</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep, nrf_usbd_dtoggle_t op)</argsstring>
        <name>nrf_usbd_dtoggle_set</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1gac7a52ea2795a7ec86d88d2479115e8ab" kindref="member">nrf_usbd_dtoggle_t</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Function for setting the data toggle. </para>
        </briefdescription>
        <detaileddescription>
<para>Configuration of the current state of data toggling.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number with the information about its direction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>Operation to execute. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1273" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1273" bodyend="1282" declfile="hal/nrf_usbd.h" declline="891" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga1c270f17c425d5d9c844aed147e973a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__usbd__hal_1gac7a52ea2795a7ec86d88d2479115e8ab" kindref="member">nrf_usbd_dtoggle_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_usbd_dtoggle_t nrf_usbd_dtoggle_get</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_dtoggle_get</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for getting the data toggle. </para>
        </briefdescription>
        <detaileddescription>
<para>Get the current state of data toggling.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint number to return the information about current data toggling.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_USBD_DTOGGLE_DATA0</parametername>
</parameternamelist>
<parameterdescription>
<para>Data toggle is DATA0 on selected endpoint. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_USBD_DTOGGLE_DATA1</parametername>
</parameternamelist>
<parameterdescription>
<para>Data toggle is DATA1 on selected endpoint. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1284" column="38" bodyfile="hal/nrf_usbd.h" bodystart="1284" bodyend="1291" declfile="hal/nrf_usbd.h" declline="906" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gaf17b7e12a6373351f12a81b361c12fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_usbd_ep_enable_check</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_enable_check</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the endpoint is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint ID to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1293" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1293" bodyend="1306" declfile="hal/nrf_usbd.h" declline="917" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga28d51ddddc9b82ce7a0f20d9d0c3eced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_ep_enable</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_enable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for enabling the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>The enabled endpoint responds for the tokens on the USB bus.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint ID to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1308" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1308" bodyend="1321" declfile="hal/nrf_usbd.h" declline="927" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga2ec0b9257ca5204d17bbc0ddbc21eb45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_ep_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for disabling the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para>The disabled endpoint does not respond for the tokens on the USB bus.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint ID to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1323" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1323" bodyend="1336" declfile="hal/nrf_usbd.h" declline="937" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gad5097e513286061bb0dd1a104606830e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_ep_all_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_ep_all_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling all endpoints. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1338" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1338" bodyend="1342" declfile="hal/nrf_usbd.h" declline="944" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gae22f114852bc426680af00d510127da4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>void nrf_usbd_ep_default_config</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_ep_default_config</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for setting the default endpoint configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The default configuration means that all endpoints, except for EP0 IN and EP0 OUT, are disabled. Such configuration is used after the USB device reset.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1344" column="6" bodyfile="hal/nrf_usbd.h" bodystart="1344" bodyend="1348" declfile="hal/nrf_usbd.h" declline="955" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gab783f26d050b386fffbcefc2cdf459cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_ep_stall</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_stall</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for stalling the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function cannot be called on isochronous endpoint.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1350" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1350" bodyend="1354" declfile="hal/nrf_usbd.h" declline="965" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gad80e8d94a4ab714d952b28b07e310a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_ep_unstall</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_unstall</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for unstalling the selected endpoint. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function cannot be called on isochronous endpoint.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1356" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1356" bodyend="1360" declfile="hal/nrf_usbd.h" declline="975" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga012c9fa1b3ef65862f6a37184f5cce33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_isosplit_set</definition>
        <argsstring>(NRF_USBD_Type *p_reg, nrf_usbd_isosplit_t split)</argsstring>
        <name>nrf_usbd_isosplit_set</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga2b397851455aff39727f26fa7f52a26c" kindref="member">nrf_usbd_isosplit_t</ref></type>
          <declname>split</declname>
        </param>
        <briefdescription>
<para>Function for configuring the isochronous buffer splitting. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures isochronous buffer splitting between IN and OUT endpoints.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">split</parametername>
</parameternamelist>
<parameterdescription>
<para>Required configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1362" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1362" bodyend="1365" declfile="hal/nrf_usbd.h" declline="985" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga3fae989351d356e8e77227861f6ecdd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__usbd__hal_1ga2b397851455aff39727f26fa7f52a26c" kindref="member">nrf_usbd_isosplit_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_usbd_isosplit_t nrf_usbd_isosplit_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_isosplit_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the isochronous buffer splitting configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gets the current isochronous buffer splitting configuration.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1367" column="39" bodyfile="hal/nrf_usbd.h" bodystart="1367" bodyend="1371" declfile="hal/nrf_usbd.h" declline="996" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gae0ff06baed465b177e31375ce001d0d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_framecntr_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_framecntr_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting current frame counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current frame counter. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1373" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1373" bodyend="1376" declfile="hal/nrf_usbd.h" declline="1005" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga944a5e908b4e3a16461bf04db92bafac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_lowpower_enable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_lowpower_enable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for entering into the USB low power mode. </para>
        </briefdescription>
        <detaileddescription>
<para>After this function is called, the clock source from the USBD is disconnected internally. After this function is called, most of the USBD registers cannot be accessed anymore.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__usbd__hal_1ga7553635a772c5cf7496efe211b6e56b9" kindref="member">nrf_usbd_lowpower_disable</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrf__usbd__hal_1ga8b635f1aec033d9e66dc4776b4e1e3bd" kindref="member">nrf_usbd_lowpower_check</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1378" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1378" bodyend="1382" declfile="hal/nrf_usbd.h" declline="1018" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga7553635a772c5cf7496efe211b6e56b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_lowpower_disable</definition>
        <argsstring>(NRF_USBD_Type *p_reg)</argsstring>
        <name>nrf_usbd_lowpower_disable</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for exiting from the USB low power mode. </para>
        </briefdescription>
        <detaileddescription>
<para>After this function is called, the clock source for the USBD is connected internally. The <ref refid="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197eaa71e0597c1c9ca8d665399d56a23b571" kindref="member">NRF_USBD_EVENTCAUSE_WUREQ_MASK</ref> event will be generated and then the USBD registers can be accessed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__usbd__hal_1ga944a5e908b4e3a16461bf04db92bafac" kindref="member">nrf_usbd_lowpower_enable</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrf__usbd__hal_1ga8b635f1aec033d9e66dc4776b4e1e3bd" kindref="member">nrf_usbd_lowpower_check</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1384" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1384" bodyend="1388" declfile="hal/nrf_usbd.h" declline="1032" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga8b635f1aec033d9e66dc4776b4e1e3bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_usbd_lowpower_check</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_lowpower_check</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking the state of the low power mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The USBD is in low power mode. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The USBD is not in low power mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1390" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1390" bodyend="1393" declfile="hal/nrf_usbd.h" declline="1042" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga8960604f2e9a410468de65bd29bbdddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_isoinconfig_set</definition>
        <argsstring>(NRF_USBD_Type *p_reg, nrf_usbd_isoinconfig_t config)</argsstring>
        <name>nrf_usbd_isoinconfig_set</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__usbd__hal_1ga2328f0becb99ca74db0490cd48af4861" kindref="member">nrf_usbd_isoinconfig_t</ref></type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Function for configuring ISO IN endpoint response to an IN token when no data is ready to be sent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Required configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1395" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1395" bodyend="1399" declfile="hal/nrf_usbd.h" declline="1050" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gaf665a23aabc0f564ecb8262ddd781c33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__usbd__hal_1ga2328f0becb99ca74db0490cd48af4861" kindref="member">nrf_usbd_isoinconfig_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_usbd_isoinconfig_t nrf_usbd_isoinconfig_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg)</argsstring>
        <name>nrf_usbd_isoinconfig_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the cofiguration of ISO IN endpoint response to an IN token when no data is ready to be sent. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Current configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1401" column="42" bodyfile="hal/nrf_usbd.h" bodystart="1401" bodyend="1405" declfile="hal/nrf_usbd.h" declline="1060" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1gaa5a00900f9f1485b4d8aa35fedb0a7f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_usbd_ep_easydma_set</definition>
        <argsstring>(NRF_USBD_Type *p_reg, uint8_t ep, uint32_t ptr, uint32_t maxcnt)</argsstring>
        <name>nrf_usbd_ep_easydma_set</name>
        <param>
          <type>NRF_USBD_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>maxcnt</declname>
        </param>
        <briefdescription>
<para>Function for configuring the EasyDMA channel. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures EasyDMA for the transfer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier (with direction). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxcnt</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to transfer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1407" column="24" bodyfile="hal/nrf_usbd.h" bodystart="1407" bodyend="1440" declfile="hal/nrf_usbd.h" declline="1072" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__usbd__hal_1ga6d8ca4b4f0d2a5ce041cd654bfe9884d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get</definition>
        <argsstring>(NRF_USBD_Type const *p_reg, uint8_t ep)</argsstring>
        <name>nrf_usbd_ep_amount_get</name>
        <param>
          <type>NRF_USBD_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Function for getting number of transferred bytes. </para>
        </briefdescription>
        <detaileddescription>
<para>This function gets the number of transferred bytes in the last transaction.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ep</parametername>
</parameternamelist>
<parameterdescription>
<para>Endpoint identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The content of the AMOUNT register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_usbd.h" line="1442" column="28" bodyfile="hal/nrf_usbd.h" bodystart="1442" bodyend="1472" declfile="hal/nrf_usbd.h" declline="1087" declcolumn="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2017<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_USBD_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_usbd_hal<sp/>USBD<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_usbd</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>Universal<sp/>Serial<sp/>Bus<sp/>Device<sp/>(USBD)</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>peripheral.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**<sp/>@brief<sp/>USBD<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7aaa692795b5120e01bf399355bf90c18c" kindref="member">NRF_USBD_TASK_STARTEPIN0</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPIN[0]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPIN[0].PTR,<sp/>EPIN[0].MAXCNT,<sp/>and<sp/>EPIN[0].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>control<sp/>endpoint<sp/>IN<sp/>0<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a47bbcd684ff4a662d5ef07efbca96c7d" kindref="member">NRF_USBD_TASK_STARTEPIN1</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPIN[1]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPIN[1].PTR,<sp/>EPIN[1].MAXCNT,<sp/>and<sp/>EPIN[1].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>IN<sp/>1<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a0ab46fe3aca622bb2dbeef5237433e42" kindref="member">NRF_USBD_TASK_STARTEPIN2</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPIN[2]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPIN[2].PTR,<sp/>EPIN[2].MAXCNT,<sp/>and<sp/>EPIN[2].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>IN<sp/>2<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a2814d3219dd0804b7287411f30f91ead" kindref="member">NRF_USBD_TASK_STARTEPIN3</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPIN[3]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPIN[3].PTR,<sp/>EPIN[3].MAXCNT,<sp/>and<sp/>EPIN[3].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>IN<sp/>3<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ae804a47cbdd93d97696bfd18c36a94ee" kindref="member">NRF_USBD_TASK_STARTEPIN4</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPIN[4]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPIN[4].PTR,<sp/>EPIN[4].MAXCNT,<sp/>and<sp/>EPIN[4].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>IN<sp/>4<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7af6e7f1750309ae67fe20f3032af514b9" kindref="member">NRF_USBD_TASK_STARTEPIN5</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPIN[5]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPIN[5].PTR,<sp/>EPIN[5].MAXCNT,<sp/>and<sp/>EPIN[5].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>IN<sp/>5<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ad26ab7b45ef225a275e8d239cf0cedf1" kindref="member">NRF_USBD_TASK_STARTEPIN6</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPIN[6]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPIN[6].PTR,<sp/>EPIN[6].MAXCNT,<sp/>and<sp/>EPIN[6].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>IN<sp/>6<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ae5181a7dab48989bbe300e67a26703cd" kindref="member">NRF_USBD_TASK_STARTEPIN7</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPIN[7]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPIN[7].PTR,<sp/>EPIN[7].MAXCNT,<sp/>and<sp/>EPIN[7].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>IN<sp/>7<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a0907bfacd52e75c55970b06b40c6f1d6" kindref="member">NRF_USBD_TASK_STARTISOIN</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTISOIN<sp/><sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>ISOIN.PTR,<sp/>ISOIN.MAXCNT,<sp/>and<sp/>ISOIN.CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>sending<sp/>data<sp/>on<sp/>ISO<sp/>endpoint<sp/>8.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a3a2aa3531997cacc5c710f0b6a3a8bca" kindref="member">NRF_USBD_TASK_STARTEPOUT0</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPOUT[0]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPOUT[0].PTR,<sp/>EPOUT[0].MAXCNT,<sp/>and<sp/>EPOUT[0].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>control<sp/>endpoint<sp/>0<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7aeff7635ea0a9fc83aa4533927c2cb12d" kindref="member">NRF_USBD_TASK_STARTEPOUT1</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPOUT[1]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPOUT[1].PTR,<sp/>EPOUT[1].MAXCNT,<sp/>and<sp/>EPOUT[1].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>1<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a6ac488aaacf506e91c384e41406254bb" kindref="member">NRF_USBD_TASK_STARTEPOUT2</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPOUT[2]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPOUT[2].PTR,<sp/>EPOUT[2].MAXCNT,<sp/>and<sp/>EPOUT[2].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>2<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ac1afd870aca0d6f544cd7f8c8dec77b8" kindref="member">NRF_USBD_TASK_STARTEPOUT3</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPOUT[3]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPOUT[3].PTR,<sp/>EPOUT[3].MAXCNT,<sp/>and<sp/>EPOUT[3].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>3<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a6c070678faad2173be91ecf9c130d803" kindref="member">NRF_USBD_TASK_STARTEPOUT4</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPOUT[4]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPOUT[4].PTR,<sp/>EPOUT[4].MAXCNT,<sp/>and<sp/>EPOUT[4].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>4<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a6082df80a2229390a497b6a7ad8eaf50" kindref="member">NRF_USBD_TASK_STARTEPOUT5</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPOUT[5]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPOUT[5].PTR,<sp/>EPOUT[5].MAXCNT,<sp/>and<sp/>EPOUT[5].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>5<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7adcda72f0323184b6daa5be2cdf2c8300" kindref="member">NRF_USBD_TASK_STARTEPOUT6</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPOUT[6]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPOUT[6].PTR,<sp/>EPOUT[6].MAXCNT,<sp/>and<sp/>EPOUT[6].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>6<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7aea65678c751ab58f6fed90df07ebf70e" kindref="member">NRF_USBD_TASK_STARTEPOUT7</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTEPOUT[7]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>EPOUT[7].PTR,<sp/>EPOUT[7].MAXCNT,<sp/>and<sp/>EPOUT[7].CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>data<sp/>endpoint<sp/>7<sp/>to<sp/>respond<sp/>to<sp/>traffic<sp/>from<sp/>host.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ab1d149e5b95fbb7297a22e196222cb36" kindref="member">NRF_USBD_TASK_STARTISOOUT</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_STARTISOOUT<sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Captures<sp/>the<sp/>ISOOUT.PTR,<sp/>ISOOUT.MAXCNT,<sp/>and<sp/>ISOOUT.CONFIG<sp/>registers<sp/>values,<sp/>and<sp/>enables<sp/>receiving<sp/>of<sp/>data<sp/>on<sp/>ISO<sp/>endpoint<sp/>8.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a4972fc44d7c126e2d70108582c6808d5" kindref="member">NRF_USBD_TASK_EP0RCVOUT</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_EP0RCVOUT<sp/><sp/><sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Allows<sp/>OUT<sp/>data<sp/>stage<sp/>on<sp/>the<sp/>control<sp/>endpoint<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a52811cb45db47f85042ab844929e8638" kindref="member">NRF_USBD_TASK_EP0STATUS</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_EP0STATUS<sp/><sp/><sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Allows<sp/>status<sp/>stage<sp/>on<sp/>the<sp/>control<sp/>endpoint<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ad4a98ee0874ff4f64285dbbebf258bd9" kindref="member">NRF_USBD_TASK_EP0STALL</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_EP0STALL<sp/><sp/><sp/><sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>STALLs<sp/>data<sp/>and<sp/>status<sp/>stage<sp/>on<sp/>the<sp/>control<sp/>endpoint<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7ac9ba27e40be0a06543e210ae50915cca" kindref="member">NRF_USBD_TASK_DRIVEDPDM</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_DPDMDRIVE<sp/><sp/><sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Forces<sp/>D+<sp/>and<sp/>D-lines<sp/>to<sp/>the<sp/>state<sp/>defined<sp/>in<sp/>the<sp/>DPDMVALUE<sp/>register.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggacef518da985b1dea4e65fb035cc3ffb7a3344ae7c97a03e4c3a24c456f13f50e2" kindref="member">NRF_USBD_TASK_NODRIVEDPDM</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>TASKS_DPDMNODRIVE<sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Stops<sp/>forcing<sp/>D+<sp/>and<sp/>D-<sp/>lines<sp/>to<sp/>any<sp/>state<sp/>(USB<sp/>engine<sp/>takes<sp/>control).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<ref refid="group__nrf__usbd__hal_1gacef518da985b1dea4e65fb035cc3ffb7" kindref="member">nrf_usbd_task_t</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment">/**<sp/>@brief<sp/>USBD<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6af83cb0aff273a343ea398411ec6e1537" kindref="member">NRF_USBD_EVENT_USBRESET</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_USBRESET<sp/><sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Signals<sp/>that<sp/>a<sp/>USB<sp/>reset<sp/>condition<sp/>is<sp/>detected<sp/>on<sp/>the<sp/>USB<sp/>lines.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ae841c340feff31143770e2b3384a12fb" kindref="member">NRF_USBD_EVENT_STARTED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_STARTED<sp/><sp/><sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Confirms<sp/>that<sp/>the<sp/>EPIN[n].PTR,<sp/>EPIN[n].MAXCNT,<sp/>EPIN[n].CONFIG,<sp/>or<sp/>EPOUT[n].PTR,<sp/>EPOUT[n].MAXCNT,<sp/>and<sp/>EPOUT[n].CONFIG<sp/>registers<sp/>have<sp/>been<sp/>captured<sp/>on<sp/>all<sp/>endpoints<sp/>reported<sp/>in<sp/>the<sp/>EPSTATUS<sp/>register.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ad04c0755ec5ce1eafe1a12e46c898822" kindref="member">NRF_USBD_EVENT_ENDEPIN0</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPIN[0]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPIN[0]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a658cd1bb7e3c3e6f9ea2c9311e0e3162" kindref="member">NRF_USBD_EVENT_ENDEPIN1</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPIN[1]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPIN[1]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a2145cb9e6a9f5de4a3ccc0f323b7de3d" kindref="member">NRF_USBD_EVENT_ENDEPIN2</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPIN[2]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPIN[2]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a28a65e73e6e125682f483734fdbeb238" kindref="member">NRF_USBD_EVENT_ENDEPIN3</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPIN[3]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPIN[3]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a917c50a3234d56030ef445541dda9141" kindref="member">NRF_USBD_EVENT_ENDEPIN4</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPIN[4]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPIN[4]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a28b6c47ec54fccae0dcbab0bc332ce28" kindref="member">NRF_USBD_EVENT_ENDEPIN5</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPIN[5]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPIN[5]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a1ece33d3fd52f5dd11e82f4a40ba9c42" kindref="member">NRF_USBD_EVENT_ENDEPIN6</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPIN[6]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPIN[6]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a24ede0a7230ba2f6705c5594963db249" kindref="member">NRF_USBD_EVENT_ENDEPIN7</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPIN[7]<sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPIN[7]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a5d8be992cabec77f4753060597a1eddc" kindref="member">NRF_USBD_EVENT_EP0DATADONE</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_EP0DATADONE),<sp/></highlight><highlight class="comment">/**&lt;<sp/>An<sp/>acknowledged<sp/>data<sp/>transfer<sp/>has<sp/>taken<sp/>place<sp/>on<sp/>the<sp/>control<sp/>endpoint.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a5f870f773392a17f08d9494d7c8f10c6" kindref="member">NRF_USBD_EVENT_ENDISOIN0</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDISOIN<sp/><sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>ISOIN<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ad5936ba41dfccd2915fc0e2ec3a887bd" kindref="member">NRF_USBD_EVENT_ENDEPOUT0</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPOUT[0]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPOUT[0]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6af21e07f0978c2fbeb063a8ae6155276d" kindref="member">NRF_USBD_EVENT_ENDEPOUT1</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPOUT[1]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPOUT[1]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6abf3746cb4bdbd6e337d9c6c8fd38e6af" kindref="member">NRF_USBD_EVENT_ENDEPOUT2</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPOUT[2]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPOUT[2]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6aa9f75a485be35880d29c84ab369e9c7b" kindref="member">NRF_USBD_EVENT_ENDEPOUT3</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPOUT[3]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPOUT[3]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a612f10f64675333dffb9fe6b5823e377" kindref="member">NRF_USBD_EVENT_ENDEPOUT4</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPOUT[4]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPOUT[4]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6acca649675f717f169d01aaad0b919f0d" kindref="member">NRF_USBD_EVENT_ENDEPOUT5</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPOUT[5]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPOUT[5]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a10187f674c06474e4370bca5e4b6df18" kindref="member">NRF_USBD_EVENT_ENDEPOUT6</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPOUT[6]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPOUT[6]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6adf9facfc2406fe5808076c8751d6f2b0" kindref="member">NRF_USBD_EVENT_ENDEPOUT7</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDEPOUT[7]),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>EPOUT[7]<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a4bbee040b5f6b31a32febdbf90bad881" kindref="member">NRF_USBD_EVENT_ENDISOOUT0</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_ENDISOOUT<sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>whole<sp/>ISOOUT<sp/>buffer<sp/>has<sp/>been<sp/>consumed.<sp/>The<sp/>RAM<sp/>buffer<sp/>can<sp/>be<sp/>accessed<sp/>safely<sp/>by<sp/>software.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ae3cb91560fe95b107f7e7e324ecc69af" kindref="member">NRF_USBD_EVENT_SOF</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_SOF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Signals<sp/>that<sp/>a<sp/>SOF<sp/>(start<sp/>of<sp/>frame)<sp/>condition<sp/>has<sp/>been<sp/>detected<sp/>on<sp/>the<sp/>USB<sp/>lines.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6a4dd28ded5479d8b579e4641aa486af00" kindref="member">NRF_USBD_EVENT_USBEVENT</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_USBEVENT<sp/><sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>An<sp/>event<sp/>or<sp/>an<sp/>error<sp/>not<sp/>covered<sp/>by<sp/>the<sp/>specified<sp/>events<sp/>has<sp/>occurred,<sp/>check<sp/>EVENTCAUSE<sp/>register<sp/>to<sp/>find<sp/>the<sp/>cause.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6ac660ce8ed22d201c0af693732a218026" kindref="member">NRF_USBD_EVENT_EP0SETUP</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_EP0SETUP<sp/><sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>A<sp/>valid<sp/>SETUP<sp/>token<sp/>has<sp/>been<sp/>received<sp/>(and<sp/>acknowledged)<sp/>on<sp/>the<sp/>control<sp/>endpoint.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga0187f1cfcba4bbd00158f9b04ec06fe6aad1c28abf725d8d615738836e651c24c" kindref="member">NRF_USBD_EVENT_DATAEP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_USBD_Type,<sp/>EVENTS_EPDATA<sp/><sp/><sp/><sp/><sp/>),<sp/></highlight><highlight class="comment">/**&lt;<sp/>A<sp/>data<sp/>transfer<sp/>has<sp/>occurred<sp/>on<sp/>a<sp/>data<sp/>endpoint,<sp/>indicated<sp/>by<sp/>the<sp/>EPDATASTATUS<sp/>register.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">}<ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="109"><highlight class="comment">/**<sp/>@brief<sp/>USBD<sp/>shorts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fa1b7356a0a28ca3d52198b78ad6fefe4c" kindref="member">NRF_USBD_SHORT_EP0DATADONE_STARTEPIN0_MASK</ref><sp/><sp/>=<sp/>USBD_SHORTS_EP0DATADONE_STARTEPIN0_Msk<sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>EP0DATADONE<sp/>event<sp/>and<sp/>STARTEPIN0<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fa0b3f874c1ef8311e523b801fadd4b3e9" kindref="member">NRF_USBD_SHORT_EP0DATADONE_STARTEPOUT0_MASK</ref><sp/>=<sp/>USBD_SHORTS_EP0DATADONE_STARTEPOUT0_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>EP0DATADONE<sp/>event<sp/>and<sp/>STARTEPOUT0<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fa81e66f5768d57e60244893d93c1d3bc8" kindref="member">NRF_USBD_SHORT_EP0DATADONE_EP0STATUS_MASK</ref><sp/><sp/><sp/>=<sp/>USBD_SHORTS_EP0DATADONE_EP0STATUS_Msk<sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>EP0DATADONE<sp/>event<sp/>and<sp/>EP0STATUS<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fad0617183c52a6bb7ca15c4e36b3d6e38" kindref="member">NRF_USBD_SHORT_ENDEPOUT0_EP0STATUS_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>USBD_SHORTS_ENDEPOUT0_EP0STATUS_Msk<sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>ENDEPOUT[0]<sp/>event<sp/>and<sp/>EP0STATUS<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggafdd0cd13c3c89afb8a05dae04306a81fa1d863080219bf895b1e723b8201fb2a9" kindref="member">NRF_USBD_SHORT_ENDEPOUT0_EP0RCVOUT_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>USBD_SHORTS_ENDEPOUT0_EP0RCVOUT_Msk<sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>ENDEPOUT[0]<sp/>event<sp/>and<sp/>EP0RCVOUT<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">}<ref refid="group__nrf__usbd__hal_1gafdd0cd13c3c89afb8a05dae04306a81f" kindref="member">nrf_usbd_short_mask_t</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="119"><highlight class="comment">/**<sp/>@brief<sp/>USBD<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ac37d68fdbd9aef08827ce94b49330ad7" kindref="member">NRF_USBD_INT_USBRESET_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_USBRESET_Msk<sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>USBRESET<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ada4192c314b47c030ca33d8c4e586305" kindref="member">NRF_USBD_INT_STARTED_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_STARTED_Msk<sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>STARTED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99af575309faaea4de9909ee01d1da6debb" kindref="member">NRF_USBD_INT_ENDEPIN0_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPIN0_Msk<sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPIN[0]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ae5422bd3dce7ac7c604a82c56c565fba" kindref="member">NRF_USBD_INT_ENDEPIN1_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPIN1_Msk<sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPIN[1]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ae6dd16ba2e80c5d6e42b28925f214e53" kindref="member">NRF_USBD_INT_ENDEPIN2_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPIN2_Msk<sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPIN[2]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a6fa982339a54bc3a3dd70ee379033a68" kindref="member">NRF_USBD_INT_ENDEPIN3_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPIN3_Msk<sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPIN[3]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a47f1b11f42f5fabd892f23ef98917b43" kindref="member">NRF_USBD_INT_ENDEPIN4_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPIN4_Msk<sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPIN[4]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99accdc728d1dd0ffb3aa683b2d1dcb1126" kindref="member">NRF_USBD_INT_ENDEPIN5_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPIN5_Msk<sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPIN[5]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a90c66c4312063be527effed166ef0189" kindref="member">NRF_USBD_INT_ENDEPIN6_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPIN6_Msk<sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPIN[6]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99afd0bbd63552837726376b0294c1ec614" kindref="member">NRF_USBD_INT_ENDEPIN7_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPIN7_Msk<sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPIN[7]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a748b2373c4e31c7b325bf21ec76cb0f4" kindref="member">NRF_USBD_INT_EP0DATADONE_MASK</ref><sp/>=<sp/>USBD_INTEN_EP0DATADONE_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>EP0DATADONE<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a880f7153500a33e64bdc99d47281d18e" kindref="member">NRF_USBD_INT_ENDISOIN0_MASK</ref><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDISOIN_Msk<sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDISOIN[0]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a5bd2330fe36dd832277019d9486c1120" kindref="member">NRF_USBD_INT_ENDEPOUT0_MASK</ref><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPOUT0_Msk<sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPOUT[0]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ac38bd0cd841901151c1b6454b27a4e06" kindref="member">NRF_USBD_INT_ENDEPOUT1_MASK</ref><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPOUT1_Msk<sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPOUT[1]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a9e00b89329eff80a86818b090a174d09" kindref="member">NRF_USBD_INT_ENDEPOUT2_MASK</ref><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPOUT2_Msk<sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPOUT[2]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a76a9c94091a0e32af6d059bdfbdca865" kindref="member">NRF_USBD_INT_ENDEPOUT3_MASK</ref><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPOUT3_Msk<sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPOUT[3]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99aa2151d91bb090113401dfd2c83d491d3" kindref="member">NRF_USBD_INT_ENDEPOUT4_MASK</ref><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPOUT4_Msk<sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPOUT[4]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a767506405908faf164481e4db334484a" kindref="member">NRF_USBD_INT_ENDEPOUT5_MASK</ref><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPOUT5_Msk<sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPOUT[5]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a3fca2864d752b289e59be96918792298" kindref="member">NRF_USBD_INT_ENDEPOUT6_MASK</ref><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPOUT6_Msk<sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPOUT[6]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ab115f6cb829a6b69c5a89c23ddef6ecf" kindref="member">NRF_USBD_INT_ENDEPOUT7_MASK</ref><sp/><sp/><sp/>=<sp/>USBD_INTEN_ENDEPOUT7_Msk<sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDEPOUT[7]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a241af2b50bf2876d78573d5eae0e2770" kindref="member">NRF_USBD_INT_ENDISOOUT0_MASK</ref><sp/><sp/>=<sp/>USBD_INTEN_ENDISOOUT_Msk<sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>ENDISOOUT[0]<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a234d4ad6a36d8a9e04b4f1d09ac79540" kindref="member">NRF_USBD_INT_SOF_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_SOF_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>SOF<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a455c86aa80aa62952865aef26ca3ec6f" kindref="member">NRF_USBD_INT_USBEVENT_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_USBEVENT_Msk<sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>USBEVENT<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99a596911d01498576994e83241e979d4e5" kindref="member">NRF_USBD_INT_EP0SETUP_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_EP0SETUP_Msk<sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>EP0SETUP<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggabb0886b59ca193e84b9405ea55444e99ade8a86638b6c4777f261671ac4a72dca" kindref="member">NRF_USBD_INT_DATAEP_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>USBD_INTEN_EPDATA_Msk<sp/><sp/><sp/><sp/><sp/>,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>or<sp/>disable<sp/>interrupt<sp/>for<sp/>EPDATA<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal">}<ref refid="group__nrf__usbd__hal_1gabb0886b59ca193e84b9405ea55444e99" kindref="member">nrf_usbd_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="150"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>the<sp/>specified<sp/>USBD<sp/>task.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga5b6305bb613dbbe0fa8fe0c946113053" kindref="member">nrf_usbd_task_trigger</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__usbd__hal_1gacef518da985b1dea4e65fb035cc3ffb7" kindref="member">nrf_usbd_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>USBD<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>@return<sp/>Task<sp/>address.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga5d91d10e21fdcd9e9256eb2ac99db807" kindref="member">nrf_usbd_task_address_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gacef518da985b1dea4e65fb035cc3ffb7" kindref="member">nrf_usbd_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="169"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gad3766f49d2d34f7e5bd7a39e2c4cc030" kindref="member">nrf_usbd_event_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>USBD<sp/>event.</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga819a09be036542e509f2fcceccf18c86" kindref="member">nrf_usbd_event_check</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="188"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>and<sp/>clearing<sp/>the<sp/>state<sp/>of<sp/>the<sp/>specified<sp/>event.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>checks<sp/>the<sp/>state<sp/>of<sp/>the<sp/>event<sp/>and<sp/>clears<sp/>it.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>was<sp/>set.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>was<sp/>not<sp/>set.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga6ba54cb078b7ac770ab19407d2dd5b5e" kindref="member">nrf_usbd_event_get_and_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="201"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>USBD<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1gaa8d89568dfc90f11a13cc4ec011614a1" kindref="member">nrf_usbd_event_address_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="212"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>shortcuts.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcut<sp/>mask.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga848a66d0f7750d3c112c6e273b63eab0" kindref="member">nrf_usbd_shorts_enable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="220"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>shortcuts.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcut<sp/>mask.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga2fc4c421f2458cdaca584f38f19fc373" kindref="member">nrf_usbd_shorts_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="228"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>shortcut<sp/>mask.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>Function<sp/>returns<sp/>shortcut<sp/>register.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>@return<sp/>Flags<sp/>of<sp/>the<sp/>currently<sp/>enabled<sp/>shortcuts.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga4fdfbd1cac43daab01d95d68403799c7" kindref="member">nrf_usbd_shorts_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="239"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>selected<sp/>interrupts.</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_usbd_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gab8394a8e2a2238621dd641533827e904" kindref="member">nrf_usbd_int_enable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="248"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_usbd_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1gacc0de9e2275bb65dd566400f45ac73f2" kindref="member">nrf_usbd_int_enable_check</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="259"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>information<sp/>about<sp/>the<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>flags<sp/>of<sp/>the<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga66829e1a9cd3920b2ff5b17fb3d39569" kindref="member">nrf_usbd_int_enable_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="268"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>selected<sp/>interrupts.</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_usbd_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga71ac25b07069e1509d8005c56902f1fd" kindref="member">nrf_usbd_int_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/><sp/>End<sp/>of<sp/>nrf_usbd_hal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*<sp/><sp/>Internal<sp/>functions</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="287"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@internal</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Internal<sp/>function<sp/>for<sp/>getting<sp/>the<sp/>register<sp/>address<sp/>of<sp/>task<sp/>or<sp/>event.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>offset<sp/>Offset<sp/>of<sp/>the<sp/>register<sp/>from<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>instance.</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/>@attention<sp/>The<sp/>offset<sp/>must<sp/>be<sp/>aligned<sp/>to<sp/>4.<sp/>In<sp/>other<sp/>case,<sp/>hardware<sp/>fault<sp/>can<sp/>occur.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>register.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t*<sp/>nrf_usbd_getRegPtr(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>offset)</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t*)(((uint8_t<sp/>*)p_reg)<sp/>+<sp/>(uint32_t)offset);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="302"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>@internal</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Internal<sp/>function<sp/>for<sp/>getting<sp/>the<sp/>register<sp/>address<sp/>of<sp/>task<sp/>or<sp/>event<sp/>-<sp/>constant<sp/>version.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>offset<sp/>Offset<sp/>of<sp/>the<sp/>register<sp/>from<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>instance.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>@attention<sp/>The<sp/>offset<sp/>must<sp/>be<sp/>aligned<sp/>to<sp/>4.<sp/>In<sp/>other<sp/>case,<sp/>hardware<sp/>fault<sp/>can<sp/>occur.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>register.</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*<sp/>nrf_usbd_getRegPtr_c(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset)</highlight></codeline>
<codeline lineno="314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t*)(((uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)p_reg)<sp/>+<sp/>(uint32_t)offset);</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/><sp/>Interface<sp/>functions<sp/>definitions</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga5b6305bb613dbbe0fa8fe0c946113053" kindref="member">nrf_usbd_task_trigger</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__usbd__hal_1gacef518da985b1dea4e65fb035cc3ffb7" kindref="member">nrf_usbd_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>*(nrf_usbd_getRegPtr(p_reg,<sp/>(uint32_t)task))<sp/>=<sp/>1UL;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)*(nrf_usbd_getRegPtr(p_reg,<sp/>(uint32_t)task));</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga5d91d10e21fdcd9e9256eb2ac99db807" kindref="member">nrf_usbd_task_address_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gacef518da985b1dea4e65fb035cc3ffb7" kindref="member">nrf_usbd_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)nrf_usbd_getRegPtr_c(p_reg,<sp/>(uint32_t)task);</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gad3766f49d2d34f7e5bd7a39e2c4cc030" kindref="member">nrf_usbd_event_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>*(nrf_usbd_getRegPtr(p_reg,<sp/>(uint32_t)event))<sp/>=<sp/>0UL;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)*(nrf_usbd_getRegPtr(p_reg,<sp/>(uint32_t)event));</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga819a09be036542e509f2fcceccf18c86" kindref="member">nrf_usbd_event_check</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)*nrf_usbd_getRegPtr_c(p_reg,<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga6ba54cb078b7ac770ab19407d2dd5b5e" kindref="member">nrf_usbd_event_get_and_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="group__nrf__usbd__hal_1ga819a09be036542e509f2fcceccf18c86" kindref="member">nrf_usbd_event_check</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gad3766f49d2d34f7e5bd7a39e2c4cc030" kindref="member">nrf_usbd_event_clear</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1gaa8d89568dfc90f11a13cc4ec011614a1" kindref="member">nrf_usbd_event_address_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ga0187f1cfcba4bbd00158f9b04ec06fe6" kindref="member">nrf_usbd_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)nrf_usbd_getRegPtr_c(p_reg,<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga848a66d0f7750d3c112c6e273b63eab0" kindref="member">nrf_usbd_shorts_enable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="364"><highlight class="normal">}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga2fc4c421f2458cdaca584f38f19fc373" kindref="member">nrf_usbd_shorts_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(~0U<sp/>==<sp/>mask)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Optimized<sp/>version<sp/>for<sp/>&quot;disable<sp/>all&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>&amp;=<sp/>~mask;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga4fdfbd1cac43daab01d95d68403799c7" kindref="member">nrf_usbd_shorts_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SHORTS;</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gab8394a8e2a2238621dd641533827e904" kindref="member">nrf_usbd_int_enable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1gacc0de9e2275bb65dd566400f45ac73f2" kindref="member">nrf_usbd_int_enable_check</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga66829e1a9cd3920b2ff5b17fb3d39569" kindref="member">nrf_usbd_int_enable_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET;</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga71ac25b07069e1509d8005c56902f1fd" kindref="member">nrf_usbd_int_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRF_DECLARE_ONLY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*<sp/><sp/>End<sp/>of<sp/>automatically<sp/>generated<sp/>part</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="410"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/>@addtogroup<sp/>nrf_usbd_hal</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="415"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Frame<sp/>counter<sp/>size.</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*<sp/>The<sp/>number<sp/>of<sp/>counts<sp/>that<sp/>can<sp/>be<sp/>fitted<sp/>into<sp/>frame<sp/>counter.</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_FRAMECNTR_SIZE<sp/>\</highlight></codeline>
<codeline lineno="421"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(<sp/>(USBD_FRAMECNTR_FRAMECNTR_Msk<sp/>&gt;&gt;<sp/>USBD_FRAMECNTR_FRAMECNTR_Pos)<sp/>+<sp/>1UL<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USBD_FRAMECNTR_FRAMECNTR_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>USBD_FRAMECNTR_FRAMECNTR_Msk<sp/>should<sp/>be<sp/>changed<sp/>into<sp/>USBD_FRAMECNTR_FRAMECNTR_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="426"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/>@brief<sp/>First<sp/>isochronous<sp/>endpoint<sp/>number.</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>The<sp/>number<sp/>of<sp/>the<sp/>first<sp/>isochronous<sp/>endpoint.</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EPISO_FIRST<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="433"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Total<sp/>number<sp/>of<sp/>IN<sp/>endpoints.</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/>Total<sp/>number<sp/>of<sp/>IN<sp/>endpoint<sp/>(including<sp/>ISOCHRONOUS).</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EPIN_CNT<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="440"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Total<sp/>number<sp/>of<sp/>OUT<sp/>endpoints.</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/>Total<sp/>number<sp/>of<sp/>OUT<sp/>endpoint<sp/>(including<sp/>ISOCHRONOUS).</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EPOUT_CNT<sp/>9</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="447"><highlight class="comment">/**<sp/>@brief<sp/>Mask<sp/>of<sp/>the<sp/>direction<sp/>bit<sp/>in<sp/>an<sp/>endpoint<sp/>number.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EP_DIR_Msk<sp/>(1U<sp/>&lt;&lt;<sp/>7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="450"><highlight class="comment">/**<sp/>@brief<sp/>The<sp/>value<sp/>of<sp/>direction<sp/>bit<sp/>for<sp/>the<sp/>IN<sp/>endpoint<sp/>direction.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EP_DIR_IN<sp/><sp/>(1U<sp/>&lt;&lt;<sp/>7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="453"><highlight class="comment">/**<sp/>@brief<sp/>The<sp/>value<sp/>of<sp/>direction<sp/>bit<sp/>for<sp/>the<sp/>OUT<sp/>endpoint<sp/>direction.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EP_DIR_OUT<sp/>(0U<sp/>&lt;&lt;<sp/>7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="456"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>making<sp/>the<sp/>IN<sp/>endpoint<sp/>identifier<sp/>from<sp/>endpoint<sp/>number.</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/>Macro<sp/>that<sp/>sets<sp/>direction<sp/>bit<sp/>to<sp/>make<sp/>IN<sp/>endpoint.</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>epnr<sp/>Endpoint<sp/>number.</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*<sp/>@return<sp/>IN<sp/>Endpoint<sp/>identifier.</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EPIN(epnr)<sp/><sp/>(((uint8_t)(epnr))<sp/>|<sp/>NRF_USBD_EP_DIR_IN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="467"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>making<sp/>the<sp/>OUT<sp/>endpoint<sp/>identifier<sp/>from<sp/>endpoint<sp/>number.</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/>Macro<sp/>that<sp/>sets<sp/>direction<sp/>bit<sp/>to<sp/>make<sp/>OUT<sp/>endpoint.</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>epnr<sp/>Endpoint<sp/>number.</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/>@return<sp/>OUT<sp/>Endpoint<sp/>identifier.</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EPOUT(epnr)<sp/>(((uint8_t)(epnr))<sp/>|<sp/>NRF_USBD_EP_DIR_OUT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="478"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>extracting<sp/>the<sp/>endpoint<sp/>number<sp/>from<sp/>the<sp/>specified<sp/>endpoint<sp/>identifier.</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*<sp/>Macro<sp/>that<sp/>strips<sp/>out<sp/>the<sp/>information<sp/>about<sp/>endpoint<sp/>direction.</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/>Endpoint<sp/>identifier.</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/>@return<sp/>Endpoint<sp/>number.</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EP_NR_GET(ep)<sp/>((uint8_t)(((uint8_t)(ep))<sp/>&amp;<sp/>0xFU))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="489"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>the<sp/>endpoint<sp/>direction.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>This<sp/>macro<sp/>checks<sp/>if<sp/>the<sp/>specified<sp/>endpoint<sp/>has<sp/>the<sp/>IN<sp/>direction.</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/>Endpoint<sp/>identifier.</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>endpoint<sp/>direction<sp/>is<sp/>IN.</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>endpoint<sp/>direction<sp/>is<sp/>OUT.</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EPIN_CHECK(ep)<sp/><sp/>(<sp/>(((uint8_t)(ep))<sp/>&amp;<sp/>NRF_USBD_EP_DIR_Msk)<sp/>==<sp/>NRF_USBD_EP_DIR_IN<sp/><sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="501"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>endpoint<sp/>direction.</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*<sp/>This<sp/>macro<sp/>checks<sp/>if<sp/>given<sp/>endpoint<sp/>has<sp/>OUT<sp/>direction.</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/>Endpoint<sp/>identifier</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>endpoint<sp/>direction<sp/>is<sp/>OUT</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>endpoint<sp/>direction<sp/>is<sp/>IN</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EPOUT_CHECK(ep)<sp/>(<sp/>(((uint8_t)(ep))<sp/>&amp;<sp/>NRF_USBD_EP_DIR_Msk)<sp/>==<sp/>NRF_USBD_EP_DIR_OUT<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="513"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>if<sp/>endpoint<sp/>is<sp/>isochronous.</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/>It<sp/>can<sp/>be<sp/>endpoint<sp/>identifier<sp/>or<sp/>just<sp/>endpoint<sp/>number<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>endpoint<sp/>is<sp/>isochronous<sp/>type.</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>endpoint<sp/>is<sp/>bulk<sp/>of<sp/>interrupt<sp/>type.</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EPISO_CHECK(ep)<sp/>(NRF_USBD_EP_NR_GET(ep)<sp/>&gt;=<sp/>NRF_USBD_EPISO_FIRST)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="523"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>if<sp/>given<sp/>number<sp/>is<sp/>valid<sp/>endpoint<sp/>number.</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/>Endpoint<sp/>number<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>endpoint<sp/>is<sp/>valid.</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>endpoint<sp/>is<sp/>not<sp/>valid.</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EP_VALIDATE(ep)<sp/>(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="532"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRF_USBD_EPIN_CHECK(ep)<sp/>&amp;&amp;<sp/>(NRF_USBD_EP_NR_GET(ep)<sp/>&lt;<sp/>NRF_USBD_EPIN_CNT))<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="533"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="534"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(NRF_USBD_EPOUT_CHECK(ep)<sp/>&amp;&amp;<sp/>(NRF_USBD_EP_NR_GET(ep)<sp/>&lt;<sp/>NRF_USBD_EPOUT_CNT))<sp/>\</highlight></codeline>
<codeline lineno="535"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="537"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Not<sp/>isochronous<sp/>data<sp/>frame<sp/>received.</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*<sp/>Special<sp/>value<sp/>returned<sp/>by<sp/>@ref<sp/>nrf_usbd_episoout_size_get<sp/>function<sp/>that<sp/>means<sp/>that</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*<sp/>data<sp/>frame<sp/>was<sp/>not<sp/>received<sp/>at<sp/>all.</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*<sp/>This<sp/>allows<sp/>differentiate<sp/>between<sp/>situations<sp/>when<sp/>zero<sp/>size<sp/>data<sp/>comes<sp/>or<sp/>no<sp/>data<sp/>comes<sp/>at<sp/>all</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/>on<sp/>isochronous<sp/>endpoint.</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_USBD_EPISOOUT_NO_DATA<sp/>((size_t)(-1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="547"><highlight class="comment">/**<sp/>@brief<sp/>EVENTCAUSE<sp/>register<sp/>bit<sp/>masks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197ea526a378a0bce39373b3521252a404dab" kindref="member">NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>USBD_EVENTCAUSE_ISOOUTCRC_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CRC<sp/>error<sp/>was<sp/>detected<sp/>on<sp/>isochronous<sp/>OUT<sp/>endpoint<sp/>8.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197ea68761f3edd6f26802ec415c63315204d" kindref="member">NRF_USBD_EVENTCAUSE_SUSPEND_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>USBD_EVENTCAUSE_SUSPEND_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Signals<sp/>that<sp/>the<sp/>USB<sp/>lines<sp/>have<sp/>been<sp/>seen<sp/>idle<sp/>long<sp/>enough<sp/>for<sp/>the<sp/>device<sp/>to<sp/>enter<sp/>suspend.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197ea9774c93c16b0f8d3557e1794df33d608" kindref="member">NRF_USBD_EVENTCAUSE_RESUME_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>USBD_EVENTCAUSE_RESUME_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Signals<sp/>that<sp/>a<sp/>RESUME<sp/>condition<sp/>(K<sp/>state<sp/>or<sp/>activity<sp/>restart)<sp/>has<sp/>been<sp/>detected<sp/>on<sp/>the<sp/>USB<sp/>lines.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197eaa71e0597c1c9ca8d665399d56a23b571" kindref="member">NRF_USBD_EVENTCAUSE_WUREQ_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>USBD_EVENTCAUSE_USBWUALLOWED_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>USBD<sp/>peripheral<sp/>has<sp/>exited<sp/>Low<sp/>Power<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga8588a7f666e82f6c441046d924ff197ea124d310529b710dba2b27bbfeaa23468" kindref="member">NRF_USBD_EVENTCAUSE_READY_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>USBD_EVENTCAUSE_READY_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>MAC<sp/>is<sp/>ready<sp/>for<sp/>normal<sp/>operation,<sp/>rised<sp/>few<sp/>us<sp/>after<sp/>USBD<sp/>enabling.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal">}<ref refid="group__nrf__usbd__hal_1ga8588a7f666e82f6c441046d924ff197e" kindref="member">nrf_usbd_eventcause_mask_t</ref>;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="557"><highlight class="comment">/**<sp/>@brief<sp/>DPDMVALUE<sp/>register.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>Generate<sp/>RESUME<sp/>signal.<sp/>Signal<sp/>is<sp/>generated<sp/>for<sp/>50&amp;nbsp;us<sp/>or<sp/>5&amp;nbsp;ms,</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>depending<sp/>on<sp/>bus<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga86af0982c97904e6f14200709346f93eaa3bb7c1a49d424f6bdfe82463cb86abb" kindref="member">NRF_USBD_DPDMVALUE_RESUME</ref><sp/>=<sp/>USBD_DPDMVALUE_STATE_Resume,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>D+<sp/>Forced<sp/>high,<sp/>D-<sp/>forced<sp/>low<sp/>(J<sp/>state)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga86af0982c97904e6f14200709346f93ea5a47d0fdb93688f7dee41660599df12b" kindref="member">NRF_USBD_DPDMVALUE_J</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>USBD_DPDMVALUE_STATE_J,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/><sp/><sp/><sp/>/**<sp/>D+<sp/>Forced<sp/>low,<sp/>D-<sp/>forced<sp/>high<sp/>(K<sp/>state)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga86af0982c97904e6f14200709346f93ea5e1e542f5c263ee2d74b5e53887bf7d6" kindref="member">NRF_USBD_DPMVALUE_K</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>USBD_DPDMVALUE_STATE_K</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}<ref refid="group__nrf__usbd__hal_1ga86af0982c97904e6f14200709346f93e" kindref="member">nrf_usbd_dpdmvalue_t</ref>;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="569"><highlight class="comment">/**<sp/>@brief<sp/>Data<sp/>toggle<sp/>value<sp/>or<sp/>operation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggac7a52ea2795a7ec86d88d2479115e8abad544fd91f626686855661c029f6783ed" kindref="member">NRF_USBD_DTOGGLE_NOP</ref><sp/><sp/><sp/>=<sp/>USBD_DTOGGLE_VALUE_Nop,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>No<sp/>operation<sp/>-<sp/>do<sp/>not<sp/>change<sp/>the<sp/>current<sp/>data<sp/>toggle<sp/>on<sp/>the<sp/>selected<sp/>endpoint.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggac7a52ea2795a7ec86d88d2479115e8aba840a6b8fd3f75337a0cf934631722bbe" kindref="member">NRF_USBD_DTOGGLE_DATA0</ref><sp/>=<sp/>USBD_DTOGGLE_VALUE_Data0,</highlight><highlight class="comment">/**&lt;<sp/>Data<sp/>toggle<sp/>is<sp/>DATA0<sp/>on<sp/>the<sp/>selected<sp/>endpoint.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ggac7a52ea2795a7ec86d88d2479115e8aba1457b3fd3ca4bbcdcda2f124bd3bc4d7" kindref="member">NRF_USBD_DTOGGLE_DATA1</ref><sp/>=<sp/>USBD_DTOGGLE_VALUE_Data1<sp/></highlight><highlight class="comment">/**&lt;<sp/>Data<sp/>toggle<sp/>is<sp/>DATA1<sp/>on<sp/>the<sp/>selected<sp/>endpoint.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal">}<ref refid="group__nrf__usbd__hal_1gac7a52ea2795a7ec86d88d2479115e8ab" kindref="member">nrf_usbd_dtoggle_t</ref>;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="577"><highlight class="comment">/**<sp/>@brief<sp/>EPSTATUS<sp/>bit<sp/>masks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPIN0_MASK<sp/><sp/>=<sp/>USBD_EPSTATUS_EPIN0_Msk,</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPIN1_MASK<sp/><sp/>=<sp/>USBD_EPSTATUS_EPIN1_Msk,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPIN2_MASK<sp/><sp/>=<sp/>USBD_EPSTATUS_EPIN2_Msk,</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPIN3_MASK<sp/><sp/>=<sp/>USBD_EPSTATUS_EPIN3_Msk,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPIN4_MASK<sp/><sp/>=<sp/>USBD_EPSTATUS_EPIN4_Msk,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPIN5_MASK<sp/><sp/>=<sp/>USBD_EPSTATUS_EPIN5_Msk,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPIN6_MASK<sp/><sp/>=<sp/>USBD_EPSTATUS_EPIN6_Msk,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPIN7_MASK<sp/><sp/>=<sp/>USBD_EPSTATUS_EPIN7_Msk,</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPOUT0_MASK<sp/>=<sp/>USBD_EPSTATUS_EPOUT0_Msk,</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPOUT1_MASK<sp/>=<sp/>USBD_EPSTATUS_EPOUT1_Msk,</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPOUT2_MASK<sp/>=<sp/>USBD_EPSTATUS_EPOUT2_Msk,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPOUT3_MASK<sp/>=<sp/>USBD_EPSTATUS_EPOUT3_Msk,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPOUT4_MASK<sp/>=<sp/>USBD_EPSTATUS_EPOUT4_Msk,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPOUT5_MASK<sp/>=<sp/>USBD_EPSTATUS_EPOUT5_Msk,</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPOUT6_MASK<sp/>=<sp/>USBD_EPSTATUS_EPOUT6_Msk,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPSTATUS_EPOUT7_MASK<sp/>=<sp/>USBD_EPSTATUS_EPOUT7_Msk,</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}<ref refid="group__nrf__usbd__hal_1gadbdc3f9d30d220c792ee698ea3ab290e" kindref="member">nrf_usbd_epstatus_mask_t</ref>;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="599"><highlight class="comment">/**<sp/>@brief<sp/>DATAEPSTATUS<sp/>bit<sp/>masks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPIN1_MASK<sp/><sp/>=<sp/>USBD_EPDATASTATUS_EPIN1_Msk,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPIN2_MASK<sp/><sp/>=<sp/>USBD_EPDATASTATUS_EPIN2_Msk,</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPIN3_MASK<sp/><sp/>=<sp/>USBD_EPDATASTATUS_EPIN3_Msk,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPIN4_MASK<sp/><sp/>=<sp/>USBD_EPDATASTATUS_EPIN4_Msk,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPIN5_MASK<sp/><sp/>=<sp/>USBD_EPDATASTATUS_EPIN5_Msk,</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPIN6_MASK<sp/><sp/>=<sp/>USBD_EPDATASTATUS_EPIN6_Msk,</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPIN7_MASK<sp/><sp/>=<sp/>USBD_EPDATASTATUS_EPIN7_Msk,</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPOUT1_MASK<sp/>=<sp/>USBD_EPDATASTATUS_EPOUT1_Msk,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPOUT2_MASK<sp/>=<sp/>USBD_EPDATASTATUS_EPOUT2_Msk,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPOUT3_MASK<sp/>=<sp/>USBD_EPDATASTATUS_EPOUT3_Msk,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPOUT4_MASK<sp/>=<sp/>USBD_EPDATASTATUS_EPOUT4_Msk,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPOUT5_MASK<sp/>=<sp/>USBD_EPDATASTATUS_EPOUT5_Msk,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPOUT6_MASK<sp/>=<sp/>USBD_EPDATASTATUS_EPOUT6_Msk,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_USBD_EPDATASTATUS_EPOUT7_MASK<sp/>=<sp/>USBD_EPDATASTATUS_EPOUT7_Msk,</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}<ref refid="group__nrf__usbd__hal_1gaf16119bd371d2d9bae89ffe785b8a08b" kindref="member">nrf_usbd_dataepstatus_mask_t</ref>;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="619"><highlight class="comment">/**<sp/>@brief<sp/>ISOSPLIT<sp/>configurations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga2b397851455aff39727f26fa7f52a26ca75c5f68dab4ec2a06a61f5bedbde1b68" kindref="member">NRF_USBD_ISOSPLIT_ONEDIR</ref><sp/>=<sp/>USBD_ISOSPLIT_SPLIT_OneDir,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Full<sp/>buffer<sp/>dedicated<sp/>to<sp/>either<sp/>ISO<sp/>IN<sp/>or<sp/>OUT.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga2b397851455aff39727f26fa7f52a26cafa3a5cc6980ae430de05d2fa27941b58" kindref="member">NRF_USBD_ISOSPLIT_HALF</ref><sp/><sp/><sp/>=<sp/>USBD_ISOSPLIT_SPLIT_HalfIN,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Buffer<sp/>divided<sp/>in<sp/>half.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal">}<ref refid="group__nrf__usbd__hal_1ga2b397851455aff39727f26fa7f52a26c" kindref="member">nrf_usbd_isosplit_t</ref>;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="626"><highlight class="comment">/**<sp/>@brief<sp/>ISOINCONFIG<sp/>configurations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal">{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga2328f0becb99ca74db0490cd48af4861af5220a5dd7d3def691031ebfc83e27be" kindref="member">NRF_USBD_ISOINCONFIG_NORESP</ref><sp/><sp/><sp/>=<sp/>USBD_ISOINCONFIG_RESPONSE_NoResp,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Endpoint<sp/>does<sp/>not<sp/>respond<sp/>to<sp/>an<sp/>ISO<sp/>IN<sp/>token<sp/>when<sp/>no<sp/>data<sp/>is<sp/>ready.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gga2328f0becb99ca74db0490cd48af4861ac85cee2b3da471763645cfbf36bbbff5" kindref="member">NRF_USBD_ISOINCONFIG_ZERODATA</ref><sp/>=<sp/>USBD_ISOINCONFIG_RESPONSE_ZeroData,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Endpoint<sp/>responds<sp/>with<sp/>a<sp/>zero-length<sp/>data<sp/>packet<sp/>to<sp/>an<sp/>ISO<sp/>IN<sp/>token<sp/>when<sp/>no<sp/>data<sp/>is<sp/>ready.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal">}<ref refid="group__nrf__usbd__hal_1ga2328f0becb99ca74db0490cd48af4861" kindref="member">nrf_usbd_isoinconfig_t</ref>;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="633"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="634"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>USBD.</highlight></codeline>
<codeline lineno="635"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="636"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga562e57247a2d9890b9468d0bd73e10ed" kindref="member">nrf_usbd_enable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="640"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>USBD.</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga560e5d2709b79666577a22053b29d257" kindref="member">nrf_usbd_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="647"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>EVENTCAUSE<sp/>register.</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>*<sp/>@return<sp/>Flag<sp/>values<sp/>defined<sp/>in<sp/>@ref<sp/>nrf_usbd_eventcause_mask_t.</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga6d9e732f036188c7bcffd40e1af8ddfb" kindref="member">nrf_usbd_eventcause_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="656"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="657"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>EVENTCAUSE<sp/>flags.</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>flags<sp/>Flags<sp/>defined<sp/>in<sp/>@ref<sp/>nrf_usbd_eventcause_mask_t.</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga09314d6cf8bf067c28c4be5f6f900ee9" kindref="member">nrf_usbd_eventcause_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>flags);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="664"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>EVENTCAUSE<sp/>register<sp/>and<sp/>clearing<sp/>flags<sp/>that<sp/>are<sp/>set.</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/>*<sp/>The<sp/>safest<sp/>way<sp/>to<sp/>return<sp/>current<sp/>EVENTCAUSE<sp/>register.</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/>*<sp/>All<sp/>the<sp/>flags<sp/>that<sp/>are<sp/>returned<sp/>would<sp/>be<sp/>cleared<sp/>inside<sp/>EVENTCAUSE<sp/>register.</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*<sp/>@return<sp/>Flag<sp/>values<sp/>defined<sp/>in<sp/>@ref<sp/>nrf_usbd_eventcause_mask_t</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1gafdbf646da698addceb7fccbf6f19562d" kindref="member">nrf_usbd_eventcause_get_and_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="676"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>HALTEDEPIN<sp/>register<sp/>value.</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*<sp/>@note<sp/>Use<sp/>this<sp/>function<sp/>for<sp/>the<sp/>response<sp/>for<sp/>GetStatus()<sp/>request<sp/>to<sp/>endpoint.</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>To<sp/>check<sp/>whether<sp/>the<sp/>endpoint<sp/>is<sp/>stalled<sp/>in<sp/>the<sp/>code,<sp/>use<sp/>@ref<sp/>nrf_usbd_ep_is_stall.</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/>Endpoint<sp/>number<sp/>with<sp/>IN<sp/>or<sp/>OUT<sp/>flag.</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>value<sp/>of<sp/>the<sp/>HALTEDEPIN<sp/>or<sp/>HALTEDOUT<sp/>register<sp/>for<sp/>the<sp/>selected<sp/>endpoint.</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga4b4a86b907d9d16354916efa13c913f4" kindref="member">nrf_usbd_halted_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="689"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>selected<sp/>endpoint<sp/>is<sp/>stalled.</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="692"><highlight class="comment"><sp/>*<sp/>Function<sp/>to<sp/>be<sp/>used<sp/>as<sp/>a<sp/>syntax<sp/>sweeter<sp/>for<sp/>@ref<sp/>nrf_usbd_halted_get.</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*<sp/>Also<sp/>as<sp/>the<sp/>isochronous<sp/>endpoint<sp/>cannot<sp/>be<sp/>halted<sp/>-<sp/>it<sp/>returns<sp/>always<sp/>false</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*<sp/>if<sp/>isochronous<sp/>endpoint<sp/>is<sp/>checked.</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/>Endpoint<sp/>number<sp/>with<sp/>IN<sp/>or<sp/>OUT<sp/>flag.</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>endpoint<sp/>is<sp/>halted.</highlight></codeline>
<codeline lineno="701"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>endpoint<sp/>is<sp/>not<sp/>halted.</highlight></codeline>
<codeline lineno="702"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gae6a606967bf03d76c70bf22552a94617" kindref="member">nrf_usbd_ep_is_stall</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="705"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>EPSTATUS<sp/>register<sp/>value.</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="710"><highlight class="comment"><sp/>*<sp/>@return<sp/>Flag<sp/>values<sp/>defined<sp/>in<sp/>@ref<sp/>nrf_usbd_epstatus_mask_t.</highlight></codeline>
<codeline lineno="711"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga6bf521fe906e06186dc3b1633cd334d0" kindref="member">nrf_usbd_epstatus_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="714"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>EPSTATUS<sp/>register<sp/>value.</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>flags<sp/>Flags<sp/>defined<sp/>in<sp/>@ref<sp/>nrf_usbd_epstatus_mask_t.</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga8aad5300a3ad73ce92b98a123282c714" kindref="member">nrf_usbd_epstatus_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>flags);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="722"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>and<sp/>clearing<sp/>EPSTATUS<sp/>register<sp/>value.</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/>*<sp/>Function<sp/>clears<sp/>all<sp/>flags<sp/>in<sp/>register<sp/>set<sp/>before<sp/>returning<sp/>its<sp/>value.</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*<sp/>@return<sp/>Flag<sp/>values<sp/>defined<sp/>in<sp/>@ref<sp/>nrf_usbd_epstatus_mask_t.</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1gac1a2a0466ceee8179df9d7d3a7e865ad" kindref="member">nrf_usbd_epstatus_get_and_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="733"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>DATAEPSTATUS<sp/>register<sp/>value.</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/>@return<sp/>Flag<sp/>values<sp/>defined<sp/>in<sp/>@ref<sp/>nrf_usbd_dataepstatus_mask_t.</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga23746eeddcdc074aa2639fe406212a3e" kindref="member">nrf_usbd_epdatastatus_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="742"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>DATAEPSTATUS<sp/>register<sp/>value.</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="746"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>flags<sp/>Flags<sp/>defined<sp/>in<sp/>@ref<sp/>nrf_usbd_dataepstatus_mask_t.</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga165b2891148dc620c4105f1b430832ca" kindref="member">nrf_usbd_epdatastatus_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>flags);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="750"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>and<sp/>clearing<sp/>DATAEPSTATUS<sp/>register<sp/>value.</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*<sp/>Function<sp/>clears<sp/>all<sp/>flags<sp/>in<sp/>register<sp/>set<sp/>before<sp/>returning<sp/>its<sp/>value.</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="755"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/>*<sp/>@return<sp/>Flag<sp/>values<sp/>defined<sp/>in<sp/>@ref<sp/>nrf_usbd_dataepstatus_mask_t.</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1gadfa04941d3bcefa5119bc69ec39cb259" kindref="member">nrf_usbd_epdatastatus_get_and_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="761"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*<sp/>@name<sp/>Setup<sp/>command<sp/>frame<sp/>functions.</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/>*<sp/>Functions<sp/>for<sp/>setting<sp/>up<sp/>command<sp/>frame<sp/>part<sp/>access.</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/>*/</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="767"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>BMREQUESTTYPE<sp/>-<sp/>part<sp/>of<sp/>the<sp/>SETUP<sp/>packet.</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return<sp/>Value<sp/>of<sp/>BREQUESTTYPE<sp/>on<sp/>the<sp/>last<sp/>received<sp/>SETUP<sp/>frame.</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__usbd__hal_1gad9fa77301e304f15905f04db5ace16de" kindref="member">nrf_usbd_setup_bmrequesttype_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="777"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>BMREQUEST<sp/>-<sp/>part<sp/>of<sp/>the<sp/>SETUP<sp/>packet.</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return<sp/>Value<sp/>of<sp/>BREQUEST<sp/>on<sp/>the<sp/>last<sp/>received<sp/>SETUP<sp/>frame.</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__usbd__hal_1ga5fd0236b99b50a8003d22e84b8571f45" kindref="member">nrf_usbd_setup_brequest_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>WVALUE<sp/>-<sp/>part<sp/>of<sp/>the<sp/>SETUP<sp/>packet.</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return<sp/>Value<sp/>of<sp/>WVALUE<sp/>on<sp/>the<sp/>last<sp/>received<sp/>SETUP<sp/>frame.</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__usbd__hal_1gaa425fab84d090108aa23fdab54c4fae3" kindref="member">nrf_usbd_setup_wvalue_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>WINDEX<sp/>-<sp/>part<sp/>of<sp/>the<sp/>SETUP<sp/>packet.</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="797"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return<sp/>Value<sp/>of<sp/>WINDEX<sp/>on<sp/>the<sp/>last<sp/>received<sp/>SETUP<sp/>frame.</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__usbd__hal_1gafb4fa211dba6564eb365c50bbebd8c5a" kindref="member">nrf_usbd_setup_windex_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>WLENGTH<sp/>-<sp/>part<sp/>of<sp/>the<sp/>SETUP<sp/>packet.</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return<sp/>Value<sp/>of<sp/>WLENGTH<sp/>on<sp/>the<sp/>last<sp/>received<sp/>SETUP<sp/>frame.</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__usbd__hal_1ga0ad7b416191ca996a435e79b2f6c60cd" kindref="member">nrf_usbd_setup_wlength_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="811"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="813"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>received<sp/>bytes<sp/>on<sp/>the<sp/>selected<sp/>endpoint.</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>can<sp/>be<sp/>used<sp/>on<sp/>bulk,<sp/>interrupt,<sp/>and<sp/>isochronous<sp/>endpoints.</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/>@note<sp/>For<sp/>the<sp/>function<sp/>that<sp/>returns<sp/>different<sp/>value<sp/>for<sp/>the<sp/>ISOOUT<sp/>zero</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>transfer<sp/>or<sp/>no<sp/>transfer<sp/>at<sp/>all,<sp/>see<sp/>the<sp/>@ref<sp/>nrf_usbd_episoout_size_get</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>function.<sp/>This<sp/>function<sp/>will<sp/>return<sp/>0<sp/>for<sp/>both<sp/>cases.</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/>Endpoint<sp/>identifier.</highlight></codeline>
<codeline lineno="823"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>received<sp/>bytes.</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga484d691a3f3ac383b700cafe2b2d2ad2" kindref="member">nrf_usbd_epout_size_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="828"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>number<sp/>of<sp/>the<sp/>received<sp/>bytes<sp/>on<sp/>isochronous<sp/>endpoint.</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/>Endpoint<sp/>identifier,<sp/>must<sp/>be<sp/>an<sp/>isochronous<sp/>OUT<sp/>endpoint.</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>bytes<sp/>received<sp/>or<sp/>@ref<sp/>NRF_USBD_EPISOOUT_NO_DATA.</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga781e617b1d8866be26f485f3b7f8320f" kindref="member">nrf_usbd_episoout_size_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="838"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>OUT<sp/>endpoint<sp/>to<sp/>accept<sp/>any<sp/>new<sp/>incoming<sp/>traffic.</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/>Endpoint<sp/>identifier.<sp/>Only<sp/>OUT<sp/>interrupt/bulk<sp/>endpoints<sp/>are<sp/>accepted.</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gaf64d7d3c97e6dd3f6cfd0ba8b5297ca2" kindref="member">nrf_usbd_epout_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="846"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>USB<sp/>pullup.</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gacde4d643e37439183c87b23d9a3a077a" kindref="member">nrf_usbd_pullup_enable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="853"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>USB<sp/>pullup.</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gabf52b8f824fcdcb9ff10aaaecdfcabe5" kindref="member">nrf_usbd_pullup_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="860"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>current<sp/>the<sp/>USB<sp/>pullup<sp/>state.</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>USB<sp/>pullup<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>USB<sp/>pullup<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga0c4627bb70c2fdaf5f5e65edca4e2739" kindref="member">nrf_usbd_pullup_check</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="870"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="871"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>value<sp/>to<sp/>be<sp/>forced<sp/>on<sp/>the<sp/>bus<sp/>on<sp/>the<sp/>DRIVEDPDM<sp/>task.</highlight></codeline>
<codeline lineno="872"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/>*<sp/>The<sp/>selected<sp/>state<sp/>will<sp/>be<sp/>forced<sp/>on<sp/>the<sp/>bus<sp/>when<sp/>@ref<sp/>NRF_USBD_TASK_DRIVEDPDM<sp/>is<sp/>set.</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/>*<sp/>The<sp/>state<sp/>will<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>bus<sp/>on<sp/>@ref<sp/>NRF_USBD_TASK_NODRIVEDPDM<sp/>and</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/>*<sp/>the<sp/>control<sp/>will<sp/>be<sp/>returned<sp/>to<sp/>the<sp/>USBD<sp/>peripheral.</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>val<sp/><sp/><sp/>State<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga3f0f369fe4c04df616590d69487339c5" kindref="member">nrf_usbd_dpdmvalue_set</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__usbd__hal_1ga86af0982c97904e6f14200709346f93e" kindref="member">nrf_usbd_dpdmvalue_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="882"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="883"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>data<sp/>toggle.</highlight></codeline>
<codeline lineno="884"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="885"><highlight class="comment"><sp/>*<sp/>Configuration<sp/>of<sp/>the<sp/>current<sp/>state<sp/>of<sp/>data<sp/>toggling.</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/>Endpoint<sp/>number<sp/>with<sp/>the<sp/>information<sp/>about<sp/>its<sp/>direction.</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>op<sp/><sp/><sp/><sp/>Operation<sp/>to<sp/>execute.</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga60b7f36031cd0ae233d609ab390eae84" kindref="member">nrf_usbd_dtoggle_set</ref>(NRF_USBD_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ep,</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gac7a52ea2795a7ec86d88d2479115e8ab" kindref="member">nrf_usbd_dtoggle_t</ref><sp/>op);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="895"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="896"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>data<sp/>toggle.</highlight></codeline>
<codeline lineno="897"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/>*<sp/>Get<sp/>the<sp/>current<sp/>state<sp/>of<sp/>data<sp/>toggling.</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/>Endpoint<sp/>number<sp/>to<sp/>return<sp/>the<sp/>information<sp/>about<sp/>current<sp/>data<sp/>toggling.</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_USBD_DTOGGLE_DATA0<sp/>Data<sp/>toggle<sp/>is<sp/>DATA0<sp/>on<sp/>selected<sp/>endpoint.</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_USBD_DTOGGLE_DATA1<sp/>Data<sp/>toggle<sp/>is<sp/>DATA1<sp/>on<sp/>selected<sp/>endpoint.</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__usbd__hal_1gac7a52ea2795a7ec86d88d2479115e8ab" kindref="member">nrf_usbd_dtoggle_t</ref><sp/><ref refid="group__nrf__usbd__hal_1ga1c270f17c425d5d9c844aed147e973a9" kindref="member">nrf_usbd_dtoggle_get</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="908"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="909"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>endpoint<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/>Endpoint<sp/>ID<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Endpoint<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Endpoint<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gaf17b7e12a6373351f12a81b361c12fff" kindref="member">nrf_usbd_ep_enable_check</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="919"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="920"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>selected<sp/>endpoint.</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/>*<sp/>The<sp/>enabled<sp/>endpoint<sp/>responds<sp/>for<sp/>the<sp/>tokens<sp/>on<sp/>the<sp/>USB<sp/>bus.</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/>Endpoint<sp/>ID<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga28d51ddddc9b82ce7a0f20d9d0c3eced" kindref="member">nrf_usbd_ep_enable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="929"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>selected<sp/>endpoint.</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/>*<sp/>The<sp/>disabled<sp/>endpoint<sp/>does<sp/>not<sp/>respond<sp/>for<sp/>the<sp/>tokens<sp/>on<sp/>the<sp/>USB<sp/>bus.</highlight></codeline>
<codeline lineno="933"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="934"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="935"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/>Endpoint<sp/>ID<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga2ec0b9257ca5204d17bbc0ddbc21eb45" kindref="member">nrf_usbd_ep_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="939"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>all<sp/>endpoints.</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gad5097e513286061bb0dd1a104606830e" kindref="member">nrf_usbd_ep_all_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="946"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>default<sp/>endpoint<sp/>configuration.</highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>default<sp/>configuration<sp/>means<sp/>that<sp/>all<sp/>endpoints,<sp/>except<sp/>for<sp/>EP0<sp/>IN</highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>EP0<sp/>OUT,<sp/>are<sp/>disabled.<sp/>Such<sp/>configuration<sp/>is<sp/>used<sp/>after<sp/>the<sp/>USB</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>device<sp/>reset.</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gae22f114852bc426680af00d510127da4" kindref="member">nrf_usbd_ep_default_config</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="957"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>stalling<sp/>the<sp/>selected<sp/>endpoint.</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>cannot<sp/>be<sp/>called<sp/>on<sp/>isochronous<sp/>endpoint.</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/>Endpoint<sp/>identifier.</highlight></codeline>
<codeline lineno="964"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gab783f26d050b386fffbcefc2cdf459cf" kindref="member">nrf_usbd_ep_stall</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="967"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>unstalling<sp/>the<sp/>selected<sp/>endpoint.</highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>cannot<sp/>be<sp/>called<sp/>on<sp/>isochronous<sp/>endpoint.</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/>Endpoint<sp/>identifier</highlight></codeline>
<codeline lineno="974"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gad80e8d94a4ab714d952b28b07e310a14" kindref="member">nrf_usbd_ep_unstall</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="977"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>isochronous<sp/>buffer<sp/>splitting.</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>configures<sp/>isochronous<sp/>buffer<sp/>splitting<sp/>between<sp/>IN<sp/>and<sp/>OUT<sp/>endpoints.</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="983"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>split<sp/>Required<sp/>configuration.</highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga012c9fa1b3ef65862f6a37184f5cce33" kindref="member">nrf_usbd_isosplit_set</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__usbd__hal_1ga2b397851455aff39727f26fa7f52a26c" kindref="member">nrf_usbd_isosplit_t</ref><sp/>split);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="987"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>isochronous<sp/>buffer<sp/>splitting<sp/>configuration.</highlight></codeline>
<codeline lineno="989"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="990"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>gets<sp/>the<sp/>current<sp/>isochronous<sp/>buffer<sp/>splitting<sp/>configuration.</highlight></codeline>
<codeline lineno="991"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="992"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/>*<sp/>@return<sp/>Current<sp/>configuration.</highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__usbd__hal_1ga2b397851455aff39727f26fa7f52a26c" kindref="member">nrf_usbd_isosplit_t</ref><sp/><ref refid="group__nrf__usbd__hal_1ga3fae989351d356e8e77227861f6ecdd5" kindref="member">nrf_usbd_isosplit_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="998"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>current<sp/>frame<sp/>counter.</highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/>*<sp/>@return<sp/>Current<sp/>frame<sp/>counter.</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1gae0ff06baed465b177e31375ce001d0d1" kindref="member">nrf_usbd_framecntr_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1007"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>entering<sp/>into<sp/>the<sp/>USB<sp/>low<sp/>power<sp/>mode.</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/>*<sp/>After<sp/>this<sp/>function<sp/>is<sp/>called,<sp/>the<sp/>clock<sp/>source<sp/>from<sp/>the<sp/>USBD<sp/>is<sp/>disconnected<sp/>internally.</highlight></codeline>
<codeline lineno="1011"><highlight class="comment"><sp/>*<sp/>After<sp/>this<sp/>function<sp/>is<sp/>called,<sp/>most<sp/>of<sp/>the<sp/>USBD<sp/>registers<sp/>cannot<sp/>be<sp/>accessed<sp/>anymore.</highlight></codeline>
<codeline lineno="1012"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1013"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1014"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_usbd_lowpower_disable</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_usbd_lowpower_check</highlight></codeline>
<codeline lineno="1017"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga944a5e908b4e3a16461bf04db92bafac" kindref="member">nrf_usbd_lowpower_enable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1020"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1021"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>exiting<sp/>from<sp/>the<sp/>USB<sp/>low<sp/>power<sp/>mode.</highlight></codeline>
<codeline lineno="1022"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1023"><highlight class="comment"><sp/>*<sp/>After<sp/>this<sp/>function<sp/>is<sp/>called,<sp/>the<sp/>clock<sp/>source<sp/>for<sp/>the<sp/>USBD<sp/>is<sp/>connected<sp/>internally.</highlight></codeline>
<codeline lineno="1024"><highlight class="comment"><sp/>*<sp/>The<sp/>@ref<sp/>NRF_USBD_EVENTCAUSE_WUREQ_MASK<sp/>event<sp/>will<sp/>be<sp/>generated<sp/>and</highlight></codeline>
<codeline lineno="1025"><highlight class="comment"><sp/>*<sp/>then<sp/>the<sp/>USBD<sp/>registers<sp/>can<sp/>be<sp/>accessed.</highlight></codeline>
<codeline lineno="1026"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1027"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_usbd_lowpower_enable</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_usbd_lowpower_check</highlight></codeline>
<codeline lineno="1031"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga7553635a772c5cf7496efe211b6e56b9" kindref="member">nrf_usbd_lowpower_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1034"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>state<sp/>of<sp/>the<sp/>low<sp/>power<sp/>mode.</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>USBD<sp/>is<sp/>in<sp/>low<sp/>power<sp/>mode.</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>USBD<sp/>is<sp/>not<sp/>in<sp/>low<sp/>power<sp/>mode.</highlight></codeline>
<codeline lineno="1041"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga8b635f1aec033d9e66dc4776b4e1e3bd" kindref="member">nrf_usbd_lowpower_check</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1044"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>ISO<sp/>IN<sp/>endpoint<sp/>response<sp/>to<sp/>an<sp/>IN<sp/>token<sp/>when<sp/>no<sp/>data<sp/>is<sp/>ready<sp/>to<sp/>be<sp/>sent.</highlight></codeline>
<codeline lineno="1046"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1047"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1048"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>config<sp/>Required<sp/>configuration.</highlight></codeline>
<codeline lineno="1049"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga8960604f2e9a410468de65bd29bbdddc" kindref="member">nrf_usbd_isoinconfig_set</ref>(NRF_USBD_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ga2328f0becb99ca74db0490cd48af4861" kindref="member">nrf_usbd_isoinconfig_t</ref><sp/>config);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1053"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>cofiguration<sp/>of<sp/>ISO<sp/>IN<sp/>endpoint<sp/>response<sp/>to<sp/>an<sp/>IN<sp/>token<sp/>when<sp/>no<sp/>data<sp/>is<sp/>ready<sp/>to<sp/>be<sp/>sent.</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1058"><highlight class="comment"><sp/>*<sp/>@return<sp/>Current<sp/>configuration.</highlight></codeline>
<codeline lineno="1059"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__usbd__hal_1ga2328f0becb99ca74db0490cd48af4861" kindref="member">nrf_usbd_isoinconfig_t</ref><sp/><ref refid="group__nrf__usbd__hal_1gaf665a23aabc0f564ecb8262ddd781c33" kindref="member">nrf_usbd_isoinconfig_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1062"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1063"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>EasyDMA<sp/>channel.</highlight></codeline>
<codeline lineno="1064"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1065"><highlight class="comment"><sp/>*<sp/>Configures<sp/>EasyDMA<sp/>for<sp/>the<sp/>transfer.</highlight></codeline>
<codeline lineno="1066"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1068"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/><sp/>Endpoint<sp/>identifier<sp/>(with<sp/>direction).</highlight></codeline>
<codeline lineno="1069"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ptr<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="1070"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>maxcnt<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>transfer.</highlight></codeline>
<codeline lineno="1071"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gaa5a00900f9f1485b4d8aa35fedb0a7f7" kindref="member">nrf_usbd_ep_easydma_set</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ep,</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr,</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxcnt);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1077"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>number<sp/>of<sp/>transferred<sp/>bytes.</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1080"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>gets<sp/>the<sp/>number<sp/>of<sp/>transferred<sp/>bytes<sp/>in<sp/>the<sp/>last<sp/>transaction.</highlight></codeline>
<codeline lineno="1081"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ep<sp/><sp/><sp/><sp/>Endpoint<sp/>identifier.</highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1085"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>content<sp/>of<sp/>the<sp/>AMOUNT<sp/>register.</highlight></codeline>
<codeline lineno="1086"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga6d8ca4b4f0d2a5ce041cd654bfe9884d" kindref="member">nrf_usbd_ep_amount_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga562e57247a2d9890b9468d0bd73e10ed" kindref="member">nrf_usbd_enable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>USBD_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>USBD_ENABLE_ENABLE_Pos;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>p_reg-&gt;ENABLE;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga560e5d2709b79666577a22053b29d257" kindref="member">nrf_usbd_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>USBD_ENABLE_ENABLE_Disabled<sp/>&lt;&lt;<sp/>USBD_ENABLE_ENABLE_Pos;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>p_reg-&gt;ENABLE;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga6d9e732f036188c7bcffd40e1af8ddfb" kindref="member">nrf_usbd_eventcause_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;EVENTCAUSE;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga09314d6cf8bf067c28c4be5f6f900ee9" kindref="member">nrf_usbd_eventcause_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>flags)</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EVENTCAUSE<sp/>=<sp/>flags;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>p_reg-&gt;EVENTCAUSE;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1gafdbf646da698addceb7fccbf6f19562d" kindref="member">nrf_usbd_eventcause_get_and_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ret;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__nrf__usbd__hal_1ga6d9e732f036188c7bcffd40e1af8ddfb" kindref="member">nrf_usbd_eventcause_get</ref>(p_reg);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ga09314d6cf8bf067c28c4be5f6f900ee9" kindref="member">nrf_usbd_eventcause_clear</ref>(p_reg,<sp/>ret);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga4b4a86b907d9d16354916efa13c913f4" kindref="member">nrf_usbd_halted_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep)</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>epnr<sp/>=<sp/><ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep);</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga3d429071b3003910f7aa3027fc2597d6" kindref="member">NRF_USBD_EPIN_CHECK</ref>(ep))</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;HALTED.EPIN[epnr];</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;HALTED.EPOUT[epnr];</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gae6a606967bf03d76c70bf22552a94617" kindref="member">nrf_usbd_ep_is_stall</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga47229aa88f189c973e6c93a942772a10" kindref="member">NRF_USBD_EPISO_CHECK</ref>(ep))</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>USBD_HALTED_EPOUT_GETSTATUS_Halted<sp/>==<sp/><ref refid="group__nrf__usbd__hal_1ga4b4a86b907d9d16354916efa13c913f4" kindref="member">nrf_usbd_halted_get</ref>(p_reg,<sp/>ep);</highlight></codeline>
<codeline lineno="1141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga6bf521fe906e06186dc3b1633cd334d0" kindref="member">nrf_usbd_epstatus_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;EPSTATUS;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga8aad5300a3ad73ce92b98a123282c714" kindref="member">nrf_usbd_epstatus_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>flags)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EPSTATUS<sp/>=<sp/>flags;</highlight></codeline>
<codeline lineno="1151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1gac1a2a0466ceee8179df9d7d3a7e865ad" kindref="member">nrf_usbd_epstatus_get_and_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ret;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__nrf__usbd__hal_1ga6bf521fe906e06186dc3b1633cd334d0" kindref="member">nrf_usbd_epstatus_get</ref>(p_reg);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ga8aad5300a3ad73ce92b98a123282c714" kindref="member">nrf_usbd_epstatus_clear</ref>(p_reg,<sp/>ret);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga23746eeddcdc074aa2639fe406212a3e" kindref="member">nrf_usbd_epdatastatus_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;EPDATASTATUS;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga165b2891148dc620c4105f1b430832ca" kindref="member">nrf_usbd_epdatastatus_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>flags)</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EPDATASTATUS<sp/>=<sp/>flags;</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1gadfa04941d3bcefa5119bc69ec39cb259" kindref="member">nrf_usbd_epdatastatus_get_and_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ret;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__nrf__usbd__hal_1ga23746eeddcdc074aa2639fe406212a3e" kindref="member">nrf_usbd_epdatastatus_get</ref>(p_reg);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ga165b2891148dc620c4105f1b430832ca" kindref="member">nrf_usbd_epdatastatus_clear</ref>(p_reg,<sp/>ret);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__usbd__hal_1gad9fa77301e304f15905f04db5ace16de" kindref="member">nrf_usbd_setup_bmrequesttype_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)(p_reg-&gt;BMREQUESTTYPE);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__usbd__hal_1ga5fd0236b99b50a8003d22e84b8571f45" kindref="member">nrf_usbd_setup_brequest_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)(p_reg-&gt;BREQUEST);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__usbd__hal_1gaa425fab84d090108aa23fdab54c4fae3" kindref="member">nrf_usbd_setup_wvalue_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>val<sp/>=<sp/>(uint16_t)p_reg-&gt;WVALUEL;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(uint16_t)(val<sp/>|<sp/>((p_reg-&gt;WVALUEH)<sp/>&lt;&lt;<sp/>8));</highlight></codeline>
<codeline lineno="1193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__usbd__hal_1gafb4fa211dba6564eb365c50bbebd8c5a" kindref="member">nrf_usbd_setup_windex_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>val<sp/>=<sp/>(uint16_t)p_reg-&gt;WINDEXL;</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(uint16_t)(val<sp/>|<sp/>((p_reg-&gt;WINDEXH)<sp/>&lt;&lt;<sp/>8));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__usbd__hal_1ga0ad7b416191ca996a435e79b2f6c60cd" kindref="member">nrf_usbd_setup_wlength_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>val<sp/>=<sp/>(uint16_t)p_reg-&gt;WLENGTHL;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(uint16_t)(val<sp/>|<sp/>((p_reg-&gt;WLENGTHH)<sp/>&lt;&lt;<sp/>8));</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga484d691a3f3ac383b700cafe2b2d2ad2" kindref="member">nrf_usbd_epout_size_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep)</highlight></codeline>
<codeline lineno="1208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(<ref refid="group__nrf__usbd__hal_1ga5517794f8da667831ee7a22bd476a4e3" kindref="member">NRF_USBD_EP_VALIDATE</ref>(ep));</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(<ref refid="group__nrf__usbd__hal_1gaa3ed152cfe989b125a93a2687d8f7eae" kindref="member">NRF_USBD_EPOUT_CHECK</ref>(ep));</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga47229aa88f189c973e6c93a942772a10" kindref="member">NRF_USBD_EPISO_CHECK</ref>(ep))</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_isoout<sp/>=<sp/>p_reg-&gt;SIZE.ISOOUT;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((size_isoout<sp/>&amp;<sp/>USBD_SIZE_ISOOUT_ZERO_Msk)<sp/>==</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(USBD_SIZE_ISOOUT_ZERO_ZeroData<sp/>&lt;&lt;<sp/>USBD_SIZE_ISOOUT_ZERO_Pos))</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_isoout<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_isoout;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SIZE.EPOUT[<ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep)];</highlight></codeline>
<codeline lineno="1223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga781e617b1d8866be26f485f3b7f8320f" kindref="member">nrf_usbd_episoout_size_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep)</highlight></codeline>
<codeline lineno="1226"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(<ref refid="group__nrf__usbd__hal_1ga5517794f8da667831ee7a22bd476a4e3" kindref="member">NRF_USBD_EP_VALIDATE</ref>(ep));</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(<ref refid="group__nrf__usbd__hal_1gaa3ed152cfe989b125a93a2687d8f7eae" kindref="member">NRF_USBD_EPOUT_CHECK</ref>(ep));</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(<ref refid="group__nrf__usbd__hal_1ga47229aa88f189c973e6c93a942772a10" kindref="member">NRF_USBD_EPISO_CHECK</ref>(ep));</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_isoout<sp/>=<sp/>p_reg-&gt;SIZE.ISOOUT;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size_isoout<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_isoout<sp/>=<sp/><ref refid="group__nrf__usbd__hal_1gae8241e0e42223e58adb98e2fb7b71a3f" kindref="member">NRF_USBD_EPISOOUT_NO_DATA</ref>;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((size_isoout<sp/>&amp;<sp/>USBD_SIZE_ISOOUT_ZERO_Msk)<sp/>==</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(USBD_SIZE_ISOOUT_ZERO_ZeroData<sp/>&lt;&lt;<sp/>USBD_SIZE_ISOOUT_ZERO_Pos))</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_isoout<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_isoout;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gaf64d7d3c97e6dd3f6cfd0ba8b5297ca2" kindref="member">nrf_usbd_epout_clear</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep)</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(<ref refid="group__nrf__usbd__hal_1gaa3ed152cfe989b125a93a2687d8f7eae" kindref="member">NRF_USBD_EPOUT_CHECK</ref>(ep));</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SIZE.EPOUT[<ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep)]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>p_reg-&gt;SIZE.EPOUT[<ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep)];</highlight></codeline>
<codeline lineno="1249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gacde4d643e37439183c87b23d9a3a077a" kindref="member">nrf_usbd_pullup_enable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;USBPULLUP<sp/>=<sp/>USBD_USBPULLUP_CONNECT_Enabled<sp/>&lt;&lt;<sp/>USBD_USBPULLUP_CONNECT_Pos;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>p_reg-&gt;USBPULLUP;</highlight></codeline>
<codeline lineno="1255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gabf52b8f824fcdcb9ff10aaaecdfcabe5" kindref="member">nrf_usbd_pullup_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;USBPULLUP<sp/>=<sp/>USBD_USBPULLUP_CONNECT_Disabled<sp/>&lt;&lt;<sp/>USBD_USBPULLUP_CONNECT_Pos;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>p_reg-&gt;USBPULLUP;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga0c4627bb70c2fdaf5f5e65edca4e2739" kindref="member">nrf_usbd_pullup_check</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;USBPULLUP<sp/>==<sp/>(USBD_USBPULLUP_CONNECT_Enabled<sp/>&lt;&lt;<sp/>USBD_USBPULLUP_CONNECT_Pos);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga3f0f369fe4c04df616590d69487339c5" kindref="member">nrf_usbd_dpdmvalue_set</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__usbd__hal_1ga86af0982c97904e6f14200709346f93e" kindref="member">nrf_usbd_dpdmvalue_t</ref><sp/>val)</highlight></codeline>
<codeline lineno="1269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DPDMVALUE<sp/>=<sp/>((uint32_t)val)<sp/>&lt;&lt;<sp/>USBD_DPDMVALUE_STATE_Pos;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga60b7f36031cd0ae233d609ab390eae84" kindref="member">nrf_usbd_dtoggle_set</ref>(NRF_USBD_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ep,</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1gac7a52ea2795a7ec86d88d2479115e8ab" kindref="member">nrf_usbd_dtoggle_t</ref><sp/>op)</highlight></codeline>
<codeline lineno="1276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(<ref refid="group__nrf__usbd__hal_1ga5517794f8da667831ee7a22bd476a4e3" kindref="member">NRF_USBD_EP_VALIDATE</ref>(ep));</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(!<ref refid="group__nrf__usbd__hal_1ga47229aa88f189c973e6c93a942772a10" kindref="member">NRF_USBD_EPISO_CHECK</ref>(ep));</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DTOGGLE<sp/>=<sp/>ep<sp/>|<sp/>(<ref refid="group__nrf__usbd__hal_1ggac7a52ea2795a7ec86d88d2479115e8abad544fd91f626686855661c029f6783ed" kindref="member">NRF_USBD_DTOGGLE_NOP</ref><sp/>&lt;&lt;<sp/>USBD_DTOGGLE_VALUE_Pos);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DTOGGLE<sp/>=<sp/>ep<sp/>|<sp/>((uint32_t)op<sp/>&lt;&lt;<sp/>USBD_DTOGGLE_VALUE_Pos);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>p_reg-&gt;DTOGGLE;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__usbd__hal_1gac7a52ea2795a7ec86d88d2479115e8ab" kindref="member">nrf_usbd_dtoggle_t</ref><sp/><ref refid="group__nrf__usbd__hal_1ga1c270f17c425d5d9c844aed147e973a9" kindref="member">nrf_usbd_dtoggle_get</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep)</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>retval;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Select<sp/>the<sp/>endpoint<sp/>to<sp/>read<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DTOGGLE<sp/>=<sp/>ep<sp/>|<sp/>(<ref refid="group__nrf__usbd__hal_1ggac7a52ea2795a7ec86d88d2479115e8abad544fd91f626686855661c029f6783ed" kindref="member">NRF_USBD_DTOGGLE_NOP</ref><sp/>&lt;&lt;<sp/>USBD_DTOGGLE_VALUE_Pos);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/>retval<sp/>=<sp/>((p_reg-&gt;DTOGGLE)<sp/>&amp;<sp/>USBD_DTOGGLE_VALUE_Msk)<sp/>&gt;&gt;<sp/>USBD_DTOGGLE_VALUE_Pos;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1gac7a52ea2795a7ec86d88d2479115e8ab" kindref="member">nrf_usbd_dtoggle_t</ref>)retval;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gaf17b7e12a6373351f12a81b361c12fff" kindref="member">nrf_usbd_ep_enable_check</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep)</highlight></codeline>
<codeline lineno="1294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(<ref refid="group__nrf__usbd__hal_1ga5517794f8da667831ee7a22bd476a4e3" kindref="member">NRF_USBD_EP_VALIDATE</ref>(ep));</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>epnr<sp/>=<sp/><ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga3d429071b3003910f7aa3027fc2597d6" kindref="member">NRF_USBD_EPIN_CHECK</ref>(ep))</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0<sp/>!=<sp/>(p_reg-&gt;EPINEN<sp/>&amp;<sp/>(1UL<sp/>&lt;&lt;<sp/>epnr));</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0<sp/>!=<sp/>(p_reg-&gt;EPOUTEN<sp/>&amp;<sp/>(1UL<sp/>&lt;&lt;<sp/>epnr));</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga28d51ddddc9b82ce7a0f20d9d0c3eced" kindref="member">nrf_usbd_ep_enable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep)</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(<ref refid="group__nrf__usbd__hal_1ga5517794f8da667831ee7a22bd476a4e3" kindref="member">NRF_USBD_EP_VALIDATE</ref>(ep));</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>epnr<sp/>=<sp/><ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga3d429071b3003910f7aa3027fc2597d6" kindref="member">NRF_USBD_EPIN_CHECK</ref>(ep))</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;EPINEN<sp/>|=<sp/>1UL<sp/>&lt;&lt;<sp/>epnr;</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;EPOUTEN<sp/>|=<sp/>1UL<sp/>&lt;&lt;<sp/>epnr;</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga2ec0b9257ca5204d17bbc0ddbc21eb45" kindref="member">nrf_usbd_ep_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep)</highlight></codeline>
<codeline lineno="1324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(<ref refid="group__nrf__usbd__hal_1ga5517794f8da667831ee7a22bd476a4e3" kindref="member">NRF_USBD_EP_VALIDATE</ref>(ep));</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>epnr<sp/>=<sp/><ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga3d429071b3003910f7aa3027fc2597d6" kindref="member">NRF_USBD_EPIN_CHECK</ref>(ep))</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;EPINEN<sp/>&amp;=<sp/>~(1UL<sp/>&lt;&lt;<sp/>epnr);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;EPOUTEN<sp/>&amp;=<sp/>~(1UL<sp/>&lt;&lt;<sp/>epnr);</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gad5097e513286061bb0dd1a104606830e" kindref="member">nrf_usbd_ep_all_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EPINEN<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EPOUTEN<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gae22f114852bc426680af00d510127da4" kindref="member">nrf_usbd_ep_default_config</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EPINEN<sp/><sp/>=<sp/>USBD_EPINEN_IN0_Enable<sp/>&lt;&lt;<sp/>USBD_EPINEN_IN0_Pos;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EPOUTEN<sp/>=<sp/>USBD_EPOUTEN_OUT0_Enable<sp/>&lt;&lt;<sp/>USBD_EPOUTEN_OUT0_Pos;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gab783f26d050b386fffbcefc2cdf459cf" kindref="member">nrf_usbd_ep_stall</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep)</highlight></codeline>
<codeline lineno="1351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(!<ref refid="group__nrf__usbd__hal_1ga47229aa88f189c973e6c93a942772a10" kindref="member">NRF_USBD_EPISO_CHECK</ref>(ep));</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EPSTALL<sp/>=<sp/>(USBD_EPSTALL_STALL_Stall<sp/>&lt;&lt;<sp/>USBD_EPSTALL_STALL_Pos)<sp/>|<sp/>ep;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gad80e8d94a4ab714d952b28b07e310a14" kindref="member">nrf_usbd_ep_unstall</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep)</highlight></codeline>
<codeline lineno="1357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(!<ref refid="group__nrf__usbd__hal_1ga47229aa88f189c973e6c93a942772a10" kindref="member">NRF_USBD_EPISO_CHECK</ref>(ep));</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;EPSTALL<sp/>=<sp/>(USBD_EPSTALL_STALL_UnStall<sp/>&lt;&lt;<sp/>USBD_EPSTALL_STALL_Pos)<sp/>|<sp/>ep;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga012c9fa1b3ef65862f6a37184f5cce33" kindref="member">nrf_usbd_isosplit_set</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__usbd__hal_1ga2b397851455aff39727f26fa7f52a26c" kindref="member">nrf_usbd_isosplit_t</ref><sp/>split)</highlight></codeline>
<codeline lineno="1363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ISOSPLIT<sp/>=<sp/>split<sp/>&lt;&lt;<sp/>USBD_ISOSPLIT_SPLIT_Pos;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__usbd__hal_1ga2b397851455aff39727f26fa7f52a26c" kindref="member">nrf_usbd_isosplit_t</ref><sp/><ref refid="group__nrf__usbd__hal_1ga3fae989351d356e8e77227861f6ecdd5" kindref="member">nrf_usbd_isosplit_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga2b397851455aff39727f26fa7f52a26c" kindref="member">nrf_usbd_isosplit_t</ref>)</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((p_reg-&gt;ISOSPLIT)<sp/>&amp;<sp/>USBD_ISOSPLIT_SPLIT_Msk)<sp/>&gt;&gt;<sp/>USBD_ISOSPLIT_SPLIT_Pos);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1gae0ff06baed465b177e31375ce001d0d1" kindref="member">nrf_usbd_framecntr_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;FRAMECNTR;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga944a5e908b4e3a16461bf04db92bafac" kindref="member">nrf_usbd_lowpower_enable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;LOWPOWER<sp/>=<sp/>USBD_LOWPOWER_LOWPOWER_LowPower<sp/>&lt;&lt;<sp/>USBD_LOWPOWER_LOWPOWER_Pos;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>p_reg-&gt;LOWPOWER;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga7553635a772c5cf7496efe211b6e56b9" kindref="member">nrf_usbd_lowpower_disable</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;LOWPOWER<sp/>=<sp/>USBD_LOWPOWER_LOWPOWER_ForceNormal<sp/>&lt;&lt;<sp/>USBD_LOWPOWER_LOWPOWER_Pos;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>p_reg-&gt;LOWPOWER;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga8b635f1aec033d9e66dc4776b4e1e3bd" kindref="member">nrf_usbd_lowpower_check</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;LOWPOWER<sp/>!=<sp/>(USBD_LOWPOWER_LOWPOWER_ForceNormal<sp/>&lt;&lt;<sp/>USBD_LOWPOWER_LOWPOWER_Pos));</highlight></codeline>
<codeline lineno="1393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1ga8960604f2e9a410468de65bd29bbdddc" kindref="member">nrf_usbd_isoinconfig_set</ref>(NRF_USBD_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__usbd__hal_1ga2328f0becb99ca74db0490cd48af4861" kindref="member">nrf_usbd_isoinconfig_t</ref><sp/>config)</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ISOINCONFIG<sp/>=<sp/>((uint32_t)config)<sp/>&lt;&lt;<sp/>USBD_ISOINCONFIG_RESPONSE_Pos;</highlight></codeline>
<codeline lineno="1399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__usbd__hal_1ga2328f0becb99ca74db0490cd48af4861" kindref="member">nrf_usbd_isoinconfig_t</ref><sp/><ref refid="group__nrf__usbd__hal_1gaf665a23aabc0f564ecb8262ddd781c33" kindref="member">nrf_usbd_isoinconfig_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga2328f0becb99ca74db0490cd48af4861" kindref="member">nrf_usbd_isoinconfig_t</ref>)<sp/>(((p_reg-&gt;ISOINCONFIG)<sp/>&amp;<sp/>USBD_ISOINCONFIG_RESPONSE_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USBD_ISOINCONFIG_RESPONSE_Pos);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__usbd__hal_1gaa5a00900f9f1485b4d8aa35fedb0a7f7" kindref="member">nrf_usbd_ep_easydma_set</ref>(NRF_USBD_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ep,</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr,</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxcnt)</highlight></codeline>
<codeline lineno="1411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga3d429071b3003910f7aa3027fc2597d6" kindref="member">NRF_USBD_EPIN_CHECK</ref>(ep))</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga47229aa88f189c973e6c93a942772a10" kindref="member">NRF_USBD_EPISO_CHECK</ref>(ep))</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;ISOIN.PTR<sp/><sp/><sp/><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;ISOIN.MAXCNT<sp/>=<sp/>maxcnt;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>epnr<sp/>=<sp/><ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;EPIN[epnr].PTR<sp/><sp/><sp/><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;EPIN[epnr].MAXCNT<sp/>=<sp/>maxcnt;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga47229aa88f189c973e6c93a942772a10" kindref="member">NRF_USBD_EPISO_CHECK</ref>(ep))</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;ISOOUT.PTR<sp/><sp/><sp/><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;ISOOUT.MAXCNT<sp/>=<sp/>maxcnt;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>epnr<sp/>=<sp/><ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep);</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;EPOUT[epnr].PTR<sp/><sp/><sp/><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;EPOUT[epnr].MAXCNT<sp/>=<sp/>maxcnt;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__usbd__hal_1ga6d8ca4b4f0d2a5ce041cd654bfe9884d" kindref="member">nrf_usbd_ep_amount_get</ref>(NRF_USBD_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>ep)</highlight></codeline>
<codeline lineno="1443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ret;</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga3d429071b3003910f7aa3027fc2597d6" kindref="member">NRF_USBD_EPIN_CHECK</ref>(ep))</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga47229aa88f189c973e6c93a942772a10" kindref="member">NRF_USBD_EPISO_CHECK</ref>(ep))</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>p_reg-&gt;ISOIN.AMOUNT;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>epnr<sp/>=<sp/><ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>p_reg-&gt;EPIN[epnr].AMOUNT;</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__usbd__hal_1ga47229aa88f189c973e6c93a942772a10" kindref="member">NRF_USBD_EPISO_CHECK</ref>(ep))</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>p_reg-&gt;ISOOUT.AMOUNT;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>epnr<sp/>=<sp/><ref refid="group__nrf__usbd__hal_1gab94e2e9074a572f025cbbbbfb49852ad" kindref="member">NRF_USBD_EP_NR_GET</ref>(ep);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>p_reg-&gt;EPOUT[epnr].AMOUNT;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRF_DECLARE_ONLY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1476"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRF_USBD_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_usbd.h"/>
  </compounddef>
</doxygen>
