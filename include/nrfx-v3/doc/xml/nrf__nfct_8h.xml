<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__nfct_8h" kind="file" language="C++">
    <compoundname>nrf_nfct.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfy__nfct_8h" local="no">haly/nrfy_nfct.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_nfct.h</label>
        <link refid="nrf__nfct_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__nfct__bias__config__t" prot="public">nrf_nfct_bias_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__nfct__hal_1ga697544d229f5e7a188e770433935daeb" prot="public" static="no">
        <name>NRF_NFCT_CRC_SIZE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CRC size in bytes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="51" column="9" bodyfile="hal/nrf_nfct.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nfct__hal_1ga506c6f683444d836719818f8046363cc" prot="public" static="no">
        <name>NRF_NFCT_DISABLE_ALL_INT</name>
        <initializer>0xFFFFFFFF</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Value to disable all interrupts. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="52" column="9" bodyfile="hal/nrf_nfct.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nfct__hal_1ga9b144c59c9de8f9297ca2549c80380df" prot="public" static="no">
        <name>NRF_NFCT_MOD_CTRL_PIN_NOT_CONNECTED</name>
        <initializer>0xFFFFFFFF</initializer>
        <briefdescription>
<para>This value can be used as a parameter for the <ref refid="group__nrf__nfct__hal_1gadee0eef3c3cfe89e730dded70de30eae" kindref="member">nrf_nfct_mod_ctrl_pin_set</ref> function to specify that a given NFCT signal (MODULATION CONTROL) must not be connected to a physical pin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="59" column="9" bodyfile="hal/nrf_nfct.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nfct__hal_1gafb3e1a13659372a60acfe11786c5d2bc" prot="public" static="no">
        <name>NRF_NFCT_FRAME_DELAY_MAX_MAX_VALUE</name>
        <initializer>NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Msk</initializer>
        <briefdescription>
<para>Maximum possible value of NFCT max frame delay. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="62" column="9" bodyfile="hal/nrf_nfct.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nfct__hal_1ga4f96cadef16de3fb807d03b02e27fc58" prot="public" static="no">
        <name>NRF_NFCID1_HAS_NEW_LAYOUT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether NFCID1 register uses new layout. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="66" column="9" bodyfile="hal/nrf_nfct.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nfct__hal_1ga6f92ddf8eec72396d9f8ee76cc242f2b" prot="public" static="no">
        <name>NRF_NFCT_HAS_STOPTX_TASK</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether NFCT STOPTX event is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="73" column="9" bodyfile="hal/nrf_nfct.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nfct__hal_1gac245b8683a60ff5150cff0cd6dd132ee" prot="public" static="no">
        <name>NRF_NFCT_HAS_MODULATION_PSEL_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether pin select for modulation control register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="80" column="9" bodyfile="hal/nrf_nfct.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nfct__hal_1gaf798a5d0379502908e800a8bf02bfb0b" prot="public" static="no">
        <name>NRF_NFCT_HAS_MODULATION_CTRL_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether modulation output select register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="87" column="9" bodyfile="hal/nrf_nfct.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nfct__hal_1ga3d3852803a40f4b1774beee1b13bfe14" prot="public" static="no">
        <name>NRF_NFCT_HAS_TAG_STATE_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether current operating state of NFC tag register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="94" column="9" bodyfile="hal/nrf_nfct.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nfct__hal_1gad479fd73563462a92e3fa6abb384e460" prot="public" static="no">
        <name>NRF_NFCT_HAS_SLEEP_STATE_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether sleep state during automatic collision resolution is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="101" column="9" bodyfile="hal/nrf_nfct.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nfct__hal_1ga189fcead64f02b76a4da9bfafec48d86" prot="public" static="no">
        <name>NRF_NFCT_HAS_AUTOCOLRES_CONFIG_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether automatic collision resolution control register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="108" column="9" bodyfile="hal/nrf_nfct.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nfct__hal_1ga7ac57dea3f79dc1501b39d3d4a01ff59" prot="public" static="no">
        <name>NRF_NFCT_HAS_PAD_CONFIG_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether NFC pad configuration register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="115" column="9" bodyfile="hal/nrf_nfct.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__nfct__hal_1ga0cbda78d7e300cf5822f4d29c3012420" prot="public" static="no">
        <name>NRF_NFCT_HAS_BIAS_CONFIG_TRIM_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether NFC bias configuration trim register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="124" column="9" bodyfile="hal/nrf_nfct.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__nfct__hal_1ga90998750300456aedbce0700a9df232a" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_task_t</name>
        <enumvalue id="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aa644a36bc8b24adbd7d591463d1869fd9" prot="public">
          <name>NRF_NFCT_TASK_ACTIVATE</name>
          <initializer>= offsetof(NRF_NFCT_Type, TASKS_ACTIVATE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Activate the NFCT peripheral for the incoming and outgoing frames, change state to activated. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aaacb8bebeb380ad8b584c69b0b88531ce" prot="public">
          <name>NRF_NFCT_TASK_DISABLE</name>
          <initializer>= offsetof(NRF_NFCT_Type, TASKS_DISABLE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disable the NFCT peripheral. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aad88a9df1a096cbdf6411946d09136a78" prot="public">
          <name>NRF_NFCT_TASK_SENSE</name>
          <initializer>= offsetof(NRF_NFCT_Type, TASKS_SENSE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable the NFC sense field mode, change state to sense mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aa21ddbbcce3cb3cade429db73eb3a41f6" prot="public">
          <name>NRF_NFCT_TASK_STARTTX</name>
          <initializer>= offsetof(NRF_NFCT_Type, TASKS_STARTTX)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start the transmission of an outgoing frame, change state to transmit. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aa8d413524b7ced7627afcccc9147900d2" prot="public">
          <name>NRF_NFCT_TASK_STOPTX</name>
          <initializer>= offsetof(NRF_NFCT_Type, TASKS_STOPTX)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop an issued transmission of a frame. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aa38f719b1a09760e677d5e64264a99ec2" prot="public">
          <name>NRF_NFCT_TASK_ENABLERXDATA</name>
          <initializer>= offsetof(NRF_NFCT_Type, TASKS_ENABLERXDATA)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Initialize EasyDMA for receive. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aa6a3d9998064eb60aa371c095536fb687" prot="public">
          <name>NRF_NFCT_TASK_GOIDLE</name>
          <initializer>= offsetof(NRF_NFCT_Type, TASKS_GOIDLE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Force state machine to the IDLE state. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aae6df9bb05c3f5203cd1d6279deffe1aa" prot="public">
          <name>NRF_NFCT_TASK_GOSLEEP</name>
          <initializer>= offsetof(NRF_NFCT_Type, TASKS_GOSLEEP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Force state machine to the SLEEP_A state. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFCT tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="129" column="1" bodyfile="hal/nrf_nfct.h" bodystart="130" bodyend="141"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1ga0a44934a729ad8469a53a65318e8402d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_event_t</name>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da5a97fb3d11f7a669c9c983b1a4b2f256" prot="public">
          <name>NRF_NFCT_EVENT_READY</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_READY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The NFCT peripheral is ready to receive and send frames. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da1fc93a167fe1637cdfd97a0517d71524" prot="public">
          <name>NRF_NFCT_EVENT_FIELDDETECTED</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_FIELDDETECTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Remote NFC field is detected. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402daf2a6d543c8fa602f75d3507243201f4d" prot="public">
          <name>NRF_NFCT_EVENT_FIELDLOST</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_FIELDLOST)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Remote NFC field is lost. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402dad8ff1f0a1506948b58e381aced0abdf4" prot="public">
          <name>NRF_NFCT_EVENT_TXFRAMESTART</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_TXFRAMESTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The start of the first symbol of a transmitted frame. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da331cf91e0b0daf5f576d9eb1ac19d0a0" prot="public">
          <name>NRF_NFCT_EVENT_TXFRAMEEND</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_TXFRAMEEND)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The end of the last transmitted on-air symbol of a frame. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da977ea18979b68831a6e4d9f36000907e" prot="public">
          <name>NRF_NFCT_EVENT_RXFRAMESTART</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_RXFRAMESTART)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The end of the first symbol of a received frame. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402dacfc750b984b73a2fa7d948bf6169edbb" prot="public">
          <name>NRF_NFCT_EVENT_RXFRAMEEND</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_RXFRAMEEND)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Received data was checked (CRC, parity) and transferred to RAM, and EasyDMA ended accessing the RX buffer. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da4e43b87802d528a562f8a986e0203ed3" prot="public">
          <name>NRF_NFCT_EVENT_ERROR</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_ERROR)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NFC error reported. The ERRORSTATUS register contains details on the source of the error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da65ccd2d0e78225028aca64e15ae6d23a" prot="public">
          <name>NRF_NFCT_EVENT_RXERROR</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_RXERROR)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NFC RX frame error reported. The FRAMESTATUS.RX register contains details on the source of the error. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402dac2c6402be49b55642879a66ba7ade991" prot="public">
          <name>NRF_NFCT_EVENT_ENDRX</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_ENDRX)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>RX buffer (as defined by PACKETPTR and MAXLEN) in Data RAM full. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da15ef6d0431f51b4894049a41306d6c70" prot="public">
          <name>NRF_NFCT_EVENT_ENDTX</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_ENDTX)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Transmission of data in RAM ended, and EasyDMA ended accessing the TX buffer. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da5907d2dd2dc898edfb13231aaebb2739" prot="public">
          <name>NRF_NFCT_EVENT_AUTOCOLRESSTARTED</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_AUTOCOLRESSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Auto collision resolution process started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402daf75727ab736830d9cd20fd7c15c3509d" prot="public">
          <name>NRF_NFCT_EVENT_COLLISION</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_COLLISION)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NFC auto collision resolution error reported. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402daf3377a5115a67ed73f4dc20e0b354c11" prot="public">
          <name>NRF_NFCT_EVENT_SELECTED</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_SELECTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NFC auto collision resolution successfully completed. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da1efd0a4a51f49117af72f37d059f2d5e" prot="public">
          <name>NRF_NFCT_EVENT_STARTED</name>
          <initializer>= offsetof(NRF_NFCT_Type, EVENTS_STARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>EasyDMA is ready to receive or send frames. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFCT events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="144" column="1" bodyfile="hal/nrf_nfct.h" bodystart="145" bodyend="161"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1ga6c7632f889b4f197c3754e1459bd96d9" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_short_mask_t</name>
        <enumvalue id="group__nrf__nfct__hal_1gga6c7632f889b4f197c3754e1459bd96d9af05e8e5c88c997b75230227da96f862a" prot="public">
          <name>NRF_NFCT_SHORT_FIELDDETECTED_ACTIVATE_MASK</name>
          <initializer>= NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between the FIELDDETECTED event and the ACTIVATE task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga6c7632f889b4f197c3754e1459bd96d9a0c24c1ac5908201b27f68d9283019610" prot="public">
          <name>NRF_NFCT_SHORT_FIELDLOST_SENSE_MASK</name>
          <initializer>= NFCT_SHORTS_FIELDLOST_SENSE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between the FIELDLOST event and the SENSE task. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga6c7632f889b4f197c3754e1459bd96d9a985f26b4e946473de6eaa741674a4b97" prot="public">
          <name>NRF_NFCT_SHORT_TXFRAMEEND_ENABLERXDATA_MASK</name>
          <initializer>= NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Shortcut between the TXFRAMEEND event and the ENABLERXDATA task. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFCT shortcuts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="164" column="1" bodyfile="hal/nrf_nfct.h" bodystart="165" bodyend="171"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1gad16e86051bee49a907048aae86da2ee7" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_int_mask_t</name>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a2dd30e7d207875fa9199ac7bf795ad7b" prot="public">
          <name>NRF_NFCT_INT_READY_MASK</name>
          <initializer>= NFCT_INTEN_READY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on READY event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7af977f1a3ca28e086e5648d35ec502d84" prot="public">
          <name>NRF_NFCT_INT_FIELDDETECTED_MASK</name>
          <initializer>= NFCT_INTEN_FIELDDETECTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on FIELDDETECTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a9bb7e892877b6246adf32be5228e3409" prot="public">
          <name>NRF_NFCT_INT_FIELDLOST_MASK</name>
          <initializer>= NFCT_INTEN_FIELDLOST_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on FIELDLOST event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a42b18e008fd3b5704310812c544b5480" prot="public">
          <name>NRF_NFCT_INT_TXFRAMESTART_MASK</name>
          <initializer>= NFCT_INTEN_TXFRAMESTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on TXFRAMESTART event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a2cd2aebf085658f92b4f32be1bb4d32e" prot="public">
          <name>NRF_NFCT_INT_TXFRAMEEND_MASK</name>
          <initializer>= NFCT_INTEN_TXFRAMEEND_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on TXFRAMEEND event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7ab9c951e462fad2ae589b1921e91cd5f4" prot="public">
          <name>NRF_NFCT_INT_RXFRAMESTART_MASK</name>
          <initializer>= NFCT_INTEN_RXFRAMESTART_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on RXFRAMESTART event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7af7be4f93c9f7db92ebe29c50726ce31b" prot="public">
          <name>NRF_NFCT_INT_RXFRAMEEND_MASK</name>
          <initializer>= NFCT_INTEN_RXFRAMEEND_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on RXFRAMEEND event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7abb7cf7fc5578a5e314462ace32cfdcb2" prot="public">
          <name>NRF_NFCT_INT_ERROR_MASK</name>
          <initializer>= NFCT_INTEN_ERROR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on ERROR event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a61765467b22393476077f147b880c6e8" prot="public">
          <name>NRF_NFCT_INT_RXERROR_MASK</name>
          <initializer>= NFCT_INTEN_RXERROR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on RXERROR event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a96aa3e2524279ff40e15165c975f06e1" prot="public">
          <name>NRF_NFCT_INT_ENDRX_MASK</name>
          <initializer>= NFCT_INTEN_ENDRX_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on ENDRX event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a4a8f3aa192ade9cc5c64b79587314300" prot="public">
          <name>NRF_NFCT_INT_ENDTX_MASK</name>
          <initializer>= NFCT_INTEN_ENDTX_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on ENDTX event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a97ae5ea57bacf758d5ec50a76d0bea71" prot="public">
          <name>NRF_NFCT_INT_AUTOCOLRESSTARTED_MASK</name>
          <initializer>= NFCT_INTEN_AUTOCOLRESSTARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on AUTOCOLRESSTARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a1e44273a7ac2f1702f5173b87a957ccf" prot="public">
          <name>NRF_NFCT_INT_COLLISION_MASK</name>
          <initializer>= NFCT_INTEN_COLLISION_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on COLLISION event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7ae5724887e0f3e76ad883e70dc69d89ef" prot="public">
          <name>NRF_NFCT_INT_SELECTED_MASK</name>
          <initializer>= NFCT_INTEN_SELECTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on SELECTED event. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a4553fbfba3efa52de7be5f51f63b8994" prot="public">
          <name>NRF_NFCT_INT_STARTED_MASK</name>
          <initializer>= NFCT_INTEN_STARTED_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on STARTED event. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFCT interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="174" column="1" bodyfile="hal/nrf_nfct.h" bodystart="175" bodyend="191"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1gad99ea387f1db326f48ed88cd87ce029e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_error_status_t</name>
        <enumvalue id="group__nrf__nfct__hal_1ggad99ea387f1db326f48ed88cd87ce029ea2bfaf8571fdb161f9ef566f14fdfd7c6" prot="public">
          <name>NRF_NFCT_ERROR_FRAMEDELAYTIMEOUT_MASK</name>
          <initializer>= NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Timeout of the Frame Delay Timer (no frame transmission started in the FDT window). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad99ea387f1db326f48ed88cd87ce029ea8b841a00d0b6d851e2363c7276894dc4" prot="public">
          <name>NRF_NFCT_ERROR_NFCFIELDTOOSTRONG_MASK</name>
          <initializer>= NFCT_ERRORSTATUS_NFCFIELDTOOSTRONG_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Field level is too high at maximum load resistance. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad99ea387f1db326f48ed88cd87ce029ea097a34ebfa74377c11e6d7d7b2d24515" prot="public">
          <name>NRF_NFCT_ERROR_NFCFIELDTOOWEAK_MASK</name>
          <initializer>= NFCT_ERRORSTATUS_NFCFIELDTOOWEAK_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Field level is too low at minimum load resistance. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFC error status bit masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="194" column="1" bodyfile="hal/nrf_nfct.h" bodystart="195" bodyend="203"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1ga932b29507cd5521c30732e467b9d59a4" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_rx_frame_status_t</name>
        <enumvalue id="group__nrf__nfct__hal_1gga932b29507cd5521c30732e467b9d59a4add46775704db6e40fdd93cc033a46a31" prot="public">
          <name>NRF_NFCT_RX_FRAME_STATUS_CRC_MASK</name>
          <initializer>= NFCT_FRAMESTATUS_RX_CRCERROR_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CRC status mask. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga932b29507cd5521c30732e467b9d59a4a449833c0bb9451cac8bfd6b36ef70332" prot="public">
          <name>NRF_NFCT_RX_FRAME_STATUS_PARITY_MASK</name>
          <initializer>= NFCT_FRAMESTATUS_RX_PARITYSTATUS_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Parity status mask. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga932b29507cd5521c30732e467b9d59a4af51f867d1bd6a76124067a1f84155b0d" prot="public">
          <name>NRF_NFCT_RX_FRAME_STATUS_OVERRUN_MASK</name>
          <initializer>= NFCT_FRAMESTATUS_RX_OVERRUN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Overrun status mask. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFC received frame status bit masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="206" column="1" bodyfile="hal/nrf_nfct.h" bodystart="207" bodyend="211"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1gad41c75935da91df206b39337d615780d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_tag_state_t</name>
        <enumvalue id="group__nrf__nfct__hal_1ggad41c75935da91df206b39337d615780da3e141b4a528156dd4de3903d767018b0" prot="public">
          <name>NRF_NFCT_TAG_STATE_DISABLED</name>
          <initializer>= NFCT_NFCTAGSTATE_NFCTAGSTATE_Disabled</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disabled or sensing NFC field. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad41c75935da91df206b39337d615780da192bd0faa9e10b9965612fd0638f8d19" prot="public">
          <name>NRF_NFCT_TAG_STATE_RAMP_UP</name>
          <initializer>= NFCT_NFCTAGSTATE_NFCTAGSTATE_RampUp</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ramping up. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad41c75935da91df206b39337d615780daac606854b8b568b825aa7739de9845af" prot="public">
          <name>NRF_NFCT_TAG_STATE_IDLE</name>
          <initializer>= NFCT_NFCTAGSTATE_NFCTAGSTATE_Idle</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Idle. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad41c75935da91df206b39337d615780da9a6cbfbdc278d5a6eaffd1f1d1843891" prot="public">
          <name>NRF_NFCT_TAG_STATE_RECEIVE</name>
          <initializer>= NFCT_NFCTAGSTATE_NFCTAGSTATE_Receive</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Receiving data. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad41c75935da91df206b39337d615780daf53e09553e44e37b4c910d220e2472ea" prot="public">
          <name>NRF_NFCT_TAG_STATE_FRAME_DELAY</name>
          <initializer>= NFCT_NFCTAGSTATE_NFCTAGSTATE_FrameDelay</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Counting Frame Delay Time since the last symbol of the last received frame. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggad41c75935da91df206b39337d615780da2eef014dc7fc92894df600a63474b140" prot="public">
          <name>NRF_NFCT_TAG_STATE_TRANSMIT</name>
          <initializer>= NFCT_NFCTAGSTATE_NFCTAGSTATE_Transmit</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Transmitting data. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFC tag state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="215" column="1" bodyfile="hal/nrf_nfct.h" bodystart="216" bodyend="223"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1gaed596f092cc3971acade2458023e3c3a" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_sleep_state_t</name>
        <enumvalue id="group__nrf__nfct__hal_1ggaed596f092cc3971acade2458023e3c3aa2986b55368ca4f519b68a4e897017af5" prot="public">
          <name>NRF_NFCT_SLEEP_STATE_IDLE</name>
          <initializer>= NFCT_SLEEPSTATE_SLEEPSTATE_Idle</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>&apos;IDLE&apos; state. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggaed596f092cc3971acade2458023e3c3aacd1d8e637e8f8516bef0df37e2d359e8" prot="public">
          <name>NRF_NFCT_SLEEP_STATE_SLEEP_A</name>
          <initializer>= NFCT_SLEEPSTATE_SLEEPSTATE_SleepA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>&apos;SLEEP_A&apos; state. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFC tag sleep state. </para>
        </briefdescription>
        <detaileddescription>
<para>Shows the sleep state during automatic collision resolution according to the NFC Forum Activity Technical Specification v2.0. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="233" column="1" bodyfile="hal/nrf_nfct.h" bodystart="234" bodyend="237"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1gac45bf9d9a9f138385c799a7273a64248" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_field_state_t</name>
        <enumvalue id="group__nrf__nfct__hal_1ggac45bf9d9a9f138385c799a7273a64248ad3e68170a13c5ef0d1c742192a56802a" prot="public">
          <name>NRF_NFCT_FIELD_STATE_PRESENT_MASK</name>
          <initializer>= NFCT_FIELDPRESENT_FIELDPRESENT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Field presence mask. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggac45bf9d9a9f138385c799a7273a64248ad2db0acfdc995f4b9bb01fa6fa99a390" prot="public">
          <name>NRF_NFCT_FIELD_STATE_LOCK_MASK</name>
          <initializer>= NFCT_FIELDPRESENT_LOCKDETECT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Field lock mask. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFC field state bit masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="241" column="1" bodyfile="hal/nrf_nfct.h" bodystart="242" bodyend="245"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1ga440398a7c43c28c619f2326cf0d48408" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_frame_delay_mode_t</name>
        <enumvalue id="group__nrf__nfct__hal_1gga440398a7c43c28c619f2326cf0d48408aa725de0eda1170d32515e941ad742428" prot="public">
          <name>NRF_NFCT_FRAME_DELAY_MODE_FREERUN</name>
          <initializer>= NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_FreeRun</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Frame transmission starts when <ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aa21ddbbcce3cb3cade429db73eb3a41f6" kindref="member">NRF_NFCT_TASK_STARTTX</ref> is set (delay timer is not used). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga440398a7c43c28c619f2326cf0d48408af6bc2173f62c51307a18b6cb3d58cc3a" prot="public">
          <name>NRF_NFCT_FRAME_DELAY_MODE_WINDOW</name>
          <initializer>= NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Window</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Frame transmission starts in a window between FRAMEDELAYMIN and FRAMEDELAYMAX. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga440398a7c43c28c619f2326cf0d48408a3d109ef382fd19b65a3138c89ddfb804" prot="public">
          <name>NRF_NFCT_FRAME_DELAY_MODE_EXACTVAL</name>
          <initializer>= NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_ExactVal</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Frame transmission starts when the delay timer reaches FRAMEDELAYMAX. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga440398a7c43c28c619f2326cf0d48408a698f86f6fdfb20c3dce85ff5f0459c9f" prot="public">
          <name>NRF_NFCT_FRAME_DELAY_MODE_WINDOWGRID</name>
          <initializer>= NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_WindowGrid</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Frame transmission starts in a bit grid between FRAMEDELAYMIN and FRAMEDELAYMAX. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>NFC frame delay mode for data transmission. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="248" column="1" bodyfile="hal/nrf_nfct.h" bodystart="249" bodyend="254"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1ga97c7393982d73ebddf326b37d16919d7" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_tx_frame_config_t</name>
        <enumvalue id="group__nrf__nfct__hal_1gga97c7393982d73ebddf326b37d16919d7ab3232323c07516d143153746fdc1b6ce" prot="public">
          <name>NRF_NFCT_TX_FRAME_CONFIG_PARITY</name>
          <initializer>= NFCT_TXD_FRAMECONFIG_PARITY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicates whether parity is added in the transmitted frames. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga97c7393982d73ebddf326b37d16919d7a3576cf4afb9de41f2bf7bb5c98ced0b2" prot="public">
          <name>NRF_NFCT_TX_FRAME_CONFIG_DISCARD_START</name>
          <initializer>= NFCT_TXD_FRAMECONFIG_DISCARDMODE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicates whether unused bits are discarded at the start or at the end of the transmitted frames. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga97c7393982d73ebddf326b37d16919d7aed8fb9cd5b0d1465427358e090e4e8d5" prot="public">
          <name>NRF_NFCT_TX_FRAME_CONFIG_SOF</name>
          <initializer>= NFCT_TXD_FRAMECONFIG_SOF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicates whether SoF symbol is added in the transmitted frames. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga97c7393982d73ebddf326b37d16919d7a62f219deee0a27df88e30bf19c59cc22" prot="public">
          <name>NRF_NFCT_TX_FRAME_CONFIG_CRC16</name>
          <initializer>= NFCT_TXD_FRAMECONFIG_CRCMODETX_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicates whether CRC is added in the transmitted frames. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bit masks for NFC transmission frame configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="257" column="1" bodyfile="hal/nrf_nfct.h" bodystart="258" bodyend="263"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1ga098d18d71f23c372cb882402843ad005" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_rx_frame_config_t</name>
        <enumvalue id="group__nrf__nfct__hal_1gga098d18d71f23c372cb882402843ad005ad7937aabbe0a37c360afce216e41975b" prot="public">
          <name>NRF_NFCT_RX_FRAME_CONFIG_PARITY</name>
          <initializer>= NFCT_RXD_FRAMECONFIG_PARITY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicates whether parity is expected in the received frames. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga098d18d71f23c372cb882402843ad005a6e029ac2606bb161bcfc3070f0d0065f" prot="public">
          <name>NRF_NFCT_RX_FRAME_CONFIG_SOF</name>
          <initializer>= NFCT_RXD_FRAMECONFIG_SOF_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicates whether SoF symbol is expected in the received frames. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga098d18d71f23c372cb882402843ad005aff77f251657f93fcac538cffacd78a65" prot="public">
          <name>NRF_NFCT_RX_FRAME_CONFIG_CRC16</name>
          <initializer>= NFCT_RXD_FRAMECONFIG_CRCMODERX_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicates whether CRC is expected and checked in the received frames. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Bit masks for NFC reception frame configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="266" column="1" bodyfile="hal/nrf_nfct.h" bodystart="267" bodyend="271"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_sensres_nfcid1_size_t</name>
        <enumvalue id="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3caa0bc32a9e2449b0dfe353dbec523ae1c" prot="public">
          <name>NRF_NFCT_SENSRES_NFCID1_SIZE_SINGLE</name>
          <initializer>=
        NFCT_SENSRES_NFCIDSIZE_NFCID1Single &lt;&lt; NFCT_SENSRES_NFCIDSIZE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Single size NFCID1 (4 bytes). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3ca45acf8d2662418ed6212de2d3e176f07" prot="public">
          <name>NRF_NFCT_SENSRES_NFCID1_SIZE_DOUBLE</name>
          <initializer>=
        NFCT_SENSRES_NFCIDSIZE_NFCID1Double &lt;&lt; NFCT_SENSRES_NFCIDSIZE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Double size NFCID1 (7 bytes). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3ca3206de942de1e3d9238ce40fbcc96f24" prot="public">
          <name>NRF_NFCT_SENSRES_NFCID1_SIZE_TRIPLE</name>
          <initializer>=
        NFCT_SENSRES_NFCIDSIZE_NFCID1Triple &lt;&lt; NFCT_SENSRES_NFCIDSIZE_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Triple size NFCID1 (10 bytes). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3caa87b0717c00543df08613fd678750e43" prot="public">
          <name>NRF_NFCT_SENSRES_NFCID1_SIZE_DEFAULT</name>
          <initializer>=
        NFCT_SENSRES_NFCIDSIZE_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Default size. Use this option to leave NFCID1 size unchanged. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>&apos;NFCI1 size&apos; NFC field configuration for the SENS_RES frame according to the NFC Forum Digital Protocol Technical Specification. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="277" column="1" bodyfile="hal/nrf_nfct.h" bodystart="278" bodyend="287"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1ga0a21c500bdf07fbd27a8c1a638302f45" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_sensres_bit_frame_sdd_t</name>
        <enumvalue id="group__nrf__nfct__hal_1gga0a21c500bdf07fbd27a8c1a638302f45aedb5cb6edca19ef9e96d3c0d69e4eb08" prot="public">
          <name>NRF_NFCT_SENSRES_BIT_FRAME_SDD_00000</name>
          <initializer>=
        NFCT_SENSRES_BITFRAMESDD_SDD00000 &lt;&lt; NFCT_SENSRES_BITFRAMESDD_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SDD pattern 00000. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a21c500bdf07fbd27a8c1a638302f45ab959e056e53ab06f1248cbf2c7353efb" prot="public">
          <name>NRF_NFCT_SENSRES_BIT_FRAME_SDD_00001</name>
          <initializer>=
        NFCT_SENSRES_BITFRAMESDD_SDD00001 &lt;&lt; NFCT_SENSRES_BITFRAMESDD_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SDD pattern 00001. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a21c500bdf07fbd27a8c1a638302f45ade18f8ec88ca410cda3590d8567ad311" prot="public">
          <name>NRF_NFCT_SENSRES_BIT_FRAME_SDD_00010</name>
          <initializer>=
        NFCT_SENSRES_BITFRAMESDD_SDD00010 &lt;&lt; NFCT_SENSRES_BITFRAMESDD_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SDD pattern 00010. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a21c500bdf07fbd27a8c1a638302f45ae2c5adf46cbcd6fd85627816ff2460bc" prot="public">
          <name>NRF_NFCT_SENSRES_BIT_FRAME_SDD_00100</name>
          <initializer>=
        NFCT_SENSRES_BITFRAMESDD_SDD00100 &lt;&lt; NFCT_SENSRES_BITFRAMESDD_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SDD pattern 00100. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a21c500bdf07fbd27a8c1a638302f45a87b8246de600132bb3cc76d8a4bb7f33" prot="public">
          <name>NRF_NFCT_SENSRES_BIT_FRAME_SDD_01000</name>
          <initializer>=
        NFCT_SENSRES_BITFRAMESDD_SDD01000 &lt;&lt; NFCT_SENSRES_BITFRAMESDD_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SDD pattern 01000. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga0a21c500bdf07fbd27a8c1a638302f45adfe197aed14da11a49af43c66a6e39f9" prot="public">
          <name>NRF_NFCT_SENSRES_BIT_FRAME_SDD_10000</name>
          <initializer>=
        NFCT_SENSRES_BITFRAMESDD_SDD10000 &lt;&lt; NFCT_SENSRES_BITFRAMESDD_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SDD pattern 10000. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>&apos;Bit frame SDD&apos; NFC field configuration for the SENS_RES frame according to the NFC Forum Digital Protocol Technical Specification. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="302" column="1" bodyfile="hal/nrf_nfct.h" bodystart="303" bodyend="316"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1gac3dad0d77b9f35fea328bbdd91cc0b02" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_sensres_platform_config_t</name>
        <enumvalue id="group__nrf__nfct__hal_1ggac3dad0d77b9f35fea328bbdd91cc0b02a7b6cda6fd291bb76f900073cad31865f" prot="public">
          <name>NRF_NFCT_SENSRES_PLATFORM_CONFIG_T1T</name>
          <initializer>= 6 &lt;&lt; NFCT_SENSRES_PLATFCONFIG_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>SENS_RES &apos;Platform Config&apos; field (b4-b1) value for Type 1 Tag platform. SENS_RES &apos;Platform Config&apos; field (b7-b6) value for any platform except Type 1 Tag platform. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1ggac3dad0d77b9f35fea328bbdd91cc0b02a6a58fde009f7b3e03b4c3e65aedbc19b" prot="public">
          <name>NRF_NFCT_SENSRES_PLATFORM_CONFIG_OTHER</name>
          <initializer>= 0 &lt;&lt; NFCT_SENSRES_PLATFCONFIG_Pos</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>&apos;Platofrm Config&apos; NFC field configuration for the SENS_RES frame according to the NFC Forum Digital Protocol Technical Specification. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="322" column="1" bodyfile="hal/nrf_nfct.h" bodystart="323" bodyend="328"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1ga184ca02cc782ae566ecef8389e1d7ca7" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_selres_protocol_t</name>
        <enumvalue id="group__nrf__nfct__hal_1gga184ca02cc782ae566ecef8389e1d7ca7a0e8d1a350e8edfbb84e3c73a8bb689dc" prot="public">
          <name>NRF_NFCT_SELRES_PROTOCOL_T2T</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type 2 Tag platform. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga184ca02cc782ae566ecef8389e1d7ca7a28699c3283afbf2cae664edb708569d3" prot="public">
          <name>NRF_NFCT_SELRES_PROTOCOL_T4AT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type 4A Tag platform. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga184ca02cc782ae566ecef8389e1d7ca7a237bfcd615e81de0caeee6a68550fb7f" prot="public">
          <name>NRF_NFCT_SELRES_PROTOCOL_NFCDEP</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NFC-DEP Protocol. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga184ca02cc782ae566ecef8389e1d7ca7aec03f9060de8c96de015e8c4275f08fb" prot="public">
          <name>NRF_NFCT_SELRES_PROTOCOL_NFCDEP_T4AT</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>NFC-DEP Protocol and Type 4A Tag platform). </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Protocol NFC field (bits b7 and b6) configuration for the SEL_RES frame according to the NFC Forum Digital Protocol Technical Specification. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="334" column="1" bodyfile="hal/nrf_nfct.h" bodystart="335" bodyend="340"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__nfct__hal_1ga573f6e234b255f96cfa9516c5297345b" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_nfct_modulation_ctrl_t</name>
        <enumvalue id="group__nrf__nfct__hal_1gga573f6e234b255f96cfa9516c5297345ba25ca89aa77bb9c9c497c26f77e4354a2" prot="public">
          <name>NRF_NFCT_MODULATION_CTRL_INVALID</name>
          <initializer>= NFCT_MODULATIONCTRL_MODULATIONCTRL_Invalid</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Invalid configuration. Defaults to the same behavior as NRF_NFCT_MODULATION_CTRL_INTERNAL. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga573f6e234b255f96cfa9516c5297345ba00d46a8747e0acf55d9d272a0107eab7" prot="public">
          <name>NRF_NFCT_MODULATION_CTRL_INTERNAL</name>
          <initializer>= NFCT_MODULATIONCTRL_MODULATIONCTRL_Internal</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use internal modulator only. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga573f6e234b255f96cfa9516c5297345ba87516836bdb7e745c8458e2fc7416536" prot="public">
          <name>NRF_NFCT_MODULATION_CTRL_GPIO</name>
          <initializer>= NFCT_MODULATIONCTRL_MODULATIONCTRL_ModToGpio</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Transmit output digital modulation signal to a GPIO pin. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__nfct__hal_1gga573f6e234b255f96cfa9516c5297345ba52cd83a27d5f4fc1983a537a5e636478" prot="public">
          <name>NRF_NFCT_MODULATION_CTRL_INTERNAL_GPIO</name>
          <initializer>= NFCT_MODULATIONCTRL_MODULATIONCTRL_InternalAndModToGpio</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use internal modulator and transmit output digital modulation signal to a GPIO pin. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Modulation output configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="344" column="1" bodyfile="hal/nrf_nfct.h" bodystart="345" bodyend="350"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga79ca17491a7ab505d2caf331f2b45c45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_task_trigger</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, nrf_nfct_task_t task)</argsstring>
        <name>nrf_nfct_task_trigger</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1ga90998750300456aedbce0700a9df232a" kindref="member">nrf_nfct_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating a specific NFCT task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1028" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1028" bodyend="1031" declfile="hal/nrf_nfct.h" declline="359" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gaa0b23785c9a3fc0b0a94b03505293154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nfct_task_address_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg, nrf_nfct_task_t task)</argsstring>
        <name>nrf_nfct_task_address_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1ga90998750300456aedbce0700a9df232a" kindref="member">nrf_nfct_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of a specific NFCT task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Task address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1033" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1033" bodyend="1037" declfile="hal/nrf_nfct.h" declline="369" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gac8d0986e227f0414b1aa3a0fb58f0628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_event_clear</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, nrf_nfct_event_t event)</argsstring>
        <name>nrf_nfct_event_clear</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1ga0a44934a729ad8469a53a65318e8402d" kindref="member">nrf_nfct_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing a specific event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1039" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1039" bodyend="1043" declfile="hal/nrf_nfct.h" declline="378" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga9e50defad8a4cd3d018851756684dc68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_nfct_event_check</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg, nrf_nfct_event_t event)</argsstring>
        <name>nrf_nfct_event_check</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1ga0a44934a729ad8469a53a65318e8402d" kindref="member">nrf_nfct_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the NFCT event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1045" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1045" bodyend="1048" declfile="hal/nrf_nfct.h" declline="389" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga7e8a659e4d03a530c9922cf4ac26bc3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nfct_event_address_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg, nrf_nfct_event_t event)</argsstring>
        <name>nrf_nfct_event_address_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1ga0a44934a729ad8469a53a65318e8402d" kindref="member">nrf_nfct_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of a specific NFCT event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1050" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1050" bodyend="1054" declfile="hal/nrf_nfct.h" declline="399" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga4487623556dab1c328e34ff96395156d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_shorts_enable</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint32_t short_mask)</argsstring>
        <name>nrf_nfct_shorts_enable</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>short_mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling selected shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">short_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1056" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1056" bodyend="1059" declfile="hal/nrf_nfct.h" declline="408" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga0fe39dd786e8f19f214501cbec466e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_shorts_disable</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint32_t short_mask)</argsstring>
        <name>nrf_nfct_shorts_disable</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>short_mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling selected shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">short_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1061" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1061" bodyend="1064" declfile="hal/nrf_nfct.h" declline="416" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga3585ee24da28125f6d59cb7e2b0f8bc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nfct_shorts_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_shorts_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the enabled shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Flags of the currently enabled shortcuts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1066" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1066" bodyend="1069" declfile="hal/nrf_nfct.h" declline="425" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga3dc3d589230f0f22f13745fbfd0cd5dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_shorts_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint32_t short_mask)</argsstring>
        <name>nrf_nfct_shorts_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>short_mask</declname>
        </param>
        <briefdescription>
<para>Function for setting shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">short_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcut mask. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1071" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1071" bodyend="1074" declfile="hal/nrf_nfct.h" declline="433" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga083b58b924c781b8ea9b7a901e5c8d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_int_enable</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_nfct_int_enable</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the selected interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__nfct__hal_1gad16e86051bee49a907048aae86da2ee7" kindref="member">nrf_nfct_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1076" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1076" bodyend="1079" declfile="hal/nrf_nfct.h" declline="442" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga40870c355963e7a61354adc085b8c132" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nfct_int_enable_check</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_nfct_int_enable_check</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__nfct__hal_1gad16e86051bee49a907048aae86da2ee7" kindref="member">nrf_nfct_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1081" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1081" bodyend="1084" declfile="hal/nrf_nfct.h" declline="453" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga60fdd94f14ad586f5de1fd2a607c2fa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nfct_int_enable_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_int_enable_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the information about enabled interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flags of the enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1086" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1086" bodyend="1089" declfile="hal/nrf_nfct.h" declline="462" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga692fcd9a52ebdb75ed137cc29f06d04c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_int_disable</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_nfct_int_disable</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the selected interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__nfct__hal_1gad16e86051bee49a907048aae86da2ee7" kindref="member">nrf_nfct_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1091" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1091" bodyend="1094" declfile="hal/nrf_nfct.h" declline="471" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gadee0eef3c3cfe89e730dded70de30eae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_mod_ctrl_pin_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint32_t mod_ctrl_pin)</argsstring>
        <name>nrf_nfct_mod_ctrl_pin_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mod_ctrl_pin</declname>
        </param>
        <briefdescription>
<para>Function for configuring the NFCT modulation control pin. </para>
        </briefdescription>
        <detaileddescription>
<para>If a given signal is not needed, pass the <ref refid="group__nrf__nfct__hal_1ga9b144c59c9de8f9297ca2549c80380df" kindref="member">NRF_NFCT_MOD_CTRL_PIN_NOT_CONNECTED</ref> value instead of its pin number.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mod_ctrl_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>Modulation control pin. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1097" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1097" bodyend="1100" declfile="hal/nrf_nfct.h" declline="483" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga4e9255d4da9a6ce15d8d3d9d179412b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nfct_mod_ctrl_pin_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_mod_ctrl_pin_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the modulation control pin selection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Modulation control pin selection. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1102" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1102" bodyend="1105" declfile="hal/nrf_nfct.h" declline="492" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gaa579590b5349be09002fac3c45bc4b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_modulation_output_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, nrf_nfct_modulation_ctrl_t mod_ctrl)</argsstring>
        <name>nrf_nfct_modulation_output_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1ga573f6e234b255f96cfa9516c5297345b" kindref="member">nrf_nfct_modulation_ctrl_t</ref></type>
          <declname>mod_ctrl</declname>
        </param>
        <briefdescription>
<para>Function for setting the modulation output. It enables the output to a GPIO pin which can be connected to a second external. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mod_ctrl</parametername>
</parameternamelist>
<parameterdescription>
<para>Modulation control field configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1109" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1109" bodyend="1113" declfile="hal/nrf_nfct.h" declline="503" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gab54602dea9536f30f146acd7c044f700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__nfct__hal_1ga573f6e234b255f96cfa9516c5297345b" kindref="member">nrf_nfct_modulation_ctrl_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_nfct_modulation_ctrl_t nrf_nfct_modulation_output_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_modulation_output_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the modulation output configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The configured modulation output. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1116" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1116" bodyend="1120" declfile="hal/nrf_nfct.h" declline="514" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gae885af4d5554fc9011d4fa7a7b48887a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nfct_error_status_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_error_status_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the NFCT error status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The NFCT error status flags, defined in <ref refid="group__nrf__nfct__hal_1gad99ea387f1db326f48ed88cd87ce029e" kindref="member">nrf_nfct_error_status_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1123" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1123" bodyend="1126" declfile="hal/nrf_nfct.h" declline="524" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga87592076f3fe8deb67a9051eab3cb9a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_error_status_clear</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint32_t error_flag)</argsstring>
        <name>nrf_nfct_error_status_clear</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>error_flag</declname>
        </param>
        <briefdescription>
<para>Function for clearing the NFCT error status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">error_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Error flags to be cleared, defined in <ref refid="group__nrf__nfct__hal_1gad99ea387f1db326f48ed88cd87ce029e" kindref="member">nrf_nfct_error_status_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1128" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1128" bodyend="1131" declfile="hal/nrf_nfct.h" declline="532" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga4df45a5ae798f487f02b7a9b492b4def" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nfct_rx_frame_status_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_rx_frame_status_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the NFC frame reception status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flags of the NFC frame reception status, defined in <ref refid="group__nrf__nfct__hal_1ga932b29507cd5521c30732e467b9d59a4" kindref="member">nrf_nfct_rx_frame_status_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1133" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1133" bodyend="1136" declfile="hal/nrf_nfct.h" declline="541" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga71053304120e72fece9d5aa975d38ea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_rx_frame_status_clear</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint32_t framestatus_flags)</argsstring>
        <name>nrf_nfct_rx_frame_status_clear</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>framestatus_flags</declname>
        </param>
        <briefdescription>
<para>Function for clearing the NFC frame reception status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">framestatus_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Status flags to be cleared, defined in <ref refid="group__nrf__nfct__hal_1ga932b29507cd5521c30732e467b9d59a4" kindref="member">nrf_nfct_rx_frame_status_t</ref>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1138" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1138" bodyend="1142" declfile="hal/nrf_nfct.h" declline="550" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga3bdf972ded34bf3ceba3e7f2586a68fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__nfct__hal_1gad41c75935da91df206b39337d615780d" kindref="member">nrf_nfct_tag_state_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_nfct_tag_state_t nrf_nfct_tag_state_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_tag_state_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the NFC tag state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_NFCT_TAG_STATE_DISABLED</parametername>
</parameternamelist>
<parameterdescription>
<para>NFC tag is disabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_NFCT_TAG_STATE_RAMP_UP</parametername>
</parameternamelist>
<parameterdescription>
<para>NFC tag is ramping up. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_NFCT_TAG_STATE_IDLE</parametername>
</parameternamelist>
<parameterdescription>
<para>NFC tag is activated and idle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_NFCT_TAG_STATE_RECEIVE</parametername>
</parameternamelist>
<parameterdescription>
<para>NFC tag is receiving data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_NFCT_TAG_STATE_FRAME_DELAY</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame Delay Timer of the NFC tag is counting ticks since the last symbol of the last received frame. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_NFCT_TAG_STATE_TRANSMIT</parametername>
</parameternamelist>
<parameterdescription>
<para>NFC tag is transmitting data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1145" column="40" bodyfile="hal/nrf_nfct.h" bodystart="1145" bodyend="1149" declfile="hal/nrf_nfct.h" declline="567" declcolumn="40"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga3cd109684521662e9304a5f8e007f79b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__nfct__hal_1gaed596f092cc3971acade2458023e3c3a" kindref="member">nrf_nfct_sleep_state_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_nfct_sleep_state_t nrf_nfct_sleep_state_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_sleep_state_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the NFC tag sleep state during the automatic collision resolution. </para>
        </briefdescription>
        <detaileddescription>
<para>The returned value is the last state before the autimatic collision resolution started.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRF_NFCT_SLEEP_STATE_IDLE</parametername>
</parameternamelist>
<parameterdescription>
<para>NFC tag was in IDLE state before the automatic collision resolution started. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRF_NFCT_SLEEP_STATE_SLEEP_A</parametername>
</parameternamelist>
<parameterdescription>
<para>NFC tag was in SLEEP_A state before the automatic collision resolution started. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1153" column="42" bodyfile="hal/nrf_nfct.h" bodystart="1153" bodyend="1157" declfile="hal/nrf_nfct.h" declline="583" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga0d8d523a9ee9099f602643eaff69ee41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_nfct_field_status_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_field_status_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the status of the external NFC field detection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The NFC field detection status. Status bits can be checked by using <ref refid="group__nrf__nfct__hal_1gac45bf9d9a9f138385c799a7273a64248" kindref="member">nrf_nfct_field_state_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1160" column="27" bodyfile="hal/nrf_nfct.h" bodystart="1160" bodyend="1163" declfile="hal/nrf_nfct.h" declline="594" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gafe66d96e4f86347fbdc01516d55b3e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_nfct_frame_delay_min_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_frame_delay_min_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the minimum Frame Delay Time value. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the minimum value for Frame Delay Timer. It controls the shortest time between the last symbol of the last received frame and the start of the transmission of a new TX frame.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The minimum Frame Delay Time value in 13.56-MHz clock ticks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1165" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1165" bodyend="1169" declfile="hal/nrf_nfct.h" declline="607" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga9778ee30876a8100798529972b0eedae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_frame_delay_min_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint16_t frame_delay_min)</argsstring>
        <name>nrf_nfct_frame_delay_min_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>frame_delay_min</declname>
        </param>
        <briefdescription>
<para>Function for setting the minimum Frame Delay Time value. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the minimum value for Frame Delay Timer. It controls the shortest time between the last symbol of the last received frame and the start of the transmission of a new TX frame.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frame_delay_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum Frame Delay Time value in 13.56-MHz clock ticks. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1171" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1171" bodyend="1176" declfile="hal/nrf_nfct.h" declline="619" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga6ba009cc5c44a921574e8f2f6510b3d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nfct_frame_delay_max_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_frame_delay_max_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the maximum Frame Delay Time value. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the maximum value for Frame Delay Timer. It controls the longest time between the last symbol of the last received frame and the start of the transmission of a new TX frame. If no transmission starts before the Frame Delay Timer timeout, <ref refid="group__nrf__nfct__hal_1ggad99ea387f1db326f48ed88cd87ce029ea2bfaf8571fdb161f9ef566f14fdfd7c6" kindref="member">NRF_NFCT_ERROR_FRAMEDELAYTIMEOUT_MASK</ref> is set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The maximum Frame Delay Time value in 13.56-MHz clock ticks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1178" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1178" bodyend="1182" declfile="hal/nrf_nfct.h" declline="634" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gaaa3a9a207112ed2c58567c22b300dc51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_frame_delay_max_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint32_t frame_delay_max)</argsstring>
        <name>nrf_nfct_frame_delay_max_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>frame_delay_max</declname>
        </param>
        <briefdescription>
<para>Function for setting the maximum Frame Delay Time value. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the maximum value for Frame Delay Timer. It controls the longest time between the last symbol of the last received frame and the start of the transmission of a new TX frame. If no transmission starts before the Frame Delay Timer timeout, <ref refid="group__nrf__nfct__hal_1ggad99ea387f1db326f48ed88cd87ce029ea2bfaf8571fdb161f9ef566f14fdfd7c6" kindref="member">NRF_NFCT_ERROR_FRAMEDELAYTIMEOUT_MASK</ref> is set.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frame_delay_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum Frame Delay Time value in 13.56-MHz clock ticks. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1184" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1184" bodyend="1189" declfile="hal/nrf_nfct.h" declline="647" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga1f44a3c0ca480bf85a37364857ef2225" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__nfct__hal_1ga440398a7c43c28c619f2326cf0d48408" kindref="member">nrf_nfct_frame_delay_mode_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_nfct_frame_delay_mode_t nrf_nfct_frame_delay_mode_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_frame_delay_mode_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the Frame Delay Mode configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The configured Frame Delay Mode. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1192" column="29" bodyfile="hal/nrf_nfct.h" bodystart="1192" bodyend="1196" declfile="hal/nrf_nfct.h" declline="658" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga2e5ec700490c0c74547e7bf9f595f566" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_frame_delay_mode_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, nrf_nfct_frame_delay_mode_t frame_delay_mode)</argsstring>
        <name>nrf_nfct_frame_delay_mode_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1ga440398a7c43c28c619f2326cf0d48408" kindref="member">nrf_nfct_frame_delay_mode_t</ref></type>
          <declname>frame_delay_mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the NFC Frame Delay Mode configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frame_delay_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame Delay Mode configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1198" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1198" bodyend="1202" declfile="hal/nrf_nfct.h" declline="666" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga37516865767004071c729500413c989c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t *</type>
        <definition>NRF_STATIC_INLINE uint8_t * nrf_nfct_rxtx_buffer_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_rxtx_buffer_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the NFCT RX/TX buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The configured pointer to the receive or transmit buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1204" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1204" bodyend="1207" declfile="hal/nrf_nfct.h" declline="676" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga11064ed7f1e9e9dd51f2da645f2e3153" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_rxtx_buffer_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint8_t *p_rxtx_buf, uint16_t max_txrx_len)</argsstring>
        <name>nrf_nfct_rxtx_buffer_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>p_rxtx_buf</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>max_txrx_len</declname>
        </param>
        <briefdescription>
<para>Function for setting the the NFCT RX/TX buffer (address and maximum length). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Buffer for the NFC RX/TX data is used by EasyDMA and must be located in RAM.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_rxtx_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the receive or transmit buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_txrx_len</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum receive or transmit length in bytes (size of the RAM buffer for EasyDMA). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1209" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1209" bodyend="1215" declfile="hal/nrf_nfct.h" declline="688" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gaab957ec795c0a1a5c89ed7c8b5ffa08b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_nfct_max_rxtx_length_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_max_rxtx_length_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the NFCT RX/TX maximum buffer length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The configured maximum receive or transmit length in bytes (size of the RX/TX buffer for EasyDMA). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1217" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1217" bodyend="1220" declfile="hal/nrf_nfct.h" declline="700" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga315921e064488658728101a955164691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_nfct_tx_frame_config_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_tx_frame_config_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the flags for NFC frame transmission configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flags of the NFCT frame transmission configuration, defined in <ref refid="group__nrf__nfct__hal_1ga97c7393982d73ebddf326b37d16919d7" kindref="member">nrf_nfct_tx_frame_config_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1222" column="27" bodyfile="hal/nrf_nfct.h" bodystart="1222" bodyend="1225" declfile="hal/nrf_nfct.h" declline="710" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga6c7dd65d09a963e920005015be39343a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_tx_frame_config_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint8_t flags)</argsstring>
        <name>nrf_nfct_tx_frame_config_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Function for setting up the flags of the NFC frame transmission configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags for NFCT TX configuration. Use <ref refid="group__nrf__nfct__hal_1ga97c7393982d73ebddf326b37d16919d7" kindref="member">nrf_nfct_tx_frame_config_t</ref> for setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1227" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1227" bodyend="1230" declfile="hal/nrf_nfct.h" declline="719" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga43a2addb4400bf65e0458f71c1d17a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_nfct_tx_bits_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_tx_bits_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the length of the configured transmission frame. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>NFC frames do not have to consist of full bytes only, therefore data amount for transmission is configured in number of bits.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bits to be sent excluding CRC, parity, SoF, and EoF. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1232" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1232" bodyend="1236" declfile="hal/nrf_nfct.h" declline="731" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gadf4e35817a76e539d25ef3112278f13b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_tx_bits_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint16_t tx_bits)</argsstring>
        <name>nrf_nfct_tx_bits_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>tx_bits</declname>
        </param>
        <briefdescription>
<para>Function for setting up the NFC frame transmission. </para>
        </briefdescription>
        <detaileddescription>
<para>Set the number of TX bits excluding CRC, parity, SoF, and EoF.</para>
<para><simplesect kind="note"><para>Source of data for transmission is set by using <ref refid="group__nrf__nfct__hal_1ga11064ed7f1e9e9dd51f2da645f2e3153" kindref="member">nrf_nfct_rxtx_buffer_set</ref>. </para>
</simplesect>
<simplesect kind="note"><para>NFC frames do not have to consist of full bytes only, therefore data amount for transmission is configured in number of bits.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tx_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Overall number of bits to be sent. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1238" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1238" bodyend="1242" declfile="hal/nrf_nfct.h" declline="745" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gaae9ea4c1cbaa9f17a225647092b86e2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_nfct_rx_frame_config_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_rx_frame_config_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the flags of the NFC frame reception configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The flags for NFCT frame reception configuration, defined in <ref refid="group__nrf__nfct__hal_1ga098d18d71f23c372cb882402843ad005" kindref="member">nrf_nfct_rx_frame_config_t</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1244" column="27" bodyfile="hal/nrf_nfct.h" bodystart="1244" bodyend="1247" declfile="hal/nrf_nfct.h" declline="755" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga8faba62001014de0fdb87babcd99e6f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_rx_frame_config_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint8_t flags)</argsstring>
        <name>nrf_nfct_rx_frame_config_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Function for setting up the NFC frame reception. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Destination for the received data is set using <ref refid="group__nrf__nfct__hal_1ga11064ed7f1e9e9dd51f2da645f2e3153" kindref="member">nrf_nfct_rxtx_buffer_set</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>NFCT RX configuration flags. Use <ref refid="group__nrf__nfct__hal_1ga098d18d71f23c372cb882402843ad005" kindref="member">nrf_nfct_rx_frame_config_t</ref> for setting the desired configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1249" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1249" bodyend="1252" declfile="hal/nrf_nfct.h" declline="766" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gaa2736d34816f988d3a0635e26486db97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_nfct_rx_bits_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg, bool crc_excluded)</argsstring>
        <name>nrf_nfct_rx_bits_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>crc_excluded</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of bits received from the NFC poller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">crc_excluded</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag for excluding CRC size from calculation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of received bits including or excluding CRC, and excluding parity and SoF/EoF framing. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; CRC size in bytes.</para>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1254" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1254" bodyend="1259" declfile="hal/nrf_nfct.h" declline="777" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gaafe6bb2ce4b1cd23027b772e36238879" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_nfct_sensres_nfcid1_size_t nrf_nfct_nfcid1_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg, uint8_t *p_nfcid1_buf)</argsstring>
        <name>nrf_nfct_nfcid1_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>p_nfcid1_buf</declname>
        </param>
        <briefdescription>
<para>Function for getting the NFCID1 (NFC tag identifier). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function always returns the full configuration of the NFCID1 setting (10 bytes), regardless of the NFCID1 size. The NFCID1 size can be configured using <ref refid="group__nrf__nfct__hal_1gaccb08875b749f22abf8dcaa00a1ae891" kindref="member">nrf_nfct_sensres_nfcid1_size_set</ref> or <ref refid="group__nrf__nfct__hal_1ga08032af670d283b99056a9c476a63213" kindref="member">nrf_nfct_nfcid1_set</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_nfcid1_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer for the NDFCID1 parameter. The NFCID1 values are in little endian order, that is: |NFCID1_3RD_LAST|NFCID1_2ND_LAST|NFCID1_LAST|.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Configured NFCID1 length </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1262" column="32" bodyfile="hal/nrf_nfct.h" bodystart="1262" bodyend="1305" declfile="hal/nrf_nfct.h" declline="794" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga08032af670d283b99056a9c476a63213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_nfcid1_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint8_t const *p_nfcid1_buf, nrf_nfct_sensres_nfcid1_size_t nfcid1_size)</argsstring>
        <name>nrf_nfct_nfcid1_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>p_nfcid1_buf</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref></type>
          <declname>nfcid1_size</declname>
        </param>
        <briefdescription>
<para>Function for setting the NFCID1 (NFC tag identifier). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function also configures the NFCIDSIZE field in the SENSRES register of the NFCT peripheral.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_nfcid1_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer with NDFCID1 bytes. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nfcid1_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the NFCID1 in bytes. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1307" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1307" bodyend="1351" declfile="hal/nrf_nfct.h" declline="807" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga3f50dadcea361820f3ad134bfd85e3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_nfct_autocolres_is_enabled</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_autocolres_is_enabled</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the setting for the automatic collision resolution. </para>
        </briefdescription>
        <detaileddescription>
<para>The automatic collision resolution mechanism as defined in ISO 14443-3 and NFC Forum Digital Protocol Technical Specification 2.0, section 6.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If automatic collision resolution is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>If automatic collision resolution is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1354" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1354" bodyend="1358" declfile="hal/nrf_nfct.h" declline="823" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gae5bb4dbf61bf182bae90d030d2dc1b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_autocolres_enable</definition>
        <argsstring>(NRF_NFCT_Type *p_reg)</argsstring>
        <name>nrf_nfct_autocolres_enable</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the automatic collision resolution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The automatic collision resolution mechanism as defined in ISO 14443-3 and NFC Forum Digital Protocol Technical Specification 2.0, section 6. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1360" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1360" bodyend="1365" declfile="hal/nrf_nfct.h" declline="833" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gaeaa0ee17b9bac6459e37de5590c5053f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_autocolres_disable</definition>
        <argsstring>(NRF_NFCT_Type *p_reg)</argsstring>
        <name>nrf_nfct_autocolres_disable</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the automatic collision resolution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
The automatic collision resolution mechanism as defined in ISO 14443-3 and NFC Forum Digital Protocol Technical Specification 2.0, section 6. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1367" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1367" bodyend="1372" declfile="hal/nrf_nfct.h" declline="843" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gac42dc4d4d429ab437bf80ebec1a386bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_nfct_sensres_nfcid1_size_t nrf_nfct_sensres_nfcid1_size_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_sensres_nfcid1_size_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the NFCID1 size from the SENS_RES frame configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>The SENS_RES frame is handled automatically by the NFCT hardware.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NFCID1 (tag identifier) size. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1376" column="32" bodyfile="hal/nrf_nfct.h" bodystart="1376" bodyend="1379" declfile="hal/nrf_nfct.h" declline="856" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gaccb08875b749f22abf8dcaa00a1ae891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_sensres_nfcid1_size_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, nrf_nfct_sensres_nfcid1_size_t nfcid1_size)</argsstring>
        <name>nrf_nfct_sensres_nfcid1_size_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref></type>
          <declname>nfcid1_size</declname>
        </param>
        <briefdescription>
<para>Function for setting the NFCID1 (tag identifier) size.field in the SENS_RES frame configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The SENS_RES frame is handled automatically by the NFCT hardware.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nfcid1_size</parametername>
</parameternamelist>
<parameterdescription>
<para>NFCID1 (tag identifier) size.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__nfct__hal_1ga08032af670d283b99056a9c476a63213" kindref="member">nrf_nfct_nfcid1_set()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1381" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1381" bodyend="1386" declfile="hal/nrf_nfct.h" declline="870" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga82714bc15f7655ab7dfbb496805ad424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__nfct__hal_1ga0a21c500bdf07fbd27a8c1a638302f45" kindref="member">nrf_nfct_sensres_bit_frame_sdd_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_nfct_sensres_bit_frame_sdd_t nrf_nfct_sensres_bit_frame_sdd_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_sensres_bit_frame_sdd_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the Bit Frame SDD field from the SENS_RES frame configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>The SENS_RES frame is handled automatically by the NFCT hardware.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Bit Frame SDD field configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1389" column="34" bodyfile="hal/nrf_nfct.h" bodystart="1389" bodyend="1392" declfile="hal/nrf_nfct.h" declline="883" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga68e3f17113189c55c33f276badfc0722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_sensres_bit_frame_sdd_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, nrf_nfct_sensres_bit_frame_sdd_t bit_frame_sdd)</argsstring>
        <name>nrf_nfct_sensres_bit_frame_sdd_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1ga0a21c500bdf07fbd27a8c1a638302f45" kindref="member">nrf_nfct_sensres_bit_frame_sdd_t</ref></type>
          <declname>bit_frame_sdd</declname>
        </param>
        <briefdescription>
<para>Function for setting the Bit Frame SDD field in the SENS_RES frame configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The SENS_RES frame is handled automatically by the NFCT hardware.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bit_frame_sdd</parametername>
</parameternamelist>
<parameterdescription>
<para>The Bit Frame SDD field configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1395" column="6" bodyfile="hal/nrf_nfct.h" bodystart="1395" bodyend="1399" declfile="hal/nrf_nfct.h" declline="894" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga7157d8b85ed1d9d6859ee3fa3fbb52af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__nfct__hal_1gac3dad0d77b9f35fea328bbdd91cc0b02" kindref="member">nrf_nfct_sensres_platform_config_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_nfct_sensres_platform_config_t nrf_nfct_sensres_platform_config_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_sensres_platform_config_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the Platform Config field from the SENS_RES frame configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>The SENS_RES frame is handled automatically by the NFCT hardware.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Platform Config field configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1402" column="36" bodyfile="hal/nrf_nfct.h" bodystart="1402" bodyend="1405" declfile="hal/nrf_nfct.h" declline="907" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gae25e43464231c4d4c280db7bebcd5b6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_sensres_platform_config_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, nrf_nfct_sensres_platform_config_t platform_config)</argsstring>
        <name>nrf_nfct_sensres_platform_config_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1gac3dad0d77b9f35fea328bbdd91cc0b02" kindref="member">nrf_nfct_sensres_platform_config_t</ref></type>
          <declname>platform_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the Platform Config field in the SENS_RES frame configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The SENS_RES frame is handled automatically by the NFCT hardware.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">platform_config</parametername>
</parameternamelist>
<parameterdescription>
<para>The Platform Config field configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1408" column="6" bodyfile="hal/nrf_nfct.h" bodystart="1408" bodyend="1413" declfile="hal/nrf_nfct.h" declline="918" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga5c9503e8c40d67c422a8dcf9ed0dff28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_nfct_selres_cascade_check</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_selres_cascade_check</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking the CASCADE bit of the SEL_RES frame. </para>
        </briefdescription>
        <detaileddescription>
<para>The CASCADE bit in the SEL_RES register is handled automatically by the NFCT hardware and indicates the status of the NFCID1 read operation to the NFC poller according to the NFC Forum Digital Protocol Speficiation 2.0, section 6.8.2.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>If NFCID1 read procedure is not complete. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>If NFCID1 read procedure is complete. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1415" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1415" bodyend="1418" declfile="hal/nrf_nfct.h" declline="933" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga5eca78bed4e42015b4af6d89eb288b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__nfct__hal_1ga184ca02cc782ae566ecef8389e1d7ca7" kindref="member">nrf_nfct_selres_protocol_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_nfct_selres_protocol_t nrf_nfct_selres_protocol_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_selres_protocol_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the Protocol field in the SEL_RES frame. </para>
        </briefdescription>
        <detaileddescription>
<para>The SEL_RES frame is handled automatically by the NFCT hardware.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of the Protocol field in the SEL_RES frame. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1421" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1421" bodyend="1425" declfile="hal/nrf_nfct.h" declline="945" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga761a688769bda6dac33596ba375c9e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_selres_protocol_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, nrf_nfct_selres_protocol_t sel_res_protocol)</argsstring>
        <name>nrf_nfct_selres_protocol_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__nfct__hal_1ga184ca02cc782ae566ecef8389e1d7ca7" kindref="member">nrf_nfct_selres_protocol_t</ref></type>
          <declname>sel_res_protocol</declname>
        </param>
        <briefdescription>
<para>Function for setting the Protocol field in the SEL_RES frame configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>The SEL_RES frame is handled automatically by the NFCT hardware.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sel_res_protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the Protocol field in the SEL_RES frame. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1427" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1427" bodyend="1432" declfile="hal/nrf_nfct.h" declline="955" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga8d7a711de7c19239c319516717daeb64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_nfct_selres_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_selres_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the SEL_RES frame configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>The SEL_RES frame is handled automatically by the NFCT hardware.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>SEL_RES frame configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1434" column="28" bodyfile="hal/nrf_nfct.h" bodystart="1434" bodyend="1437" declfile="hal/nrf_nfct.h" declline="967" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga3b3b320f098e79afbaaa83f239c42e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_selres_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, uint32_t selres)</argsstring>
        <name>nrf_nfct_selres_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>selres</declname>
        </param>
        <briefdescription>
<para>Function for setting the SEL_RES frame configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>The SEL_RES frame is handled automatically by the NFCT hardware.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">selres</parametername>
</parameternamelist>
<parameterdescription>
<para>SEL_RES frame configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1439" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1439" bodyend="1442" declfile="hal/nrf_nfct.h" declline="977" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga871e391e272696e982ccf2ab42d66087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_pad_config_enable_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, bool enable)</argsstring>
        <name>nrf_nfct_pad_config_enable_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for enabling or disabling the NFC pad configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>When the NFC pads are enabled, they are configured as the NFC antenna pins, and the NFC pins protection mechanism is enabled. When the NFC pads are disabled, they are configured as GPIO pins.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the NFC pads are to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1445" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1445" bodyend="1451" declfile="hal/nrf_nfct.h" declline="990" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1gaadb18c43aea711f4b6fcd7be0cdffbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_nfct_pad_config_enable_check</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg)</argsstring>
        <name>nrf_nfct_pad_config_enable_check</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking the NFC pads configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>When the NFC pads are enabled, they are configured as the NFC antenna pins, and the NFC pins protection mechanism is enabled. When the NFC pads are disabled, they are configured as GPIO pins.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>NFC pads are enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>NFC pads are disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1453" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1453" bodyend="1456" declfile="hal/nrf_nfct.h" declline="1004" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga9752f169298bde1eb999b7cee4638f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_bias_config_set</definition>
        <argsstring>(NRF_NFCT_Type *p_reg, nrf_nfct_bias_config_t const *p_bias_config)</argsstring>
        <name>nrf_nfct_bias_config_set</name>
        <param>
          <type>NRF_NFCT_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__nfct__bias__config__t" kindref="compound">nrf_nfct_bias_config_t</ref> const *</type>
          <declname>p_bias_config</declname>
        </param>
        <briefdescription>
<para>Function for setting the bias configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_bias_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of bias configuration parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1460" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1460" bodyend="1477" declfile="hal/nrf_nfct.h" declline="1014" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__nfct__hal_1ga7a54c231a83731dccf020275ae0b00c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_nfct_bias_config_get</definition>
        <argsstring>(NRF_NFCT_Type const *p_reg, nrf_nfct_bias_config_t *p_bias_config)</argsstring>
        <name>nrf_nfct_bias_config_get</name>
        <param>
          <type>NRF_NFCT_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__nfct__bias__config__t" kindref="compound">nrf_nfct_bias_config_t</ref> *</type>
          <declname>p_bias_config</declname>
        </param>
        <briefdescription>
<para>Function for getting the bias configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_bias_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with bias configuration parameters. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_nfct.h" line="1479" column="24" bodyfile="hal/nrf_nfct.h" bodystart="1479" bodyend="1495" declfile="hal/nrf_nfct.h" declline="1023" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2018<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_NFCT_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_nfct_hal<sp/>NFCT<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_nfct</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Hardware<sp/>access<sp/>layer<sp/>(HAL)<sp/>for<sp/>the<sp/>Near<sp/>Field<sp/>Communication<sp/>Tag<sp/>(NFCT)<sp/>peripheral.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_CRC_SIZE<sp/>2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CRC<sp/>size<sp/>in<sp/>bytes.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_DISABLE_ALL_INT<sp/>0xFFFFFFFF<sp/></highlight><highlight class="comment">/**&lt;<sp/>Value<sp/>to<sp/>disable<sp/>all<sp/>interrupts.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>value<sp/>can<sp/>be<sp/>used<sp/>as<sp/>a<sp/>parameter<sp/>for<sp/>the<sp/>@ref<sp/>nrf_nfct_mod_ctrl_pin_set</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>to<sp/>specify<sp/>that<sp/>a<sp/>given<sp/>NFCT<sp/>signal<sp/>(MODULATION<sp/>CONTROL)</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>not<sp/>be<sp/>connected<sp/>to<sp/>a<sp/>physical<sp/>pin.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_MOD_CTRL_PIN_NOT_CONNECTED<sp/><sp/>0xFFFFFFFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="61"><highlight class="comment">/**<sp/>@brief<sp/>Maximum<sp/>possible<sp/>value<sp/>of<sp/>NFCT<sp/>max<sp/>frame<sp/>delay.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_FRAME_DELAY_MAX_MAX_VALUE<sp/><sp/>NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Msk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NFCT_NFCID1_THIRDLAST_S_Pos)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="65"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>NFCID1<sp/>register<sp/>uses<sp/>new<sp/>layout.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCID1_HAS_NEW_LAYOUT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCID1_HAS_NEW_LAYOUT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NFCT_TASKS_STOPTX_TASKS_STOPTX_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>NFCT<sp/>STOPTX<sp/>event<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_STOPTX_TASK<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_STOPTX_TASK<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NFCT_MODULATIONPSEL_PIN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="79"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>pin<sp/>select<sp/>for<sp/>modulation<sp/>control<sp/>register<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_MODULATION_PSEL_REG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_MODULATION_PSEL_REG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NFCT_MODULATIONCTRL_MODULATIONCTRL_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>modulation<sp/>output<sp/>select<sp/>register<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_MODULATION_CTRL_REG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_MODULATION_CTRL_REG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NFCT_NFCTAGSTATE_NFCTAGSTATE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="93"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>current<sp/>operating<sp/>state<sp/>of<sp/>NFC<sp/>tag<sp/>register<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_TAG_STATE_REG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_TAG_STATE_REG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NFCT_SLEEPSTATE_SLEEPSTATE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="100"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>sleep<sp/>state<sp/>during<sp/>automatic<sp/>collision<sp/>resolution<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_SLEEP_STATE_REG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_SLEEP_STATE_REG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(NFCT_AUTOCOLRESCONFIG_MODE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>automatic<sp/>collision<sp/>resolution<sp/>control<sp/>register<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_AUTOCOLRES_CONFIG_REG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_AUTOCOLRES_CONFIG_REG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NFCT_PADCONFIG_ENABLE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="114"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>NFC<sp/>pad<sp/>configuration<sp/>register<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_PAD_CONFIG_REG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_PAD_CONFIG_REG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NFCT_BIASCFG_TRIMIBPSR_Msk)<sp/>||<sp/>defined(NFCT_BIASCFG_COARSEIBPSR_Msk)<sp/>||<sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(NFCT_BIASCFG_REFERENCEVOLTAGE_Msk)<sp/>||<sp/>defined(NFCT_BIASCFG_SPARE_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>NFC<sp/>bias<sp/>configuration<sp/>trim<sp/>register<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_BIAS_CONFIG_TRIM_REG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_NFCT_HAS_BIAS_CONFIG_TRIM_REG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment">/**<sp/>@brief<sp/>NFCT<sp/>tasks.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aa644a36bc8b24adbd7d591463d1869fd9" kindref="member">NRF_NFCT_TASK_ACTIVATE</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>TASKS_ACTIVATE),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Activate<sp/>the<sp/>NFCT<sp/>peripheral<sp/>for<sp/>the<sp/>incoming<sp/>and<sp/>outgoing<sp/>frames,<sp/>change<sp/>state<sp/>to<sp/>activated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aaacb8bebeb380ad8b584c69b0b88531ce" kindref="member">NRF_NFCT_TASK_DISABLE</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>TASKS_DISABLE),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Disable<sp/>the<sp/>NFCT<sp/>peripheral.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aad88a9df1a096cbdf6411946d09136a78" kindref="member">NRF_NFCT_TASK_SENSE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>TASKS_SENSE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Enable<sp/>the<sp/>NFC<sp/>sense<sp/>field<sp/>mode,<sp/>change<sp/>state<sp/>to<sp/>sense<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aa21ddbbcce3cb3cade429db73eb3a41f6" kindref="member">NRF_NFCT_TASK_STARTTX</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>TASKS_STARTTX),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Start<sp/>the<sp/>transmission<sp/>of<sp/>an<sp/>outgoing<sp/>frame,<sp/>change<sp/>state<sp/>to<sp/>transmit.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_STOPTX_TASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aa8d413524b7ced7627afcccc9147900d2" kindref="member">NRF_NFCT_TASK_STOPTX</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>TASKS_STOPTX),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Stop<sp/>an<sp/>issued<sp/>transmission<sp/>of<sp/>a<sp/>frame.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aa38f719b1a09760e677d5e64264a99ec2" kindref="member">NRF_NFCT_TASK_ENABLERXDATA</ref><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>TASKS_ENABLERXDATA),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Initialize<sp/>EasyDMA<sp/>for<sp/>receive.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aa6a3d9998064eb60aa371c095536fb687" kindref="member">NRF_NFCT_TASK_GOIDLE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>TASKS_GOIDLE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Force<sp/>state<sp/>machine<sp/>to<sp/>the<sp/>IDLE<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga90998750300456aedbce0700a9df232aae6df9bb05c3f5203cd1d6279deffe1aa" kindref="member">NRF_NFCT_TASK_GOSLEEP</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>TASKS_GOSLEEP),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Force<sp/>state<sp/>machine<sp/>to<sp/>the<sp/>SLEEP_A<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1ga90998750300456aedbce0700a9df232a" kindref="member">nrf_nfct_task_t</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment">/**<sp/>@brief<sp/>NFCT<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da5a97fb3d11f7a669c9c983b1a4b2f256" kindref="member">NRF_NFCT_EVENT_READY</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_READY),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>NFCT<sp/>peripheral<sp/>is<sp/>ready<sp/>to<sp/>receive<sp/>and<sp/>send<sp/>frames.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da1fc93a167fe1637cdfd97a0517d71524" kindref="member">NRF_NFCT_EVENT_FIELDDETECTED</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_FIELDDETECTED),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Remote<sp/>NFC<sp/>field<sp/>is<sp/>detected.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402daf2a6d543c8fa602f75d3507243201f4d" kindref="member">NRF_NFCT_EVENT_FIELDLOST</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_FIELDLOST),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Remote<sp/>NFC<sp/>field<sp/>is<sp/>lost.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402dad8ff1f0a1506948b58e381aced0abdf4" kindref="member">NRF_NFCT_EVENT_TXFRAMESTART</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_TXFRAMESTART),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>start<sp/>of<sp/>the<sp/>first<sp/>symbol<sp/>of<sp/>a<sp/>transmitted<sp/>frame.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da331cf91e0b0daf5f576d9eb1ac19d0a0" kindref="member">NRF_NFCT_EVENT_TXFRAMEEND</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_TXFRAMEEND),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>end<sp/>of<sp/>the<sp/>last<sp/>transmitted<sp/>on-air<sp/>symbol<sp/>of<sp/>a<sp/>frame.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da977ea18979b68831a6e4d9f36000907e" kindref="member">NRF_NFCT_EVENT_RXFRAMESTART</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_RXFRAMESTART),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>The<sp/>end<sp/>of<sp/>the<sp/>first<sp/>symbol<sp/>of<sp/>a<sp/>received<sp/>frame.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402dacfc750b984b73a2fa7d948bf6169edbb" kindref="member">NRF_NFCT_EVENT_RXFRAMEEND</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_RXFRAMEEND),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Received<sp/>data<sp/>was<sp/>checked<sp/>(CRC,<sp/>parity)<sp/>and<sp/>transferred<sp/>to<sp/>RAM,<sp/>and<sp/>EasyDMA<sp/>ended<sp/>accessing<sp/>the<sp/>RX<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da4e43b87802d528a562f8a986e0203ed3" kindref="member">NRF_NFCT_EVENT_ERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_ERROR),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>NFC<sp/>error<sp/>reported.<sp/>The<sp/>ERRORSTATUS<sp/>register<sp/>contains<sp/>details<sp/>on<sp/>the<sp/>source<sp/>of<sp/>the<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da65ccd2d0e78225028aca64e15ae6d23a" kindref="member">NRF_NFCT_EVENT_RXERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_RXERROR),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>NFC<sp/>RX<sp/>frame<sp/>error<sp/>reported.<sp/>The<sp/>FRAMESTATUS.RX<sp/>register<sp/>contains<sp/>details<sp/>on<sp/>the<sp/>source<sp/>of<sp/>the<sp/>error.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402dac2c6402be49b55642879a66ba7ade991" kindref="member">NRF_NFCT_EVENT_ENDRX</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_ENDRX),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>RX<sp/>buffer<sp/>(as<sp/>defined<sp/>by<sp/>PACKETPTR<sp/>and<sp/>MAXLEN)<sp/>in<sp/>Data<sp/>RAM<sp/>full.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da15ef6d0431f51b4894049a41306d6c70" kindref="member">NRF_NFCT_EVENT_ENDTX</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_ENDTX),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Transmission<sp/>of<sp/>data<sp/>in<sp/>RAM<sp/>ended,<sp/>and<sp/>EasyDMA<sp/>ended<sp/>accessing<sp/>the<sp/>TX<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da5907d2dd2dc898edfb13231aaebb2739" kindref="member">NRF_NFCT_EVENT_AUTOCOLRESSTARTED</ref><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_AUTOCOLRESSTARTED),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Auto<sp/>collision<sp/>resolution<sp/>process<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402daf75727ab736830d9cd20fd7c15c3509d" kindref="member">NRF_NFCT_EVENT_COLLISION</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_COLLISION),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>NFC<sp/>auto<sp/>collision<sp/>resolution<sp/>error<sp/>reported.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402daf3377a5115a67ed73f4dc20e0b354c11" kindref="member">NRF_NFCT_EVENT_SELECTED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_SELECTED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>NFC<sp/>auto<sp/>collision<sp/>resolution<sp/>successfully<sp/>completed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a44934a729ad8469a53a65318e8402da1efd0a4a51f49117af72f37d059f2d5e" kindref="member">NRF_NFCT_EVENT_STARTED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_NFCT_Type,<sp/>EVENTS_STARTED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>EasyDMA<sp/>is<sp/>ready<sp/>to<sp/>receive<sp/>or<sp/>send<sp/>frames.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1ga0a44934a729ad8469a53a65318e8402d" kindref="member">nrf_nfct_event_t</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment">/**<sp/>@brief<sp/>NFCT<sp/>shortcuts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga6c7632f889b4f197c3754e1459bd96d9af05e8e5c88c997b75230227da96f862a" kindref="member">NRF_NFCT_SHORT_FIELDDETECTED_ACTIVATE_MASK</ref><sp/><sp/>=<sp/>NFCT_SHORTS_FIELDDETECTED_ACTIVATE_Msk,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>the<sp/>FIELDDETECTED<sp/>event<sp/>and<sp/>the<sp/>ACTIVATE<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga6c7632f889b4f197c3754e1459bd96d9a0c24c1ac5908201b27f68d9283019610" kindref="member">NRF_NFCT_SHORT_FIELDLOST_SENSE_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_SHORTS_FIELDLOST_SENSE_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>the<sp/>FIELDLOST<sp/>event<sp/>and<sp/>the<sp/>SENSE<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga6c7632f889b4f197c3754e1459bd96d9a985f26b4e946473de6eaa741674a4b97" kindref="member">NRF_NFCT_SHORT_TXFRAMEEND_ENABLERXDATA_MASK</ref><sp/>=<sp/>NFCT_SHORTS_TXFRAMEEND_ENABLERXDATA_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Shortcut<sp/>between<sp/>the<sp/>TXFRAMEEND<sp/>event<sp/>and<sp/>the<sp/>ENABLERXDATA<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1ga6c7632f889b4f197c3754e1459bd96d9" kindref="member">nrf_nfct_short_mask_t</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="173"><highlight class="comment">/**<sp/>@brief<sp/>NFCT<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a2dd30e7d207875fa9199ac7bf795ad7b" kindref="member">NRF_NFCT_INT_READY_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_READY_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>READY<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7af977f1a3ca28e086e5648d35ec502d84" kindref="member">NRF_NFCT_INT_FIELDDETECTED_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_FIELDDETECTED_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>FIELDDETECTED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a9bb7e892877b6246adf32be5228e3409" kindref="member">NRF_NFCT_INT_FIELDLOST_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_FIELDLOST_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>FIELDLOST<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a42b18e008fd3b5704310812c544b5480" kindref="member">NRF_NFCT_INT_TXFRAMESTART_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_TXFRAMESTART_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>TXFRAMESTART<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a2cd2aebf085658f92b4f32be1bb4d32e" kindref="member">NRF_NFCT_INT_TXFRAMEEND_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_TXFRAMEEND_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>TXFRAMEEND<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7ab9c951e462fad2ae589b1921e91cd5f4" kindref="member">NRF_NFCT_INT_RXFRAMESTART_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_RXFRAMESTART_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>RXFRAMESTART<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7af7be4f93c9f7db92ebe29c50726ce31b" kindref="member">NRF_NFCT_INT_RXFRAMEEND_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_RXFRAMEEND_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>RXFRAMEEND<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7abb7cf7fc5578a5e314462ace32cfdcb2" kindref="member">NRF_NFCT_INT_ERROR_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_ERROR_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>ERROR<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a61765467b22393476077f147b880c6e8" kindref="member">NRF_NFCT_INT_RXERROR_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_RXERROR_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>RXERROR<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a96aa3e2524279ff40e15165c975f06e1" kindref="member">NRF_NFCT_INT_ENDRX_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_ENDRX_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>ENDRX<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a4a8f3aa192ade9cc5c64b79587314300" kindref="member">NRF_NFCT_INT_ENDTX_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_ENDTX_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>ENDTX<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a97ae5ea57bacf758d5ec50a76d0bea71" kindref="member">NRF_NFCT_INT_AUTOCOLRESSTARTED_MASK</ref><sp/>=<sp/>NFCT_INTEN_AUTOCOLRESSTARTED_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>AUTOCOLRESSTARTED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a1e44273a7ac2f1702f5173b87a957ccf" kindref="member">NRF_NFCT_INT_COLLISION_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_COLLISION_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>COLLISION<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7ae5724887e0f3e76ad883e70dc69d89ef" kindref="member">NRF_NFCT_INT_SELECTED_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_SELECTED_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>SELECTED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad16e86051bee49a907048aae86da2ee7a4553fbfba3efa52de7be5f51f63b8994" kindref="member">NRF_NFCT_INT_STARTED_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_INTEN_STARTED_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Interrupt<sp/>on<sp/>STARTED<sp/>event.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1gad16e86051bee49a907048aae86da2ee7" kindref="member">nrf_nfct_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="193"><highlight class="comment">/**<sp/>@brief<sp/>NFC<sp/>error<sp/>status<sp/>bit<sp/>masks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad99ea387f1db326f48ed88cd87ce029ea2bfaf8571fdb161f9ef566f14fdfd7c6" kindref="member">NRF_NFCT_ERROR_FRAMEDELAYTIMEOUT_MASK</ref><sp/>=<sp/>NFCT_ERRORSTATUS_FRAMEDELAYTIMEOUT_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Timeout<sp/>of<sp/>the<sp/>Frame<sp/>Delay<sp/>Timer<sp/>(no<sp/>frame<sp/>transmission<sp/>started<sp/>in<sp/>the<sp/>FDT<sp/>window).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NFCT_ERRORSTATUS_NFCFIELDTOOSTRONG_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad99ea387f1db326f48ed88cd87ce029ea8b841a00d0b6d851e2363c7276894dc4" kindref="member">NRF_NFCT_ERROR_NFCFIELDTOOSTRONG_MASK</ref><sp/>=<sp/>NFCT_ERRORSTATUS_NFCFIELDTOOSTRONG_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Field<sp/>level<sp/>is<sp/>too<sp/>high<sp/>at<sp/>maximum<sp/>load<sp/>resistance.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NFCT_ERRORSTATUS_NFCFIELDTOOWEAK_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad99ea387f1db326f48ed88cd87ce029ea097a34ebfa74377c11e6d7d7b2d24515" kindref="member">NRF_NFCT_ERROR_NFCFIELDTOOWEAK_MASK</ref><sp/>=<sp/>NFCT_ERRORSTATUS_NFCFIELDTOOWEAK_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Field<sp/>level<sp/>is<sp/>too<sp/>low<sp/>at<sp/>minimum<sp/>load<sp/>resistance.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1gad99ea387f1db326f48ed88cd87ce029e" kindref="member">nrf_nfct_error_status_t</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment">/**<sp/>@brief<sp/>NFC<sp/>received<sp/>frame<sp/>status<sp/>bit<sp/>masks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga932b29507cd5521c30732e467b9d59a4add46775704db6e40fdd93cc033a46a31" kindref="member">NRF_NFCT_RX_FRAME_STATUS_CRC_MASK</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_FRAMESTATUS_RX_CRCERROR_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>CRC<sp/>status<sp/>mask.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga932b29507cd5521c30732e467b9d59a4a449833c0bb9451cac8bfd6b36ef70332" kindref="member">NRF_NFCT_RX_FRAME_STATUS_PARITY_MASK</ref><sp/><sp/>=<sp/>NFCT_FRAMESTATUS_RX_PARITYSTATUS_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Parity<sp/>status<sp/>mask.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga932b29507cd5521c30732e467b9d59a4af51f867d1bd6a76124067a1f84155b0d" kindref="member">NRF_NFCT_RX_FRAME_STATUS_OVERRUN_MASK</ref><sp/>=<sp/>NFCT_FRAMESTATUS_RX_OVERRUN_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Overrun<sp/>status<sp/>mask.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1ga932b29507cd5521c30732e467b9d59a4" kindref="member">nrf_nfct_rx_frame_status_t</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_TAG_STATE_REG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="214"><highlight class="comment">/**<sp/>@brief<sp/>NFC<sp/>tag<sp/>state.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad41c75935da91df206b39337d615780da3e141b4a528156dd4de3903d767018b0" kindref="member">NRF_NFCT_TAG_STATE_DISABLED</ref><sp/><sp/><sp/><sp/>=<sp/>NFCT_NFCTAGSTATE_NFCTAGSTATE_Disabled,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Disabled<sp/>or<sp/>sensing<sp/>NFC<sp/>field.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad41c75935da91df206b39337d615780da192bd0faa9e10b9965612fd0638f8d19" kindref="member">NRF_NFCT_TAG_STATE_RAMP_UP</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_NFCTAGSTATE_NFCTAGSTATE_RampUp,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Ramping<sp/>up.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad41c75935da91df206b39337d615780daac606854b8b568b825aa7739de9845af" kindref="member">NRF_NFCT_TAG_STATE_IDLE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_NFCTAGSTATE_NFCTAGSTATE_Idle,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Idle.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad41c75935da91df206b39337d615780da9a6cbfbdc278d5a6eaffd1f1d1843891" kindref="member">NRF_NFCT_TAG_STATE_RECEIVE</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_NFCTAGSTATE_NFCTAGSTATE_Receive,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Receiving<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad41c75935da91df206b39337d615780daf53e09553e44e37b4c910d220e2472ea" kindref="member">NRF_NFCT_TAG_STATE_FRAME_DELAY</ref><sp/>=<sp/>NFCT_NFCTAGSTATE_NFCTAGSTATE_FrameDelay,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Counting<sp/>Frame<sp/>Delay<sp/>Time<sp/>since<sp/>the<sp/>last<sp/>symbol<sp/>of<sp/>the<sp/>last<sp/>received<sp/>frame.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggad41c75935da91df206b39337d615780da2eef014dc7fc92894df600a63474b140" kindref="member">NRF_NFCT_TAG_STATE_TRANSMIT</ref><sp/><sp/><sp/><sp/>=<sp/>NFCT_NFCTAGSTATE_NFCTAGSTATE_Transmit<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Transmitting<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1gad41c75935da91df206b39337d615780d" kindref="member">nrf_nfct_tag_state_t</ref>;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_TAG_STATE_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_SLEEP_STATE_REG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="227"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>@brief<sp/>NFC<sp/>tag<sp/>sleep<sp/>state.</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>@details<sp/>Shows<sp/>the<sp/>sleep<sp/>state<sp/>during<sp/>automatic<sp/>collision<sp/>resolution</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>according<sp/>to<sp/>the<sp/>NFC<sp/>Forum<sp/>Activity<sp/>Technical<sp/>Specification<sp/>v2.0.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggaed596f092cc3971acade2458023e3c3aa2986b55368ca4f519b68a4e897017af5" kindref="member">NRF_NFCT_SLEEP_STATE_IDLE</ref><sp/><sp/><sp/><sp/>=<sp/>NFCT_SLEEPSTATE_SLEEPSTATE_Idle,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>&apos;IDLE&apos;<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggaed596f092cc3971acade2458023e3c3aacd1d8e637e8f8516bef0df37e2d359e8" kindref="member">NRF_NFCT_SLEEP_STATE_SLEEP_A</ref><sp/>=<sp/>NFCT_SLEEPSTATE_SLEEPSTATE_SleepA<sp/></highlight><highlight class="comment">/**&lt;<sp/>&apos;SLEEP_A&apos;<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1gaed596f092cc3971acade2458023e3c3a" kindref="member">nrf_nfct_sleep_state_t</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_SLEEP_STATE_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment">/**<sp/>@brief<sp/>NFC<sp/>field<sp/>state<sp/>bit<sp/>masks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggac45bf9d9a9f138385c799a7273a64248ad3e68170a13c5ef0d1c742192a56802a" kindref="member">NRF_NFCT_FIELD_STATE_PRESENT_MASK</ref><sp/>=<sp/>NFCT_FIELDPRESENT_FIELDPRESENT_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Field<sp/>presence<sp/>mask.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggac45bf9d9a9f138385c799a7273a64248ad2db0acfdc995f4b9bb01fa6fa99a390" kindref="member">NRF_NFCT_FIELD_STATE_LOCK_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>NFCT_FIELDPRESENT_LOCKDETECT_Msk<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Field<sp/>lock<sp/>mask.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1gac45bf9d9a9f138385c799a7273a64248" kindref="member">nrf_nfct_field_state_t</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">/**<sp/>@brief<sp/>NFC<sp/>frame<sp/>delay<sp/>mode<sp/>for<sp/>data<sp/>transmission.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga440398a7c43c28c619f2326cf0d48408aa725de0eda1170d32515e941ad742428" kindref="member">NRF_NFCT_FRAME_DELAY_MODE_FREERUN</ref><sp/><sp/><sp/><sp/>=<sp/>NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_FreeRun,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Frame<sp/>transmission<sp/>starts<sp/>when<sp/>@ref<sp/>NRF_NFCT_TASK_STARTTX<sp/>is<sp/>set<sp/>(delay<sp/>timer<sp/>is<sp/>not<sp/>used).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga440398a7c43c28c619f2326cf0d48408af6bc2173f62c51307a18b6cb3d58cc3a" kindref="member">NRF_NFCT_FRAME_DELAY_MODE_WINDOW</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Window,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Frame<sp/>transmission<sp/>starts<sp/>in<sp/>a<sp/>window<sp/>between<sp/>FRAMEDELAYMIN<sp/>and<sp/>FRAMEDELAYMAX.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga440398a7c43c28c619f2326cf0d48408a3d109ef382fd19b65a3138c89ddfb804" kindref="member">NRF_NFCT_FRAME_DELAY_MODE_EXACTVAL</ref><sp/><sp/><sp/>=<sp/>NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_ExactVal,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Frame<sp/>transmission<sp/>starts<sp/>when<sp/>the<sp/>delay<sp/>timer<sp/>reaches<sp/>FRAMEDELAYMAX.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga440398a7c43c28c619f2326cf0d48408a698f86f6fdfb20c3dce85ff5f0459c9f" kindref="member">NRF_NFCT_FRAME_DELAY_MODE_WINDOWGRID</ref><sp/>=<sp/>NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_WindowGrid<sp/></highlight><highlight class="comment">/**&lt;<sp/>Frame<sp/>transmission<sp/>starts<sp/>in<sp/>a<sp/>bit<sp/>grid<sp/>between<sp/>FRAMEDELAYMIN<sp/>and<sp/>FRAMEDELAYMAX.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1ga440398a7c43c28c619f2326cf0d48408" kindref="member">nrf_nfct_frame_delay_mode_t</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="256"><highlight class="comment">/**<sp/>@brief<sp/>Bit<sp/>masks<sp/>for<sp/>NFC<sp/>transmission<sp/>frame<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga97c7393982d73ebddf326b37d16919d7ab3232323c07516d143153746fdc1b6ce" kindref="member">NRF_NFCT_TX_FRAME_CONFIG_PARITY</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_TXD_FRAMECONFIG_PARITY_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Indicates<sp/>whether<sp/>parity<sp/>is<sp/>added<sp/>in<sp/>the<sp/>transmitted<sp/>frames.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga97c7393982d73ebddf326b37d16919d7a3576cf4afb9de41f2bf7bb5c98ced0b2" kindref="member">NRF_NFCT_TX_FRAME_CONFIG_DISCARD_START</ref><sp/>=<sp/>NFCT_TXD_FRAMECONFIG_DISCARDMODE_Msk,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Indicates<sp/>whether<sp/>unused<sp/>bits<sp/>are<sp/>discarded<sp/>at<sp/>the<sp/>start<sp/>or<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>transmitted<sp/>frames.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga97c7393982d73ebddf326b37d16919d7aed8fb9cd5b0d1465427358e090e4e8d5" kindref="member">NRF_NFCT_TX_FRAME_CONFIG_SOF</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_TXD_FRAMECONFIG_SOF_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Indicates<sp/>whether<sp/>SoF<sp/>symbol<sp/>is<sp/>added<sp/>in<sp/>the<sp/>transmitted<sp/>frames.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga97c7393982d73ebddf326b37d16919d7a62f219deee0a27df88e30bf19c59cc22" kindref="member">NRF_NFCT_TX_FRAME_CONFIG_CRC16</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_TXD_FRAMECONFIG_CRCMODETX_Msk<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Indicates<sp/>whether<sp/>CRC<sp/>is<sp/>added<sp/>in<sp/>the<sp/>transmitted<sp/>frames.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1ga97c7393982d73ebddf326b37d16919d7" kindref="member">nrf_nfct_tx_frame_config_t</ref>;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="265"><highlight class="comment">/**<sp/>@brief<sp/>Bit<sp/>masks<sp/>for<sp/>NFC<sp/>reception<sp/>frame<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga098d18d71f23c372cb882402843ad005ad7937aabbe0a37c360afce216e41975b" kindref="member">NRF_NFCT_RX_FRAME_CONFIG_PARITY</ref><sp/>=<sp/>NFCT_RXD_FRAMECONFIG_PARITY_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Indicates<sp/>whether<sp/>parity<sp/>is<sp/>expected<sp/>in<sp/>the<sp/>received<sp/>frames.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga098d18d71f23c372cb882402843ad005a6e029ac2606bb161bcfc3070f0d0065f" kindref="member">NRF_NFCT_RX_FRAME_CONFIG_SOF</ref><sp/><sp/><sp/><sp/>=<sp/>NFCT_RXD_FRAMECONFIG_SOF_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Indicates<sp/>whether<sp/>SoF<sp/>symbol<sp/>is<sp/>expected<sp/>in<sp/>the<sp/>received<sp/>frames.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga098d18d71f23c372cb882402843ad005aff77f251657f93fcac538cffacd78a65" kindref="member">NRF_NFCT_RX_FRAME_CONFIG_CRC16</ref><sp/><sp/>=<sp/>NFCT_RXD_FRAMECONFIG_CRCMODERX_Msk<sp/></highlight><highlight class="comment">/**&lt;<sp/>Indicates<sp/>whether<sp/>CRC<sp/>is<sp/>expected<sp/>and<sp/>checked<sp/>in<sp/>the<sp/>received<sp/>frames.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1ga098d18d71f23c372cb882402843ad005" kindref="member">nrf_nfct_rx_frame_config_t</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="273"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>@brief<sp/>&apos;NFCI1<sp/>size&apos;<sp/>NFC<sp/>field<sp/>configuration<sp/>for<sp/>the<sp/>SENS_RES<sp/>frame<sp/>according<sp/>to<sp/>the<sp/>NFC<sp/>Forum</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Digital<sp/>Protocol<sp/>Technical<sp/>Specification.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3caa0bc32a9e2449b0dfe353dbec523ae1c" kindref="member">NRF_NFCT_SENSRES_NFCID1_SIZE_SINGLE</ref><sp/>=</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_SENSRES_NFCIDSIZE_NFCID1Single<sp/>&lt;&lt;<sp/>NFCT_SENSRES_NFCIDSIZE_Pos,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Single<sp/>size<sp/>NFCID1<sp/>(4<sp/>bytes).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3ca45acf8d2662418ed6212de2d3e176f07" kindref="member">NRF_NFCT_SENSRES_NFCID1_SIZE_DOUBLE</ref><sp/>=</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_SENSRES_NFCIDSIZE_NFCID1Double<sp/>&lt;&lt;<sp/>NFCT_SENSRES_NFCIDSIZE_Pos,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Double<sp/>size<sp/>NFCID1<sp/>(7<sp/>bytes).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3ca3206de942de1e3d9238ce40fbcc96f24" kindref="member">NRF_NFCT_SENSRES_NFCID1_SIZE_TRIPLE</ref><sp/>=</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_SENSRES_NFCIDSIZE_NFCID1Triple<sp/>&lt;&lt;<sp/>NFCT_SENSRES_NFCIDSIZE_Pos,<sp/></highlight><highlight class="comment">/**&lt;<sp/>Triple<sp/>size<sp/>NFCID1<sp/>(10<sp/>bytes).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3caa87b0717c00543df08613fd678750e43" kindref="member">NRF_NFCT_SENSRES_NFCID1_SIZE_DEFAULT</ref><sp/>=</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_SENSRES_NFCIDSIZE_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Default<sp/>size.<sp/>Use<sp/>this<sp/>option<sp/>to<sp/>leave<sp/>NFCID1<sp/>size<sp/>unchanged.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="289"><highlight class="comment">/**<sp/>@brief<sp/>Bias<sp/>trim<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="structnrf__nfct__bias__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>trim_ibpsr;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Fine<sp/>trim<sp/>IBPSR<sp/>4<sp/>µA<sp/>bias<sp/>current.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>coarse_ibpsr;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Coarse<sp/>trim<sp/>IBPSR<sp/>4<sp/>µA.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>reference_volatge;<sp/></highlight><highlight class="comment">/**&lt;<sp/>Reference<sp/>voltage<sp/>level.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>spare;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Spare.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal">}<sp/><ref refid="structnrf__nfct__bias__config__t" kindref="compound">nrf_nfct_bias_config_t</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="298"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/>*<sp/>@brief<sp/>&apos;Bit<sp/>frame<sp/>SDD&apos;<sp/>NFC<sp/>field<sp/>configuration<sp/>for<sp/>the<sp/>SENS_RES<sp/>frame<sp/>according<sp/>to<sp/>the<sp/>NFC</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Forum<sp/>Digital<sp/>Protocol<sp/>Technical<sp/>Specification.</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a21c500bdf07fbd27a8c1a638302f45aedb5cb6edca19ef9e96d3c0d69e4eb08" kindref="member">NRF_NFCT_SENSRES_BIT_FRAME_SDD_00000</ref><sp/>=</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_SENSRES_BITFRAMESDD_SDD00000<sp/>&lt;&lt;<sp/>NFCT_SENSRES_BITFRAMESDD_Pos,<sp/></highlight><highlight class="comment">/**&lt;<sp/>SDD<sp/>pattern<sp/>00000.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a21c500bdf07fbd27a8c1a638302f45ab959e056e53ab06f1248cbf2c7353efb" kindref="member">NRF_NFCT_SENSRES_BIT_FRAME_SDD_00001</ref><sp/>=</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_SENSRES_BITFRAMESDD_SDD00001<sp/>&lt;&lt;<sp/>NFCT_SENSRES_BITFRAMESDD_Pos,<sp/></highlight><highlight class="comment">/**&lt;<sp/>SDD<sp/>pattern<sp/>00001.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a21c500bdf07fbd27a8c1a638302f45ade18f8ec88ca410cda3590d8567ad311" kindref="member">NRF_NFCT_SENSRES_BIT_FRAME_SDD_00010</ref><sp/>=</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_SENSRES_BITFRAMESDD_SDD00010<sp/>&lt;&lt;<sp/>NFCT_SENSRES_BITFRAMESDD_Pos,<sp/></highlight><highlight class="comment">/**&lt;<sp/>SDD<sp/>pattern<sp/>00010.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a21c500bdf07fbd27a8c1a638302f45ae2c5adf46cbcd6fd85627816ff2460bc" kindref="member">NRF_NFCT_SENSRES_BIT_FRAME_SDD_00100</ref><sp/>=</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_SENSRES_BITFRAMESDD_SDD00100<sp/>&lt;&lt;<sp/>NFCT_SENSRES_BITFRAMESDD_Pos,<sp/></highlight><highlight class="comment">/**&lt;<sp/>SDD<sp/>pattern<sp/>00100.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a21c500bdf07fbd27a8c1a638302f45a87b8246de600132bb3cc76d8a4bb7f33" kindref="member">NRF_NFCT_SENSRES_BIT_FRAME_SDD_01000</ref><sp/>=</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_SENSRES_BITFRAMESDD_SDD01000<sp/>&lt;&lt;<sp/>NFCT_SENSRES_BITFRAMESDD_Pos,<sp/></highlight><highlight class="comment">/**&lt;<sp/>SDD<sp/>pattern<sp/>01000.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga0a21c500bdf07fbd27a8c1a638302f45adfe197aed14da11a49af43c66a6e39f9" kindref="member">NRF_NFCT_SENSRES_BIT_FRAME_SDD_10000</ref><sp/>=</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_SENSRES_BITFRAMESDD_SDD10000<sp/>&lt;&lt;<sp/>NFCT_SENSRES_BITFRAMESDD_Pos<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>SDD<sp/>pattern<sp/>10000.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1ga0a21c500bdf07fbd27a8c1a638302f45" kindref="member">nrf_nfct_sensres_bit_frame_sdd_t</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="318"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>@brief<sp/>&apos;Platofrm<sp/>Config&apos;<sp/>NFC<sp/>field<sp/>configuration<sp/>for<sp/>the<sp/>SENS_RES<sp/>frame<sp/>according<sp/>to<sp/>the<sp/>NFC</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Forum<sp/>Digital<sp/>Protocol<sp/>Technical<sp/>Specification.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/>/**&lt;<sp/>SENS_RES<sp/>&apos;Platform<sp/>Config&apos;<sp/>field<sp/>(b4-b1)<sp/>value<sp/>for<sp/>Type<sp/>1<sp/>Tag<sp/>platform.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ggac3dad0d77b9f35fea328bbdd91cc0b02a7b6cda6fd291bb76f900073cad31865f" kindref="member">NRF_NFCT_SENSRES_PLATFORM_CONFIG_T1T</ref><sp/><sp/><sp/>=<sp/>6<sp/>&lt;&lt;<sp/>NFCT_SENSRES_PLATFCONFIG_Pos,</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/>/**&lt;<sp/>SENS_RES<sp/>&apos;Platform<sp/>Config&apos;<sp/>field<sp/>(b7-b6)<sp/>value<sp/>for<sp/>any<sp/>platform<sp/>except<sp/>Type<sp/>1<sp/>Tag<sp/>platform.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_NFCT_SENSRES_PLATFORM_CONFIG_OTHER<sp/>=<sp/>0<sp/>&lt;&lt;<sp/>NFCT_SENSRES_PLATFCONFIG_Pos</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1gac3dad0d77b9f35fea328bbdd91cc0b02" kindref="member">nrf_nfct_sensres_platform_config_t</ref>;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="330"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Protocol<sp/>NFC<sp/>field<sp/>(bits<sp/>b7<sp/>and<sp/>b6)<sp/>configuration<sp/>for<sp/>the<sp/>SEL_RES<sp/>frame<sp/>according<sp/>to</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>NFC<sp/>Forum<sp/>Digital<sp/>Protocol<sp/>Technical<sp/>Specification.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga184ca02cc782ae566ecef8389e1d7ca7a0e8d1a350e8edfbb84e3c73a8bb689dc" kindref="member">NRF_NFCT_SELRES_PROTOCOL_T2T</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Type<sp/>2<sp/>Tag<sp/>platform.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga184ca02cc782ae566ecef8389e1d7ca7a28699c3283afbf2cae664edb708569d3" kindref="member">NRF_NFCT_SELRES_PROTOCOL_T4AT</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Type<sp/>4A<sp/>Tag<sp/>platform.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga184ca02cc782ae566ecef8389e1d7ca7a237bfcd615e81de0caeee6a68550fb7f" kindref="member">NRF_NFCT_SELRES_PROTOCOL_NFCDEP</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>2,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>NFC-DEP<sp/>Protocol.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga184ca02cc782ae566ecef8389e1d7ca7aec03f9060de8c96de015e8c4275f08fb" kindref="member">NRF_NFCT_SELRES_PROTOCOL_NFCDEP_T4AT</ref><sp/>=<sp/>3,<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>NFC-DEP<sp/>Protocol<sp/>and<sp/>Type<sp/>4A<sp/>Tag<sp/>platform).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1ga184ca02cc782ae566ecef8389e1d7ca7" kindref="member">nrf_nfct_selres_protocol_t</ref>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_MODULATION_CTRL_REG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="343"><highlight class="comment">/**<sp/>@brief<sp/>Modulation<sp/>output<sp/>configuration.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga573f6e234b255f96cfa9516c5297345ba25ca89aa77bb9c9c497c26f77e4354a2" kindref="member">NRF_NFCT_MODULATION_CTRL_INVALID</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_MODULATIONCTRL_MODULATIONCTRL_Invalid,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Invalid<sp/>configuration.<sp/>Defaults<sp/>to<sp/>the<sp/>same<sp/>behavior<sp/>as<sp/>NRF_NFCT_MODULATION_CTRL_INTERNAL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga573f6e234b255f96cfa9516c5297345ba00d46a8747e0acf55d9d272a0107eab7" kindref="member">NRF_NFCT_MODULATION_CTRL_INTERNAL</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_MODULATIONCTRL_MODULATIONCTRL_Internal,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Use<sp/>internal<sp/>modulator<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga573f6e234b255f96cfa9516c5297345ba87516836bdb7e745c8458e2fc7416536" kindref="member">NRF_NFCT_MODULATION_CTRL_GPIO</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NFCT_MODULATIONCTRL_MODULATIONCTRL_ModToGpio,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Transmit<sp/>output<sp/>digital<sp/>modulation<sp/>signal<sp/>to<sp/>a<sp/>GPIO<sp/>pin.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga573f6e234b255f96cfa9516c5297345ba52cd83a27d5f4fc1983a537a5e636478" kindref="member">NRF_NFCT_MODULATION_CTRL_INTERNAL_GPIO</ref><sp/>=<sp/>NFCT_MODULATIONCTRL_MODULATIONCTRL_InternalAndModToGpio<sp/></highlight><highlight class="comment">/**&lt;<sp/>Use<sp/>internal<sp/>modulator<sp/>and<sp/>transmit<sp/>output<sp/>digital<sp/>modulation<sp/>signal<sp/>to<sp/>a<sp/>GPIO<sp/>pin.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">}<sp/><ref refid="group__nrf__nfct__hal_1ga573f6e234b255f96cfa9516c5297345b" kindref="member">nrf_nfct_modulation_ctrl_t</ref>;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_MODULATION_CTRL_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="353"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>a<sp/>specific<sp/>NFCT<sp/>task.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga79ca17491a7ab505d2caf331f2b45c45" kindref="member">nrf_nfct_task_trigger</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__nfct__hal_1ga90998750300456aedbce0700a9df232a" kindref="member">nrf_nfct_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="361"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>a<sp/>specific<sp/>NFCT<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>@return<sp/>Task<sp/>address.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1gaa0b23785c9a3fc0b0a94b03505293154" kindref="member">nrf_nfct_task_address_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga90998750300456aedbce0700a9df232a" kindref="member">nrf_nfct_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="372"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>a<sp/>specific<sp/>event.</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event.</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gac8d0986e227f0414b1aa3a0fb58f0628" kindref="member">nrf_nfct_event_clear</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__nfct__hal_1ga0a44934a729ad8469a53a65318e8402d" kindref="member">nrf_nfct_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="380"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>NFCT<sp/>event.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga9e50defad8a4cd3d018851756684dc68" kindref="member">nrf_nfct_event_check</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__nfct__hal_1ga0a44934a729ad8469a53a65318e8402d" kindref="member">nrf_nfct_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="391"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>a<sp/>specific<sp/>NFCT<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address.</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga7e8a659e4d03a530c9922cf4ac26bc3c" kindref="member">nrf_nfct_event_address_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga0a44934a729ad8469a53a65318e8402d" kindref="member">nrf_nfct_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="402"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>selected<sp/>shortcuts.</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>short_mask<sp/>Mask<sp/>of<sp/>shortcuts.</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga4487623556dab1c328e34ff96395156d" kindref="member">nrf_nfct_shorts_enable</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>short_mask);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="410"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>selected<sp/>shortcuts.</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>short_mask<sp/>Mask<sp/>of<sp/>shortcuts.</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga0fe39dd786e8f19f214501cbec466e00" kindref="member">nrf_nfct_shorts_disable</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>short_mask);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="418"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>enabled<sp/>shortcuts.</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/>@return<sp/>Flags<sp/>of<sp/>the<sp/>currently<sp/>enabled<sp/>shortcuts.</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga3585ee24da28125f6d59cb7e2b0f8bc1" kindref="member">nrf_nfct_shorts_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="427"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>shortcuts.</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>short_mask<sp/>Shortcut<sp/>mask.</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga3dc3d589230f0f22f13745fbfd0cd5dc" kindref="member">nrf_nfct_shorts_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>short_mask);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="435"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>selected<sp/>interrupts.</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_nfct_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga083b58b924c781b8ea9b7a901e5c8d0e" kindref="member">nrf_nfct_int_enable</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="444"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_nfct_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga40870c355963e7a61354adc085b8c132" kindref="member">nrf_nfct_int_enable_check</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="455"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>information<sp/>about<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>flags<sp/>of<sp/>the<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga60fdd94f14ad586f5de1fd2a607c2fa3" kindref="member">nrf_nfct_int_enable_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="464"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>selected<sp/>interrupts.</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_nfct_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga692fcd9a52ebdb75ed137cc29f06d04c" kindref="member">nrf_nfct_int_disable</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_MODULATION_PSEL_REG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="474"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>NFCT<sp/>modulation<sp/>control<sp/>pin.</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/>If<sp/>a<sp/>given<sp/>signal<sp/>is<sp/>not<sp/>needed,<sp/>pass<sp/>the<sp/>@ref<sp/>NRF_NFCT_MOD_CTRL_PIN_NOT_CONNECTED</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/>value<sp/>instead<sp/>of<sp/>its<sp/>pin<sp/>number.</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mod_ctrl_pin<sp/>Modulation<sp/>control<sp/>pin.</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gadee0eef3c3cfe89e730dded70de30eae" kindref="member">nrf_nfct_mod_ctrl_pin_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mod_ctrl_pin);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="485"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>modulation<sp/>control<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/>@return<sp/>Modulation<sp/>control<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga4e9255d4da9a6ce15d8d3d9d179412b3" kindref="member">nrf_nfct_mod_ctrl_pin_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_MODULATION_PSEL_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_MODULATION_CTRL_REG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="496"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>modulation<sp/>output.<sp/>It<sp/>enables<sp/>the</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>to<sp/>a<sp/>GPIO<sp/>pin<sp/>which<sp/>can<sp/>be<sp/>connected<sp/>to<sp/>a<sp/>second<sp/>external.</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mod_ctrl<sp/>Modulation<sp/>control<sp/>field<sp/>configuration.</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gaa579590b5349be09002fac3c45bc4b52" kindref="member">nrf_nfct_modulation_output_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga573f6e234b255f96cfa9516c5297345b" kindref="member">nrf_nfct_modulation_ctrl_t</ref><sp/>mod_ctrl);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="506"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>modulation<sp/>output<sp/>configuration.</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>configured<sp/>modulation<sp/>output.</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1ga573f6e234b255f96cfa9516c5297345b" kindref="member">nrf_nfct_modulation_ctrl_t</ref><sp/><ref refid="group__nrf__nfct__hal_1gab54602dea9536f30f146acd7c044f700" kindref="member">nrf_nfct_modulation_output_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_MODULATION_CTRL_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="517"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>NFCT<sp/>error<sp/>status.</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>NFCT<sp/>error<sp/>status<sp/>flags,<sp/>defined<sp/>in<sp/>@ref<sp/>nrf_nfct_error_status_t.</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1gae885af4d5554fc9011d4fa7a7b48887a" kindref="member">nrf_nfct_error_status_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="526"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>NFCT<sp/>error<sp/>status.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>error_flag<sp/>Error<sp/>flags<sp/>to<sp/>be<sp/>cleared,<sp/>defined<sp/>in<sp/>@ref<sp/>nrf_nfct_error_status_t.</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga87592076f3fe8deb67a9051eab3cb9a1" kindref="member">nrf_nfct_error_status_clear</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>error_flag);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="534"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>NFC<sp/>frame<sp/>reception<sp/>status.</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>flags<sp/>of<sp/>the<sp/>NFC<sp/>frame<sp/>reception<sp/>status,<sp/>defined<sp/>in<sp/>@ref<sp/>nrf_nfct_rx_frame_status_t.</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga4df45a5ae798f487f02b7a9b492b4def" kindref="member">nrf_nfct_rx_frame_status_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="543"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>NFC<sp/>frame<sp/>reception<sp/>status.</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>framestatus_flags<sp/>Status<sp/>flags<sp/>to<sp/>be<sp/>cleared,</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>defined<sp/>in<sp/>@ref<sp/>nrf_nfct_rx_frame_status_t.</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga71053304120e72fece9d5aa975d38ea6" kindref="member">nrf_nfct_rx_frame_status_clear</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>framestatus_flags);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_TAG_STATE_REG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="554"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>NFC<sp/>tag<sp/>state.</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_NFCT_TAG_STATE_DISABLED<sp/><sp/><sp/><sp/>NFC<sp/>tag<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_NFCT_TAG_STATE_RAMP_UP<sp/><sp/><sp/><sp/><sp/>NFC<sp/>tag<sp/>is<sp/>ramping<sp/>up.</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_NFCT_TAG_STATE_IDLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFC<sp/>tag<sp/>is<sp/>activated<sp/>and<sp/>idle.</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_NFCT_TAG_STATE_RECEIVE<sp/><sp/><sp/><sp/><sp/>NFC<sp/>tag<sp/>is<sp/>receiving<sp/>data.</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_NFCT_TAG_STATE_FRAME_DELAY<sp/>Frame<sp/>Delay<sp/>Timer<sp/>of<sp/>the<sp/>NFC<sp/>tag<sp/>is<sp/>counting<sp/>ticks</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>since<sp/>the<sp/>last<sp/>symbol<sp/>of<sp/>the<sp/>last<sp/>received<sp/>frame.</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_NFCT_TAG_STATE_TRANSMIT<sp/><sp/><sp/><sp/>NFC<sp/>tag<sp/>is<sp/>transmitting<sp/>data.</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__nfct__hal_1gad41c75935da91df206b39337d615780d" kindref="member">nrf_nfct_tag_state_t</ref><sp/><ref refid="group__nrf__nfct__hal_1ga3bdf972ded34bf3ceba3e7f2586a68fb" kindref="member">nrf_nfct_tag_state_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_TAG_STATE_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_SLEEP_STATE_REG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="571"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>NFC<sp/>tag<sp/>sleep<sp/>state<sp/>during<sp/>the<sp/>automatic<sp/>collision<sp/>resolution.</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>returned<sp/>value<sp/>is<sp/>the<sp/>last<sp/>state<sp/>before<sp/>the<sp/>autimatic<sp/>collision<sp/>resolution<sp/>started.</highlight></codeline>
<codeline lineno="575"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="576"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="577"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_NFCT_SLEEP_STATE_IDLE<sp/><sp/><sp/><sp/>NFC<sp/>tag<sp/>was<sp/>in<sp/>IDLE<sp/>state<sp/>before<sp/>the<sp/>automatic</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collision<sp/>resolution<sp/>started.</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRF_NFCT_SLEEP_STATE_SLEEP_A<sp/>NFC<sp/>tag<sp/>was<sp/>in<sp/>SLEEP_A<sp/>state<sp/>before<sp/>the<sp/>automatic</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>collision<sp/>resolution<sp/>started.</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__nfct__hal_1gaed596f092cc3971acade2458023e3c3a" kindref="member">nrf_nfct_sleep_state_t</ref><sp/><ref refid="group__nrf__nfct__hal_1ga3cd109684521662e9304a5f8e007f79b" kindref="member">nrf_nfct_sleep_state_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_SLEEP_STATE_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="586"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="587"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>status<sp/>of<sp/>the<sp/>external<sp/>NFC<sp/>field<sp/>detection.</highlight></codeline>
<codeline lineno="588"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>NFC<sp/>field<sp/>detection<sp/>status.<sp/>Status<sp/>bits<sp/>can<sp/>be<sp/>checked<sp/>by<sp/>using</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>nrf_nfct_field_state_t.</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__nfct__hal_1ga0d8d523a9ee9099f602643eaff69ee41" kindref="member">nrf_nfct_field_status_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="596"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>minimum<sp/>Frame<sp/>Delay<sp/>Time<sp/>value.</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*<sp/>@details<sp/>This<sp/>is<sp/>the<sp/>minimum<sp/>value<sp/>for<sp/>Frame<sp/>Delay<sp/>Timer.<sp/>It<sp/>controls<sp/>the<sp/>shortest<sp/>time<sp/>between</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>last<sp/>symbol<sp/>of<sp/>the<sp/>last<sp/>received<sp/>frame<sp/>and<sp/>the<sp/>start<sp/>of<sp/>the<sp/>transmission<sp/>of<sp/>a<sp/>new</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TX<sp/>frame.</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>minimum<sp/>Frame<sp/>Delay<sp/>Time<sp/>value<sp/>in<sp/>13.56-MHz<sp/>clock<sp/>ticks.</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__nfct__hal_1gafe66d96e4f86347fbdc01516d55b3e42" kindref="member">nrf_nfct_frame_delay_min_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="609"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>minimum<sp/>Frame<sp/>Delay<sp/>Time<sp/>value.</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/>*<sp/>@details<sp/>This<sp/>is<sp/>the<sp/>minimum<sp/>value<sp/>for<sp/>Frame<sp/>Delay<sp/>Timer.<sp/>It<sp/>controls<sp/>the<sp/>shortest<sp/>time<sp/>between</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>last<sp/>symbol<sp/>of<sp/>the<sp/>last<sp/>received<sp/>frame<sp/>and<sp/>the<sp/>start<sp/>of<sp/>the<sp/>transmission<sp/>of<sp/>a<sp/>new</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TX<sp/>frame.</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>frame_delay_min<sp/>Minimum<sp/>Frame<sp/>Delay<sp/>Time<sp/>value<sp/>in<sp/>13.56-MHz<sp/>clock<sp/>ticks.</highlight></codeline>
<codeline lineno="618"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga9778ee30876a8100798529972b0eedae" kindref="member">nrf_nfct_frame_delay_min_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame_delay_min);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="622"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>maximum<sp/>Frame<sp/>Delay<sp/>Time<sp/>value.</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/>*<sp/>@details<sp/>This<sp/>is<sp/>the<sp/>maximum<sp/>value<sp/>for<sp/>Frame<sp/>Delay<sp/>Timer.<sp/>It<sp/>controls<sp/>the<sp/>longest<sp/>time<sp/>between</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>last<sp/>symbol<sp/>of<sp/>the<sp/>last<sp/>received<sp/>frame<sp/>and<sp/>the<sp/>start<sp/>of<sp/>the<sp/>transmission<sp/>of<sp/>a<sp/>new</highlight></codeline>
<codeline lineno="627"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TX<sp/>frame.<sp/>If<sp/>no<sp/>transmission<sp/>starts<sp/>before<sp/>the<sp/>Frame<sp/>Delay<sp/>Timer<sp/>timeout,</highlight></codeline>
<codeline lineno="628"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>NRF_NFCT_ERROR_FRAMEDELAYTIMEOUT_MASK<sp/>is<sp/>set.</highlight></codeline>
<codeline lineno="629"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>maximum<sp/>Frame<sp/>Delay<sp/>Time<sp/>value<sp/>in<sp/>13.56-MHz<sp/>clock<sp/>ticks.</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga6ba009cc5c44a921574e8f2f6510b3d3" kindref="member">nrf_nfct_frame_delay_max_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="636"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>maximum<sp/>Frame<sp/>Delay<sp/>Time<sp/>value.</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*<sp/>@details<sp/>This<sp/>is<sp/>the<sp/>maximum<sp/>value<sp/>for<sp/>Frame<sp/>Delay<sp/>Timer.<sp/>It<sp/>controls<sp/>the<sp/>longest<sp/>time<sp/>between</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>last<sp/>symbol<sp/>of<sp/>the<sp/>last<sp/>received<sp/>frame<sp/>and<sp/>the<sp/>start<sp/>of<sp/>the<sp/>transmission<sp/>of<sp/>a<sp/>new</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TX<sp/>frame.<sp/>If<sp/>no<sp/>transmission<sp/>starts<sp/>before<sp/>the<sp/>Frame<sp/>Delay<sp/>Timer<sp/>timeout,</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>NRF_NFCT_ERROR_FRAMEDELAYTIMEOUT_MASK<sp/>is<sp/>set.</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="644"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="645"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>frame_delay_max<sp/>Maximum<sp/>Frame<sp/>Delay<sp/>Time<sp/>value<sp/>in<sp/>13.56-MHz<sp/>clock<sp/>ticks.</highlight></codeline>
<codeline lineno="646"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gaaa3a9a207112ed2c58567c22b300dc51" kindref="member">nrf_nfct_frame_delay_max_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame_delay_max);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="650"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>Frame<sp/>Delay<sp/>Mode<sp/>configuration.</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="653"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="654"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="655"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>configured<sp/>Frame<sp/>Delay<sp/>Mode.</highlight></codeline>
<codeline lineno="656"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1ga440398a7c43c28c619f2326cf0d48408" kindref="member">nrf_nfct_frame_delay_mode_t</ref><sp/><ref refid="group__nrf__nfct__hal_1ga1f44a3c0ca480bf85a37364857ef2225" kindref="member">nrf_nfct_frame_delay_mode_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="660"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>NFC<sp/>Frame<sp/>Delay<sp/>Mode<sp/>configuration.</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="663"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="664"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>frame_delay_mode<sp/>Frame<sp/>Delay<sp/>Mode<sp/>configuration.</highlight></codeline>
<codeline lineno="665"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga2e5ec700490c0c74547e7bf9f595f566" kindref="member">nrf_nfct_frame_delay_mode_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga440398a7c43c28c619f2326cf0d48408" kindref="member">nrf_nfct_frame_delay_mode_t</ref><sp/>frame_delay_mode);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="669"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>NFCT<sp/>RX/TX<sp/>buffer.</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="674"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>configured<sp/>pointer<sp/>to<sp/>the<sp/>receive<sp/>or<sp/>transmit<sp/>buffer.</highlight></codeline>
<codeline lineno="675"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/>*<sp/><ref refid="group__nrf__nfct__hal_1ga37516865767004071c729500413c989c" kindref="member">nrf_nfct_rxtx_buffer_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="678"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>the<sp/>NFCT<sp/>RX/TX<sp/>buffer<sp/>(address<sp/>and<sp/>maximum<sp/>length).</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*<sp/>@note<sp/>Buffer<sp/>for<sp/>the<sp/>NFC<sp/>RX/TX<sp/>data<sp/>is<sp/>used<sp/>by<sp/>EasyDMA<sp/>and<sp/>must<sp/>be<sp/>located<sp/>in<sp/>RAM.</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="683"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="684"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_rxtx_buf<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>receive<sp/>or<sp/>transmit<sp/>buffer.</highlight></codeline>
<codeline lineno="685"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>max_txrx_len<sp/>Maximum<sp/>receive<sp/>or<sp/>transmit<sp/>length<sp/>in<sp/>bytes</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(size<sp/>of<sp/>the<sp/>RAM<sp/>buffer<sp/>for<sp/>EasyDMA).</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga11064ed7f1e9e9dd51f2da645f2e3153" kindref="member">nrf_nfct_rxtx_buffer_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_rxtx_buf,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_txrx_len);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="692"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="693"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>NFCT<sp/>RX/TX<sp/>maximum<sp/>buffer<sp/>length.</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>configured<sp/>maximum<sp/>receive<sp/>or<sp/>transmit<sp/>length<sp/>in<sp/>bytes<sp/>(size<sp/>of<sp/>the<sp/>RX/TX</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>for<sp/>EasyDMA).</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__nfct__hal_1gaab957ec795c0a1a5c89ed7c8b5ffa08b" kindref="member">nrf_nfct_max_rxtx_length_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="702"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>flags<sp/>for<sp/>NFC<sp/>frame<sp/>transmission<sp/>configuration.</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>flags<sp/>of<sp/>the<sp/>NFCT<sp/>frame<sp/>transmission<sp/>configuration,<sp/>defined<sp/>in</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>nrf_nfct_tx_frame_config_t.</highlight></codeline>
<codeline lineno="709"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__nfct__hal_1ga315921e064488658728101a955164691" kindref="member">nrf_nfct_tx_frame_config_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="712"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>up<sp/>the<sp/>flags<sp/>of<sp/>the<sp/>NFC<sp/>frame<sp/>transmission<sp/>configuration.</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>flags<sp/>Flags<sp/>for<sp/>NFCT<sp/>TX<sp/>configuration.<sp/>Use<sp/>@ref<sp/>nrf_nfct_tx_frame_config_t<sp/>for</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setting.</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga6c7dd65d09a963e920005015be39343a" kindref="member">nrf_nfct_tx_frame_config_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>flags);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="721"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>length<sp/>of<sp/>the<sp/>configured<sp/>transmission<sp/>frame.</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/>*<sp/>@note<sp/>NFC<sp/>frames<sp/>do<sp/>not<sp/>have<sp/>to<sp/>consist<sp/>of<sp/>full<sp/>bytes<sp/>only,<sp/>therefore<sp/>data<sp/>amount</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>transmission<sp/>is<sp/>configured<sp/>in<sp/>number<sp/>of<sp/>bits.</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="729"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>bits<sp/>to<sp/>be<sp/>sent<sp/>excluding<sp/>CRC,<sp/>parity,<sp/>SoF,<sp/>and<sp/>EoF.</highlight></codeline>
<codeline lineno="730"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__nfct__hal_1ga43a2addb4400bf65e0458f71c1d17a06" kindref="member">nrf_nfct_tx_bits_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="733"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>up<sp/>the<sp/>NFC<sp/>frame<sp/>transmission.</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*<sp/>@details<sp/>Set<sp/>the<sp/>number<sp/>of<sp/>TX<sp/>bits<sp/>excluding<sp/>CRC,<sp/>parity,<sp/>SoF,<sp/>and<sp/>EoF.</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/>@note<sp/>Source<sp/>of<sp/>data<sp/>for<sp/>transmission<sp/>is<sp/>set<sp/>by<sp/>using<sp/>@ref<sp/>nrf_nfct_rxtx_buffer_set.</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*<sp/>@note<sp/>NFC<sp/>frames<sp/>do<sp/>not<sp/>have<sp/>to<sp/>consist<sp/>of<sp/>full<sp/>bytes<sp/>only,<sp/>therefore<sp/>data<sp/>amount</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>transmission<sp/>is<sp/>configured<sp/>in<sp/>number<sp/>of<sp/>bits.</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>tx_bits<sp/>Overall<sp/>number<sp/>of<sp/>bits<sp/>to<sp/>be<sp/>sent.</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gadf4e35817a76e539d25ef3112278f13b" kindref="member">nrf_nfct_tx_bits_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint16_t<sp/>tx_bits);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="747"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>flags<sp/>of<sp/>the<sp/>NFC<sp/>frame<sp/>reception<sp/>configuration.</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>flags<sp/>for<sp/>NFCT<sp/>frame<sp/>reception<sp/>configuration,<sp/>defined<sp/>in</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>nrf_nfct_rx_frame_config_t.</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__nfct__hal_1gaae9ea4c1cbaa9f17a225647092b86e2a" kindref="member">nrf_nfct_rx_frame_config_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="757"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>up<sp/>the<sp/>NFC<sp/>frame<sp/>reception.</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*<sp/>@note<sp/>Destination<sp/>for<sp/>the<sp/>received<sp/>data<sp/>is<sp/>set<sp/>using<sp/>@ref<sp/>nrf_nfct_rxtx_buffer_set.</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>flags<sp/>NFCT<sp/>RX<sp/>configuration<sp/>flags.<sp/>Use<sp/>@ref<sp/>nrf_nfct_rx_frame_config_t<sp/>for<sp/>setting</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>desired<sp/>configuration.</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga8faba62001014de0fdb87babcd99e6f3" kindref="member">nrf_nfct_rx_frame_config_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>flags);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="768"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>bits<sp/>received<sp/>from<sp/>the<sp/>NFC<sp/>poller.</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>crc_excluded<sp/>Flag<sp/>for<sp/>excluding<sp/>CRC<sp/>size<sp/>from<sp/>calculation.</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="774"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>received<sp/>bits<sp/>including<sp/>or<sp/>excluding<sp/>CRC,<sp/>and<sp/>excluding<sp/>parity</highlight></codeline>
<codeline lineno="775"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>SoF/EoF<sp/>framing.</highlight></codeline>
<codeline lineno="776"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__nfct__hal_1gaa2736d34816f988d3a0635e26486db97" kindref="member">nrf_nfct_rx_bits_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>crc_excluded);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="779"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>NFCID1<sp/>(NFC<sp/>tag<sp/>identifier).</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>always<sp/>returns<sp/>the<sp/>full<sp/>configuration<sp/>of<sp/>the<sp/>NFCID1<sp/>setting<sp/>(10<sp/>bytes),</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>regardless<sp/>of<sp/>the<sp/>NFCID1<sp/>size.<sp/>The<sp/>NFCID1<sp/>size<sp/>can<sp/>be<sp/>configured<sp/>using</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>@ref<sp/>nrf_nfct_sensres_nfcid1_size_set<sp/>or<sp/>@ref<sp/>nrf_nfct_nfcid1_set.</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="786"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="787"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>p_nfcid1_buf<sp/>Pointer<sp/>to<sp/>a<sp/>buffer<sp/>for<sp/>the<sp/>NDFCID1<sp/>parameter.</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>NFCID1<sp/>values<sp/>are<sp/>in<sp/>little<sp/>endian<sp/>order,</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>is:<sp/>|NFCID1_3RD_LAST|NFCID1_2ND_LAST|NFCID1_LAST|.</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/>*<sp/>@return<sp/>Configured<sp/>NFCID1<sp/>length</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref><sp/><ref refid="group__nrf__nfct__hal_1gaafe6bb2ce4b1cd23027b772e36238879" kindref="member">nrf_nfct_nfcid1_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_nfcid1_buf);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="797"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="798"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>NFCID1<sp/>(NFC<sp/>tag<sp/>identifier).</highlight></codeline>
<codeline lineno="799"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="800"><highlight class="comment"><sp/>*<sp/>@note<sp/>This<sp/>function<sp/>also<sp/>configures<sp/>the<sp/>NFCIDSIZE<sp/>field<sp/>in<sp/>the<sp/>SENSRES</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>of<sp/>the<sp/>NFCT<sp/>peripheral.</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_nfcid1_buf<sp/>Pointer<sp/>to<sp/>the<sp/>buffer<sp/>with<sp/>NDFCID1<sp/>bytes.</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>nfcid1_size<sp/><sp/>Size<sp/>of<sp/>the<sp/>NFCID1<sp/>in<sp/>bytes.</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga08032af670d283b99056a9c476a63213" kindref="member">nrf_nfct_nfcid1_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_nfcid1_buf,</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref><sp/>nfcid1_size);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_AUTOCOLRES_CONFIG_REG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="812"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>setting<sp/>for<sp/>the<sp/>automatic<sp/>collision<sp/>resolution.</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>automatic<sp/>collision<sp/>resolution<sp/>mechanism<sp/>as<sp/>defined<sp/>in<sp/>ISO<sp/>14443-3<sp/>and<sp/>NFC<sp/>Forum</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Digital<sp/>Protocol<sp/>Technical<sp/>Specification<sp/>2.0,<sp/>section<sp/>6.</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>If<sp/>automatic<sp/>collision<sp/>resolution<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>If<sp/>automatic<sp/>collision<sp/>resolution<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga3f50dadcea361820f3ad134bfd85e3fd" kindref="member">nrf_nfct_autocolres_is_enabled</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="825"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>automatic<sp/>collision<sp/>resolution.</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>automatic<sp/>collision<sp/>resolution<sp/>mechanism<sp/>as<sp/>defined<sp/>in<sp/>ISO<sp/>14443-3<sp/>and<sp/>NFC<sp/>Forum</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Digital<sp/>Protocol<sp/>Technical<sp/>Specification<sp/>2.0,<sp/>section<sp/>6.</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gae5bb4dbf61bf182bae90d030d2dc1b95" kindref="member">nrf_nfct_autocolres_enable</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="835"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>automatic<sp/>collision<sp/>resolution.</highlight></codeline>
<codeline lineno="837"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="838"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="839"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="840"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>automatic<sp/>collision<sp/>resolution<sp/>mechanism<sp/>as<sp/>defined<sp/>in<sp/>ISO<sp/>14443-3<sp/>and<sp/>NFC<sp/>Forum</highlight></codeline>
<codeline lineno="841"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Digital<sp/>Protocol<sp/>Technical<sp/>Specification<sp/>2.0,<sp/>section<sp/>6.</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gaeaa0ee17b9bac6459e37de5590c5053f" kindref="member">nrf_nfct_autocolres_disable</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_AUTOCOLRES_CONFIG_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="846"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>NFCID1<sp/>size<sp/>from<sp/>the<sp/>SENS_RES<sp/>frame<sp/>configuration.</highlight></codeline>
<codeline lineno="848"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="849"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>SENS_RES<sp/>frame<sp/>is<sp/>handled<sp/>automatically<sp/>by<sp/>the<sp/>NFCT<sp/>hardware.</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/>*<sp/>@return<sp/>NFCID1<sp/>(tag<sp/>identifier)<sp/>size.</highlight></codeline>
<codeline lineno="854"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref><sp/><ref refid="group__nrf__nfct__hal_1gac42dc4d4d429ab437bf80ebec1a386bc" kindref="member">nrf_nfct_sensres_nfcid1_size_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="858"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>NFCID1<sp/>(tag<sp/>identifier)<sp/>size.field<sp/>in<sp/>the<sp/>SENS_RES<sp/>frame</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configuration.</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="862"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>SENS_RES<sp/>frame<sp/>is<sp/>handled<sp/>automatically<sp/>by<sp/>the<sp/>NFCT<sp/>hardware.</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="864"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="865"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>nfcid1_size<sp/>NFCID1<sp/>(tag<sp/>identifier)<sp/>size.</highlight></codeline>
<codeline lineno="866"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="867"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrf_nfct_nfcid1_set()</highlight></codeline>
<codeline lineno="868"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gaccb08875b749f22abf8dcaa00a1ae891" kindref="member">nrf_nfct_sensres_nfcid1_size_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref><sp/>nfcid1_size);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="873"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>Bit<sp/>Frame<sp/>SDD<sp/>field<sp/>from<sp/>the<sp/>SENS_RES<sp/>frame<sp/>configuration.</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>SENS_RES<sp/>frame<sp/>is<sp/>handled<sp/>automatically<sp/>by<sp/>the<sp/>NFCT<sp/>hardware.</highlight></codeline>
<codeline lineno="877"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="878"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="880"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>Bit<sp/>Frame<sp/>SDD<sp/>field<sp/>configuration.</highlight></codeline>
<codeline lineno="881"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1ga0a21c500bdf07fbd27a8c1a638302f45" kindref="member">nrf_nfct_sensres_bit_frame_sdd_t</ref><sp/><ref refid="group__nrf__nfct__hal_1ga82714bc15f7655ab7dfbb496805ad424" kindref="member">nrf_nfct_sensres_bit_frame_sdd_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="885"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>Bit<sp/>Frame<sp/>SDD<sp/>field<sp/>in<sp/>the<sp/>SENS_RES<sp/>frame<sp/>configuration.</highlight></codeline>
<codeline lineno="887"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="888"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>SENS_RES<sp/>frame<sp/>is<sp/>handled<sp/>automatically<sp/>by<sp/>the<sp/>NFCT<sp/>hardware.</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>bit_frame_sdd<sp/>The<sp/>Bit<sp/>Frame<sp/>SDD<sp/>field<sp/>configuration.</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga68e3f17113189c55c33f276badfc0722" kindref="member">nrf_nfct_sensres_bit_frame_sdd_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga0a21c500bdf07fbd27a8c1a638302f45" kindref="member">nrf_nfct_sensres_bit_frame_sdd_t</ref><sp/>bit_frame_sdd);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="897"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="898"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>Platform<sp/>Config<sp/>field<sp/>from<sp/>the<sp/>SENS_RES<sp/>frame<sp/>configuration.</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>SENS_RES<sp/>frame<sp/>is<sp/>handled<sp/>automatically<sp/>by<sp/>the<sp/>NFCT<sp/>hardware.</highlight></codeline>
<codeline lineno="901"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="902"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="903"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="904"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>Platform<sp/>Config<sp/>field<sp/>configuration.</highlight></codeline>
<codeline lineno="905"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__nfct__hal_1gac3dad0d77b9f35fea328bbdd91cc0b02" kindref="member">nrf_nfct_sensres_platform_config_t</ref></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1ga7157d8b85ed1d9d6859ee3fa3fbb52af" kindref="member">nrf_nfct_sensres_platform_config_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="909"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="910"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>Platform<sp/>Config<sp/>field<sp/>in<sp/>the<sp/>SENS_RES<sp/>frame<sp/>configuration.</highlight></codeline>
<codeline lineno="911"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>SENS_RES<sp/>frame<sp/>is<sp/>handled<sp/>automatically<sp/>by<sp/>the<sp/>NFCT<sp/>hardware.</highlight></codeline>
<codeline lineno="913"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>platform_config<sp/>The<sp/>Platform<sp/>Config<sp/>field<sp/>configuration.</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gae25e43464231c4d4c280db7bebcd5b6a" kindref="member">nrf_nfct_sensres_platform_config_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gac3dad0d77b9f35fea328bbdd91cc0b02" kindref="member">nrf_nfct_sensres_platform_config_t</ref><sp/>platform_config);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="921"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>CASCADE<sp/>bit<sp/>of<sp/>the<sp/>SEL_RES<sp/>frame.</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>CASCADE<sp/>bit<sp/>in<sp/>the<sp/>SEL_RES<sp/>register<sp/>is<sp/>handled<sp/>automatically<sp/>by<sp/>the<sp/>NFCT<sp/>hardware</highlight></codeline>
<codeline lineno="925"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>indicates<sp/>the<sp/>status<sp/>of<sp/>the<sp/>NFCID1<sp/>read<sp/>operation<sp/>to<sp/>the<sp/>NFC<sp/>poller<sp/>according<sp/>to</highlight></codeline>
<codeline lineno="926"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>NFC<sp/>Forum<sp/>Digital<sp/>Protocol<sp/>Speficiation<sp/>2.0,<sp/>section<sp/>6.8.2.</highlight></codeline>
<codeline lineno="927"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="928"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="929"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>If<sp/>NFCID1<sp/>read<sp/>procedure<sp/>is<sp/>not<sp/>complete.</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>If<sp/>NFCID1<sp/>read<sp/>procedure<sp/>is<sp/>complete.</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga5c9503e8c40d67c422a8dcf9ed0dff28" kindref="member">nrf_nfct_selres_cascade_check</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="935"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="936"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>Protocol<sp/>field<sp/>in<sp/>the<sp/>SEL_RES<sp/>frame.</highlight></codeline>
<codeline lineno="937"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>SEL_RES<sp/>frame<sp/>is<sp/>handled<sp/>automatically<sp/>by<sp/>the<sp/>NFCT<sp/>hardware.</highlight></codeline>
<codeline lineno="939"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="940"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="941"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/>*<sp/>@return<sp/>Value<sp/>of<sp/>the<sp/>Protocol<sp/>field<sp/>in<sp/>the<sp/>SEL_RES<sp/>frame.</highlight></codeline>
<codeline lineno="943"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1ga184ca02cc782ae566ecef8389e1d7ca7" kindref="member">nrf_nfct_selres_protocol_t</ref><sp/><ref refid="group__nrf__nfct__hal_1ga5eca78bed4e42015b4af6d89eb288b71" kindref="member">nrf_nfct_selres_protocol_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="947"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="948"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>Protocol<sp/>field<sp/>in<sp/>the<sp/>SEL_RES<sp/>frame<sp/>configuration.</highlight></codeline>
<codeline lineno="949"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="950"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>SEL_RES<sp/>frame<sp/>is<sp/>handled<sp/>automatically<sp/>by<sp/>the<sp/>NFCT<sp/>hardware.</highlight></codeline>
<codeline lineno="951"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>sel_res_protocol<sp/>Value<sp/>of<sp/>the<sp/>Protocol<sp/>field<sp/>in<sp/>the<sp/>SEL_RES<sp/>frame.</highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga761a688769bda6dac33596ba375c9e4a" kindref="member">nrf_nfct_selres_protocol_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga184ca02cc782ae566ecef8389e1d7ca7" kindref="member">nrf_nfct_selres_protocol_t</ref><sp/>sel_res_protocol);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="958"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>SEL_RES<sp/>frame<sp/>configuration.</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>SEL_RES<sp/>frame<sp/>is<sp/>handled<sp/>automatically<sp/>by<sp/>the<sp/>NFCT<sp/>hardware.</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="964"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/>*<sp/>@return<sp/>SEL_RES<sp/>frame<sp/>configuration.</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga8d7a711de7c19239c319516717daeb64" kindref="member">nrf_nfct_selres_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="969"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>SEL_RES<sp/>frame<sp/>configuration.</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/>*<sp/>@details<sp/>The<sp/>SEL_RES<sp/>frame<sp/>is<sp/>handled<sp/>automatically<sp/>by<sp/>the<sp/>NFCT<sp/>hardware.</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="974"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="975"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>selres<sp/>SEL_RES<sp/>frame<sp/>configuration.</highlight></codeline>
<codeline lineno="976"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga3b3b320f098e79afbaaa83f239c42e31" kindref="member">nrf_nfct_selres_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>selres);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_PAD_CONFIG_REG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="980"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="981"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>or<sp/>disabling<sp/>the<sp/>NFC<sp/>pad<sp/>configuration.</highlight></codeline>
<codeline lineno="982"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="983"><highlight class="comment"><sp/>*<sp/>@details<sp/>When<sp/>the<sp/>NFC<sp/>pads<sp/>are<sp/>enabled,<sp/>they<sp/>are<sp/>configured<sp/>as<sp/>the<sp/>NFC</highlight></codeline>
<codeline lineno="984"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>antenna<sp/>pins,<sp/>and<sp/>the<sp/>NFC<sp/>pins<sp/>protection<sp/>mechanism<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="985"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>the<sp/>NFC<sp/>pads<sp/>are<sp/>disabled,<sp/>they<sp/>are<sp/>configured<sp/>as<sp/>GPIO<sp/>pins.</highlight></codeline>
<codeline lineno="986"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="987"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="988"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>the<sp/>NFC<sp/>pads<sp/>are<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="989"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga871e391e272696e982ccf2ab42d66087" kindref="member">nrf_nfct_pad_config_enable_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="992"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>NFC<sp/>pads<sp/>configuration.</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="995"><highlight class="comment"><sp/>*<sp/>@details<sp/>When<sp/>the<sp/>NFC<sp/>pads<sp/>are<sp/>enabled,<sp/>they<sp/>are<sp/>configured<sp/>as<sp/>the<sp/>NFC</highlight></codeline>
<codeline lineno="996"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>antenna<sp/>pins,<sp/>and<sp/>the<sp/>NFC<sp/>pins<sp/>protection<sp/>mechanism<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="997"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>When<sp/>the<sp/>NFC<sp/>pads<sp/>are<sp/>disabled,<sp/>they<sp/>are<sp/>configured<sp/>as<sp/>GPIO<sp/>pins.</highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="999"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>NFC<sp/>pads<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>NFC<sp/>pads<sp/>are<sp/>disabled.</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gaadb18c43aea711f4b6fcd7be0cdffbf9" kindref="member">nrf_nfct_pad_config_enable_check</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_PAD_CONFIG_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_BIAS_CONFIG_TRIM_REG</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1008"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>bias<sp/>configuration.</highlight></codeline>
<codeline lineno="1010"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1011"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1012"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_bias_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>bias<sp/>configuration<sp/>parameters.</highlight></codeline>
<codeline lineno="1013"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga9752f169298bde1eb999b7cee4638f49" kindref="member">nrf_nfct_bias_config_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__nfct__bias__config__t" kindref="compound">nrf_nfct_bias_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_bias_config);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1017"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="1018"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>bias<sp/>configuration.</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="1021"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_bias_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>to<sp/>be<sp/>filled<sp/>with<sp/>bias<sp/>configuration<sp/>parameters.</highlight></codeline>
<codeline lineno="1022"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga7a54c231a83731dccf020275ae0b00c0" kindref="member">nrf_nfct_bias_config_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__nfct__bias__config__t" kindref="compound">nrf_nfct_bias_config_t</ref><sp/>*<sp/>p_bias_config);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_BIAS_CONFIG_TRIM_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga79ca17491a7ab505d2caf331f2b45c45" kindref="member">nrf_nfct_task_trigger</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__nfct__hal_1ga90998750300456aedbce0700a9df232a" kindref="member">nrf_nfct_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>1UL;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1gaa0b23785c9a3fc0b0a94b03505293154" kindref="member">nrf_nfct_task_address_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga90998750300456aedbce0700a9df232a" kindref="member">nrf_nfct_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gac8d0986e227f0414b1aa3a0fb58f0628" kindref="member">nrf_nfct_event_clear</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__nfct__hal_1ga0a44934a729ad8469a53a65318e8402d" kindref="member">nrf_nfct_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0UL;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga9e50defad8a4cd3d018851756684dc68" kindref="member">nrf_nfct_event_check</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__nfct__hal_1ga0a44934a729ad8469a53a65318e8402d" kindref="member">nrf_nfct_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="1046"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga7e8a659e4d03a530c9922cf4ac26bc3c" kindref="member">nrf_nfct_event_address_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga0a44934a729ad8469a53a65318e8402d" kindref="member">nrf_nfct_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga4487623556dab1c328e34ff96395156d" kindref="member">nrf_nfct_shorts_enable</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>short_mask)</highlight></codeline>
<codeline lineno="1057"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>|=<sp/>short_mask;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga0fe39dd786e8f19f214501cbec466e00" kindref="member">nrf_nfct_shorts_disable</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>short_mask)</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>&amp;=<sp/>~short_mask;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga3585ee24da28125f6d59cb7e2b0f8bc1" kindref="member">nrf_nfct_shorts_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SHORTS;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga3dc3d589230f0f22f13745fbfd0cd5dc" kindref="member">nrf_nfct_shorts_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>short_mask)</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>=<sp/>short_mask;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga083b58b924c781b8ea9b7a901e5c8d0e" kindref="member">nrf_nfct_int_enable</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga40870c355963e7a61354adc085b8c132" kindref="member">nrf_nfct_int_enable_check</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga60fdd94f14ad586f5de1fd2a607c2fa3" kindref="member">nrf_nfct_int_enable_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga692fcd9a52ebdb75ed137cc29f06d04c" kindref="member">nrf_nfct_int_disable</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="1092"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_MODULATION_PSEL_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gadee0eef3c3cfe89e730dded70de30eae" kindref="member">nrf_nfct_mod_ctrl_pin_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mod_ctrl_pin)</highlight></codeline>
<codeline lineno="1098"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODULATIONPSEL<sp/>=<sp/>mod_ctrl_pin;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga4e9255d4da9a6ce15d8d3d9d179412b3" kindref="member">nrf_nfct_mod_ctrl_pin_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;MODULATIONPSEL;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_MODULATION_PSEL_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_MODULATION_CTRL_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gaa579590b5349be09002fac3c45bc4b52" kindref="member">nrf_nfct_modulation_output_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga573f6e234b255f96cfa9516c5297345b" kindref="member">nrf_nfct_modulation_ctrl_t</ref><sp/>mod_ctrl)</highlight></codeline>
<codeline lineno="1111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODULATIONCTRL<sp/>=<sp/>(uint32_t)mod_ctrl;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1ga573f6e234b255f96cfa9516c5297345b" kindref="member">nrf_nfct_modulation_ctrl_t</ref><sp/><ref refid="group__nrf__nfct__hal_1gab54602dea9536f30f146acd7c044f700" kindref="member">nrf_nfct_modulation_output_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__nfct__hal_1ga573f6e234b255f96cfa9516c5297345b" kindref="member">nrf_nfct_modulation_ctrl_t</ref>)(p_reg-&gt;MODULATIONCTRL<sp/>&amp;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_MODULATIONCTRL_MODULATIONCTRL_Msk);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_MODULATION_CTRL_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1gae885af4d5554fc9011d4fa7a7b48887a" kindref="member">nrf_nfct_error_status_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;ERRORSTATUS;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga87592076f3fe8deb67a9051eab3cb9a1" kindref="member">nrf_nfct_error_status_clear</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>error_flags)</highlight></codeline>
<codeline lineno="1129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERRORSTATUS<sp/>=<sp/>error_flags;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga4df45a5ae798f487f02b7a9b492b4def" kindref="member">nrf_nfct_rx_frame_status_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;FRAMESTATUS.RX;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga71053304120e72fece9d5aa975d38ea6" kindref="member">nrf_nfct_rx_frame_status_clear</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>framestatus_flags)</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;FRAMESTATUS.RX<sp/>=<sp/>framestatus_flags;</highlight></codeline>
<codeline lineno="1142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_TAG_STATE_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__nfct__hal_1gad41c75935da91df206b39337d615780d" kindref="member">nrf_nfct_tag_state_t</ref><sp/><ref refid="group__nrf__nfct__hal_1ga3bdf972ded34bf3ceba3e7f2586a68fb" kindref="member">nrf_nfct_tag_state_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__nfct__hal_1gad41c75935da91df206b39337d615780d" kindref="member">nrf_nfct_tag_state_t</ref>)((p_reg-&gt;NFCTAGSTATE<sp/>&amp;<sp/>NFCT_NFCTAGSTATE_NFCTAGSTATE_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_NFCTAGSTATE_NFCTAGSTATE_Pos);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_TAG_STATE_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_SLEEP_STATE_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__nfct__hal_1gaed596f092cc3971acade2458023e3c3a" kindref="member">nrf_nfct_sleep_state_t</ref><sp/><ref refid="group__nrf__nfct__hal_1ga3cd109684521662e9304a5f8e007f79b" kindref="member">nrf_nfct_sleep_state_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__nfct__hal_1gaed596f092cc3971acade2458023e3c3a" kindref="member">nrf_nfct_sleep_state_t</ref>)((p_reg-&gt;SLEEPSTATE<sp/>&amp;<sp/>NFCT_SLEEPSTATE_SLEEPSTATE_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_SLEEPSTATE_SLEEPSTATE_Pos);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_SLEEP_STATE_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__nfct__hal_1ga0d8d523a9ee9099f602643eaff69ee41" kindref="member">nrf_nfct_field_status_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)(p_reg-&gt;FIELDPRESENT);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__nfct__hal_1gafe66d96e4f86347fbdc01516d55b3e42" kindref="member">nrf_nfct_frame_delay_min_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)((p_reg-&gt;FRAMEDELAYMIN<sp/>&amp;<sp/>NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Pos);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga9778ee30876a8100798529972b0eedae" kindref="member">nrf_nfct_frame_delay_min_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint16_t<sp/>frame_delay_min)</highlight></codeline>
<codeline lineno="1172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;FRAMEDELAYMIN<sp/>=</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)frame_delay_min<sp/>&lt;&lt;<sp/>NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_FRAMEDELAYMIN_FRAMEDELAYMIN_Msk;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga6ba009cc5c44a921574e8f2f6510b3d3" kindref="member">nrf_nfct_frame_delay_max_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;FRAMEDELAYMAX<sp/>&amp;<sp/>NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Pos;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gaaa3a9a207112ed2c58567c22b300dc51" kindref="member">nrf_nfct_frame_delay_max_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>frame_delay_max)</highlight></codeline>
<codeline lineno="1185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;FRAMEDELAYMAX<sp/>=</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)frame_delay_max<sp/>&lt;&lt;<sp/>NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_FRAMEDELAYMAX_FRAMEDELAYMAX_Msk;</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1ga440398a7c43c28c619f2326cf0d48408" kindref="member">nrf_nfct_frame_delay_mode_t</ref><sp/><ref refid="group__nrf__nfct__hal_1ga1f44a3c0ca480bf85a37364857ef2225" kindref="member">nrf_nfct_frame_delay_mode_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__nfct__hal_1ga440398a7c43c28c619f2326cf0d48408" kindref="member">nrf_nfct_frame_delay_mode_t</ref>)(p_reg-&gt;FRAMEDELAYMODE<sp/>&amp;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_FRAMEDELAYMODE_FRAMEDELAYMODE_Msk);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga2e5ec700490c0c74547e7bf9f595f566" kindref="member">nrf_nfct_frame_delay_mode_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga440398a7c43c28c619f2326cf0d48408" kindref="member">nrf_nfct_frame_delay_mode_t</ref><sp/>frame_delay_mode)</highlight></codeline>
<codeline lineno="1200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;FRAMEDELAYMODE<sp/>=<sp/>(uint32_t)frame_delay_mode;</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/>*<sp/><ref refid="group__nrf__nfct__hal_1ga37516865767004071c729500413c989c" kindref="member">nrf_nfct_rxtx_buffer_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t<sp/>*)(p_reg-&gt;PACKETPTR);</highlight></codeline>
<codeline lineno="1207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga11064ed7f1e9e9dd51f2da645f2e3153" kindref="member">nrf_nfct_rxtx_buffer_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_rxtx_buf,</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_txrx_len)</highlight></codeline>
<codeline lineno="1212"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PACKETPTR<sp/>=<sp/>(uint32_t)p_rxtx_buf;</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MAXLEN<sp/><sp/><sp/><sp/>=<sp/>((uint32_t)max_txrx_len<sp/>&lt;&lt;<sp/>NFCT_MAXLEN_MAXLEN_Pos)<sp/>&amp;<sp/>NFCT_MAXLEN_MAXLEN_Msk;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__nfct__hal_1gaab957ec795c0a1a5c89ed7c8b5ffa08b" kindref="member">nrf_nfct_max_rxtx_length_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)((p_reg-&gt;MAXLEN<sp/>&amp;<sp/>NFCT_MAXLEN_MAXLEN_Msk)<sp/>&gt;&gt;<sp/>NFCT_MAXLEN_MAXLEN_Pos);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__nfct__hal_1ga315921e064488658728101a955164691" kindref="member">nrf_nfct_tx_frame_config_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)(p_reg-&gt;TXD.FRAMECONFIG);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga6c7dd65d09a963e920005015be39343a" kindref="member">nrf_nfct_tx_frame_config_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>flags)</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXD.FRAMECONFIG<sp/>=<sp/>flags;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__nfct__hal_1ga43a2addb4400bf65e0458f71c1d17a06" kindref="member">nrf_nfct_tx_bits_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)(p_reg-&gt;TXD.AMOUNT<sp/>&amp;<sp/>(NFCT_TXD_AMOUNT_TXDATABITS_Msk<sp/>|</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_TXD_AMOUNT_TXDATABYTES_Msk));</highlight></codeline>
<codeline lineno="1236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gadf4e35817a76e539d25ef3112278f13b" kindref="member">nrf_nfct_tx_bits_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint16_t<sp/>tx_bits)</highlight></codeline>
<codeline lineno="1239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TXD.AMOUNT<sp/>=<sp/>(tx_bits<sp/>&amp;<sp/>(NFCT_TXD_AMOUNT_TXDATABITS_Msk<sp/>|</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_TXD_AMOUNT_TXDATABYTES_Msk));</highlight></codeline>
<codeline lineno="1242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__nfct__hal_1gaae9ea4c1cbaa9f17a225647092b86e2a" kindref="member">nrf_nfct_rx_frame_config_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)(p_reg-&gt;RXD.FRAMECONFIG);</highlight></codeline>
<codeline lineno="1247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga8faba62001014de0fdb87babcd99e6f3" kindref="member">nrf_nfct_rx_frame_config_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>flags)</highlight></codeline>
<codeline lineno="1250"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RXD.FRAMECONFIG<sp/>=<sp/>flags;</highlight></codeline>
<codeline lineno="1252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__nfct__hal_1gaa2736d34816f988d3a0635e26486db97" kindref="member">nrf_nfct_rx_bits_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>crc_excluded)</highlight></codeline>
<codeline lineno="1255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>rx_bits<sp/>=<sp/>p_reg-&gt;RXD.AMOUNT<sp/>&amp;<sp/>(NFCT_RXD_AMOUNT_RXDATABITS_Msk<sp/>|</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_RXD_AMOUNT_RXDATABYTES_Msk);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)(rx_bits<sp/>-<sp/>(crc_excluded<sp/>?<sp/>(8u<sp/>*<sp/><ref refid="group__nrf__nfct__hal_1ga697544d229f5e7a188e770433935daeb" kindref="member">NRF_NFCT_CRC_SIZE</ref>)<sp/>:<sp/>0));</highlight></codeline>
<codeline lineno="1259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref><sp/><ref refid="group__nrf__nfct__hal_1gaafe6bb2ce4b1cd23027b772e36238879" kindref="member">nrf_nfct_nfcid1_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_nfcid1_buf)</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCID1_HAS_NEW_LAYOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>nfcid1_last<sp/>=<sp/>p_reg-&gt;NFCID1.LAST;</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>nfcid1_last<sp/>=<sp/>p_reg-&gt;NFCID1_LAST;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref><sp/>size<sp/>=</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref>)(p_reg-&gt;SENSRES<sp/>&amp;<sp/>NFCT_SENSRES_NFCIDSIZE_Msk);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>!=<sp/><ref refid="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3caa0bc32a9e2449b0dfe353dbec523ae1c" kindref="member">NRF_NFCT_SENSRES_NFCID1_SIZE_SINGLE</ref>)</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCID1_HAS_NEW_LAYOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>nfcid1_2nd_last<sp/>=<sp/>p_reg-&gt;NFCID1.SECONDLAST;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>nfcid1_2nd_last<sp/>=<sp/>p_reg-&gt;NFCID1_2ND_LAST;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/><ref refid="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3ca3206de942de1e3d9238ce40fbcc96f24" kindref="member">NRF_NFCT_SENSRES_NFCID1_SIZE_TRIPLE</ref>)</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCID1_HAS_NEW_LAYOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>nfcid1_3rd_last<sp/>=<sp/>p_reg-&gt;NFCID1.THIRDLAST;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>nfcid1_3rd_last<sp/>=<sp/>p_reg-&gt;NFCID1_3RD_LAST;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p_nfcid1_buf++<sp/>=<sp/>(uint8_t)(nfcid1_3rd_last<sp/>&gt;&gt;<sp/>16UL);</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p_nfcid1_buf++<sp/>=<sp/>(uint8_t)(nfcid1_3rd_last<sp/>&gt;&gt;<sp/>8UL);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p_nfcid1_buf++<sp/>=<sp/>(uint8_t)(nfcid1_3rd_last<sp/>&gt;&gt;<sp/>0UL);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p_nfcid1_buf++<sp/>=<sp/>(uint8_t)(nfcid1_2nd_last<sp/>&gt;&gt;<sp/>16UL);</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p_nfcid1_buf++<sp/>=<sp/>(uint8_t)(nfcid1_2nd_last<sp/>&gt;&gt;<sp/>8UL);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p_nfcid1_buf++<sp/>=<sp/>(uint8_t)(nfcid1_2nd_last<sp/>&gt;&gt;<sp/>0UL);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/>*p_nfcid1_buf++<sp/>=<sp/>(uint8_t)(nfcid1_last<sp/>&gt;&gt;<sp/>24UL);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>*p_nfcid1_buf++<sp/>=<sp/>(uint8_t)(nfcid1_last<sp/>&gt;&gt;<sp/>16UL);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/>*p_nfcid1_buf++<sp/>=<sp/>(uint8_t)(nfcid1_last<sp/>&gt;&gt;<sp/>8UL);</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>*p_nfcid1_buf++<sp/>=<sp/>(uint8_t)(nfcid1_last<sp/>&gt;&gt;<sp/>0UL);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga08032af670d283b99056a9c476a63213" kindref="member">nrf_nfct_nfcid1_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_nfcid1_buf,</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref><sp/>nfcid1_size)</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref><sp/>size<sp/>=<sp/>(nfcid1_size<sp/>==<sp/><ref refid="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3caa87b0717c00543df08613fd678750e43" kindref="member">NRF_NFCT_SENSRES_NFCID1_SIZE_DEFAULT</ref>)<sp/>?</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3ca45acf8d2662418ed6212de2d3e176f07" kindref="member">NRF_NFCT_SENSRES_NFCID1_SIZE_DOUBLE</ref><sp/>:<sp/>nfcid1_size;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>!=<sp/><ref refid="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3caa0bc32a9e2449b0dfe353dbec523ae1c" kindref="member">NRF_NFCT_SENSRES_NFCID1_SIZE_SINGLE</ref>)</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size<sp/>==<sp/><ref refid="group__nrf__nfct__hal_1gga3613f465cdb62ffa95e3f598b6780c3ca3206de942de1e3d9238ce40fbcc96f24" kindref="member">NRF_NFCT_SENSRES_NFCID1_SIZE_TRIPLE</ref>)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCID1_HAS_NEW_LAYOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;NFCID1.THIRDLAST<sp/>=</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;NFCID1_3RD_LAST<sp/>=</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_nfcid1_buf[0]<sp/>&lt;&lt;<sp/>16UL)<sp/>|</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_nfcid1_buf[1]<sp/>&lt;&lt;<sp/>8UL)<sp/><sp/>|</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_nfcid1_buf[2]<sp/>&lt;&lt;<sp/>0UL);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_nfcid1_buf<sp/>+=<sp/>3UL;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCID1_HAS_NEW_LAYOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;NFCID1.SECONDLAST<sp/>=</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;NFCID1_2ND_LAST<sp/>=</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_nfcid1_buf[0]<sp/>&lt;&lt;<sp/>16UL)<sp/>|</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_nfcid1_buf[1]<sp/>&lt;&lt;<sp/>8UL)<sp/><sp/>|</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_nfcid1_buf[2]<sp/>&lt;&lt;<sp/>0UL);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_nfcid1_buf<sp/>+=<sp/>3UL;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCID1_HAS_NEW_LAYOUT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;NFCID1.LAST<sp/>=</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;NFCID1_LAST<sp/>=</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_nfcid1_buf[0]<sp/>&lt;&lt;<sp/>24UL)<sp/>|</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_nfcid1_buf[1]<sp/>&lt;&lt;<sp/>16UL)<sp/>|</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_nfcid1_buf[2]<sp/>&lt;&lt;<sp/>8UL)<sp/><sp/>|</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)p_nfcid1_buf[3]<sp/>&lt;&lt;<sp/>0UL);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SENSRES<sp/>=<sp/>((p_reg-&gt;SENSRES<sp/>&amp;<sp/>~NFCT_SENSRES_NFCIDSIZE_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)size);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_AUTOCOLRES_CONFIG_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga3f50dadcea361820f3ad134bfd85e3fd" kindref="member">nrf_nfct_autocolres_is_enabled</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;AUTOCOLRESCONFIG<sp/>&amp;<sp/>NFCT_AUTOCOLRESCONFIG_MODE_Msk)<sp/>==</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NFCT_AUTOCOLRESCONFIG_MODE_Enabled<sp/>&lt;&lt;<sp/>NFCT_AUTOCOLRESCONFIG_MODE_Pos);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gae5bb4dbf61bf182bae90d030d2dc1b95" kindref="member">nrf_nfct_autocolres_enable</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;AUTOCOLRESCONFIG<sp/>=</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p_reg-&gt;AUTOCOLRESCONFIG<sp/>&amp;<sp/>~NFCT_AUTOCOLRESCONFIG_MODE_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NFCT_AUTOCOLRESCONFIG_MODE_Enabled<sp/>&lt;&lt;<sp/>NFCT_AUTOCOLRESCONFIG_MODE_Pos);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gaeaa0ee17b9bac6459e37de5590c5053f" kindref="member">nrf_nfct_autocolres_disable</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;AUTOCOLRESCONFIG<sp/>=</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(p_reg-&gt;AUTOCOLRESCONFIG<sp/>&amp;<sp/>~NFCT_AUTOCOLRESCONFIG_MODE_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NFCT_AUTOCOLRESCONFIG_MODE_Disabled<sp/>&lt;&lt;<sp/>NFCT_AUTOCOLRESCONFIG_MODE_Pos);</highlight></codeline>
<codeline lineno="1372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_AUTOCOLRES_CONFIG_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref><sp/><ref refid="group__nrf__nfct__hal_1gac42dc4d4d429ab437bf80ebec1a386bc" kindref="member">nrf_nfct_sensres_nfcid1_size_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1377"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref>)(p_reg-&gt;SENSRES<sp/>&amp;<sp/>NFCT_SENSRES_NFCIDSIZE_Msk);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gaccb08875b749f22abf8dcaa00a1ae891" kindref="member">nrf_nfct_sensres_nfcid1_size_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga3613f465cdb62ffa95e3f598b6780c3c" kindref="member">nrf_nfct_sensres_nfcid1_size_t</ref><sp/>nfcid1_size)</highlight></codeline>
<codeline lineno="1383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SENSRES<sp/>=<sp/>((p_reg-&gt;SENSRES<sp/>&amp;<sp/>~(NFCT_SENSRES_NFCIDSIZE_Msk))<sp/>|</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)nfcid1_size);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1ga0a21c500bdf07fbd27a8c1a638302f45" kindref="member">nrf_nfct_sensres_bit_frame_sdd_t</ref><sp/><ref refid="group__nrf__nfct__hal_1ga82714bc15f7655ab7dfbb496805ad424" kindref="member">nrf_nfct_sensres_bit_frame_sdd_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__nfct__hal_1ga0a21c500bdf07fbd27a8c1a638302f45" kindref="member">nrf_nfct_sensres_bit_frame_sdd_t</ref>)(p_reg-&gt;SENSRES<sp/>&amp;<sp/>NFCT_SENSRES_BITFRAMESDD_Msk);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga68e3f17113189c55c33f276badfc0722" kindref="member">nrf_nfct_sensres_bit_frame_sdd_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga0a21c500bdf07fbd27a8c1a638302f45" kindref="member">nrf_nfct_sensres_bit_frame_sdd_t</ref><sp/>bit_frame_sdd)</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SENSRES<sp/>=<sp/>((p_reg-&gt;SENSRES<sp/>&amp;<sp/>~(NFCT_SENSRES_BITFRAMESDD_Msk))<sp/>|<sp/>(uint32_t)bit_frame_sdd);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1gac3dad0d77b9f35fea328bbdd91cc0b02" kindref="member">nrf_nfct_sensres_platform_config_t</ref><sp/><ref refid="group__nrf__nfct__hal_1ga7157d8b85ed1d9d6859ee3fa3fbb52af" kindref="member">nrf_nfct_sensres_platform_config_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__nfct__hal_1gac3dad0d77b9f35fea328bbdd91cc0b02" kindref="member">nrf_nfct_sensres_platform_config_t</ref>)(p_reg-&gt;SENSRES<sp/>&amp;<sp/>NFCT_SENSRES_PLATFCONFIG_Msk);</highlight></codeline>
<codeline lineno="1405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gae25e43464231c4d4c280db7bebcd5b6a" kindref="member">nrf_nfct_sensres_platform_config_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1gac3dad0d77b9f35fea328bbdd91cc0b02" kindref="member">nrf_nfct_sensres_platform_config_t</ref><sp/>platform_config)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SENSRES<sp/>=<sp/>((p_reg-&gt;SENSRES<sp/>&amp;<sp/>~(NFCT_SENSRES_PLATFCONFIG_Msk))<sp/>|</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)platform_config);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga5c9503e8c40d67c422a8dcf9ed0dff28" kindref="member">nrf_nfct_selres_cascade_check</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1416"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(p_reg-&gt;SELRES<sp/>&amp;<sp/>NFCT_SELRES_CASCADE_Msk);</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal">NRF_STATIC_INLINE</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><ref refid="group__nrf__nfct__hal_1ga184ca02cc782ae566ecef8389e1d7ca7" kindref="member">nrf_nfct_selres_protocol_t</ref><sp/><ref refid="group__nrf__nfct__hal_1ga5eca78bed4e42015b4af6d89eb288b71" kindref="member">nrf_nfct_selres_protocol_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1422"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__nfct__hal_1ga184ca02cc782ae566ecef8389e1d7ca7" kindref="member">nrf_nfct_selres_protocol_t</ref>)((p_reg-&gt;SELRES<sp/>&amp;<sp/>NFCT_SELRES_PROTOCOL_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_SELRES_PROTOCOL_Pos);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga761a688769bda6dac33596ba375c9e4a" kindref="member">nrf_nfct_selres_protocol_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__nfct__hal_1ga184ca02cc782ae566ecef8389e1d7ca7" kindref="member">nrf_nfct_selres_protocol_t</ref><sp/>sel_res_protocol)</highlight></codeline>
<codeline lineno="1429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SELRES<sp/>=<sp/>(p_reg-&gt;SELRES<sp/>&amp;<sp/>~NFCT_SELRES_PROTOCOL_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)sel_res_protocol<sp/>&lt;&lt;<sp/>NFCT_SELRES_PROTOCOL_Pos);</highlight></codeline>
<codeline lineno="1432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__nfct__hal_1ga8d7a711de7c19239c319516717daeb64" kindref="member">nrf_nfct_selres_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SELRES;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga3b3b320f098e79afbaaa83f239c42e31" kindref="member">nrf_nfct_selres_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>selres)</highlight></codeline>
<codeline lineno="1440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SELRES<sp/>=<sp/>(p_reg-&gt;SELRES<sp/>&amp;<sp/>NFCT_SELRES_CASCADE_Msk)<sp/>|<sp/>(selres<sp/>&amp;<sp/>~NFCT_SELRES_CASCADE_Msk);</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_PAD_CONFIG_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga871e391e272696e982ccf2ab42d66087" kindref="member">nrf_nfct_pad_config_enable_set</ref>(NRF_NFCT_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="1446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PADCONFIG<sp/>=<sp/>(enable<sp/>?</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_PADCONFIG_ENABLE_Enabled<sp/>:</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_PADCONFIG_ENABLE_Disabled)<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_PADCONFIG_ENABLE_Pos;</highlight></codeline>
<codeline lineno="1451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1gaadb18c43aea711f4b6fcd7be0cdffbf9" kindref="member">nrf_nfct_pad_config_enable_check</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1454"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)(((p_reg-&gt;PADCONFIG<sp/>&amp;<sp/>NFCT_PADCONFIG_ENABLE_Msk)<sp/>&gt;&gt;<sp/>NFCT_PADCONFIG_ENABLE_Pos));</highlight></codeline>
<codeline lineno="1456"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_PAD_CONFIG_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_NFCT_HAS_BIAS_CONFIG_TRIM_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga9752f169298bde1eb999b7cee4638f49" kindref="member">nrf_nfct_bias_config_set</ref>(NRF_NFCT_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__nfct__bias__config__t" kindref="compound">nrf_nfct_bias_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_bias_config)</highlight></codeline>
<codeline lineno="1462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(p_bias_config<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;BIASCFG<sp/>=<sp/>(((p_bias_config-&gt;<ref refid="structnrf__nfct__bias__config__t_1a929a37715a10e86e96d5e447adb03670" kindref="member">trim_ibpsr</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_BIASCFG_TRIMIBPSR_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_BIASCFG_TRIMIBPSR_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_bias_config-&gt;<ref refid="structnrf__nfct__bias__config__t_1ad900162d09b2e5e439127a84cd06bf58" kindref="member">coarse_ibpsr</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_BIASCFG_COARSEIBPSR_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_BIASCFG_COARSEIBPSR_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_bias_config-&gt;<ref refid="structnrf__nfct__bias__config__t_1af8f9b61127e14a413337c2bb1fb4caf7" kindref="member">reference_volatge</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_BIASCFG_REFERENCEVOLTAGE_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_BIASCFG_REFERENCEVOLTAGE_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((p_bias_config-&gt;<ref refid="structnrf__nfct__bias__config__t_1a84338a998bebe3f3e7edf930afbf3be0" kindref="member">spare</ref><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_BIASCFG_SPARE_Pos)<sp/>&amp;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NFCT_BIASCFG_SPARE_Msk));</highlight></codeline>
<codeline lineno="1477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__nfct__hal_1ga7a54c231a83731dccf020275ae0b00c0" kindref="member">nrf_nfct_bias_config_get</ref>(NRF_NFCT_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__nfct__bias__config__t" kindref="compound">nrf_nfct_bias_config_t</ref><sp/>*<sp/>p_bias_config)</highlight></codeline>
<codeline lineno="1481"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(p_bias_config<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>p_bias_config-&gt;<ref refid="structnrf__nfct__bias__config__t_1a929a37715a10e86e96d5e447adb03670" kindref="member">trim_ibpsr</ref><sp/>=<sp/>(p_reg-&gt;BIASCFG<sp/>&amp;<sp/>NFCT_BIASCFG_TRIMIBPSR_Msk)</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>NFCT_BIASCFG_TRIMIBPSR_Pos;</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/>p_bias_config-&gt;<ref refid="structnrf__nfct__bias__config__t_1ad900162d09b2e5e439127a84cd06bf58" kindref="member">coarse_ibpsr</ref><sp/>=<sp/>(p_reg-&gt;BIASCFG<sp/>&amp;<sp/>NFCT_BIASCFG_COARSEIBPSR_Msk)</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>NFCT_BIASCFG_COARSEIBPSR_Pos;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>p_bias_config-&gt;<ref refid="structnrf__nfct__bias__config__t_1af8f9b61127e14a413337c2bb1fb4caf7" kindref="member">reference_volatge</ref><sp/>=<sp/>(p_reg-&gt;BIASCFG<sp/>&amp;<sp/>NFCT_BIASCFG_REFERENCEVOLTAGE_Msk)</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>NFCT_BIASCFG_REFERENCEVOLTAGE_Pos;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>p_bias_config-&gt;<ref refid="structnrf__nfct__bias__config__t_1a84338a998bebe3f3e7edf930afbf3be0" kindref="member">spare</ref><sp/>=<sp/>(p_reg-&gt;BIASCFG<sp/>&amp;<sp/>NFCT_BIASCFG_SPARE_Msk)</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;&gt;<sp/>NFCT_BIASCFG_SPARE_Pos;</highlight></codeline>
<codeline lineno="1495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_NFCT_HAS_BIAS_CONFIG_TRIM_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRF_DECLARE_ONLY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1500"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>NRF_NFCT_H__<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_nfct.h"/>
  </compounddef>
</doxygen>
