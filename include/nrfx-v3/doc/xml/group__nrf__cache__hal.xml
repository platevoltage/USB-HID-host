<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__cache__hal" kind="group">
    <compoundname>nrf_cache_hal</compoundname>
    <title>CACHE HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__cache__hal_1ga49ede922bdb9d9b6243a72e9a0049ecd" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_cache_task_t</name>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda0b5faa49a8f6374e0a0d57f999052077" prot="public">
          <name>NRF_CACHE_TASK_CLEANCACHE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_CLEANCACHE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clean the whole cache. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecdae63f5a05627646aa436b210a7d773767" prot="public">
          <name>NRF_CACHE_TASK_CLEANLINE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_CLEANLINE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clean the cache line. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecdac3bf75e1d727aa69ad9b74ea768838f0" prot="public">
          <name>NRF_CACHE_TASK_FLUSHCACHE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_FLUSHCACHE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Flush the whole cache. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda6ce7882a167236d57916c1d86034f5d0" prot="public">
          <name>NRF_CACHE_TASK_FLUSHLINE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_FLUSHLINE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Flush the cache line. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda1942612fbbae087dbf498bb4b6a389ee" prot="public">
          <name>NRF_CACHE_TASK_SAVE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_SAVE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Save the state to a retained memory space. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecdaffde15302587b738fa0043439a48d222" prot="public">
          <name>NRF_CACHE_TASK_RESTORE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_RESTORE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Restore the state from a retained memory space. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda10f8c0acee707f39a8fa647b0b4fe990" prot="public">
          <name>NRF_CACHE_TASK_INVALIDATECACHE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_INVALIDATECACHE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Invalidate the whole cache. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda52b46d3dd9c9155fc291acc745b177a6" prot="public">
          <name>NRF_CACHE_TASK_INVALIDATELINE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_INVALIDATELINE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Invalidate the cache line. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecdaa9f90eb4bba52bdbf22f089bb4b9cb52" prot="public">
          <name>NRF_CACHE_TASK_ERASE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_ERASE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Erase the whole cache. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CACHE tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="178" column="1" bodyfile="hal/nrf_cache.h" bodystart="179" bodyend="195"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_cache_region_t</name>
        <enumvalue id="group__nrf__cache__hal_1ggaeae9f7c57f88049da165f58737bb95e9a0a431ff82f85fe3fc3e0cd97e2eb8224" prot="public">
          <name>NRF_CACHE_REGION_FLASH</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Cache region related to Flash access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1ggaeae9f7c57f88049da165f58737bb95e9a6d77361b76ca766d78f9718c1311933f" prot="public">
          <name>NRF_CACHE_REGION_XIP</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Cache region related to XIP access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Cache regions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="199" column="1" bodyfile="hal/nrf_cache.h" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__cache__hal_1ga991edeffce0e89bffec886613b9fef42" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_cache_ramsize_t</name>
        <enumvalue id="group__nrf__cache__hal_1gga991edeffce0e89bffec886613b9fef42a2b6d3cc414bf77aaceddd4360b42341f" prot="public">
          <name>NRF_CACHE_RAMSIZE_ALL</name>
          <initializer>= CACHE_MODE_RAMSIZE_All</initializer>
          <briefdescription>
<para>All RAM is used for cache memory. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga991edeffce0e89bffec886613b9fef42a426da0766c12dfb3a29361dbe3f4fb6e" prot="public">
          <name>NRF_CACHE_RAMSIZE_HALF</name>
          <initializer>= CACHE_MODE_RAMSIZE_Half</initializer>
          <briefdescription>
<para>Half of the RAM is used for cache memory. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga991edeffce0e89bffec886613b9fef42a1336a9bc44b84dc6f05635024a7def58" prot="public">
          <name>NRF_CACHE_RAMSIZE_QUARTER</name>
          <initializer>= CACHE_MODE_RAMSIZE_Quarter</initializer>
          <briefdescription>
<para>Quarter of the RAM is used for cache memory. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga991edeffce0e89bffec886613b9fef42a2446ca738264545926ecf98d2ca7d3ae" prot="public">
          <name>NRF_CACHE_RAMSIZE_NONE</name>
          <initializer>= CACHE_MODE_RAMSIZE_None</initializer>
          <briefdescription>
<para>None of the RAM is used for cache memory. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Dedicated RAM size used for cache memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="207" column="1" bodyfile="hal/nrf_cache.h" bodystart="208" bodyend="213"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__cache__hal_1ga756fd84f98cf771e67b886da7e5a4996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_enable</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_enable</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the CACHE peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="568" column="24" bodyfile="hal/nrf_cache.h" bodystart="568" bodyend="571" declfile="hal/nrf_cache.h" declline="221" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga9f96b98968845dd74610731ea62c04d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_disable</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_disable</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the CACHE peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="573" column="24" bodyfile="hal/nrf_cache.h" bodystart="573" bodyend="576" declfile="hal/nrf_cache.h" declline="228" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga7d2944d15b8c601cdbb497db9b6878b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_enable_check</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg)</argsstring>
        <name>nrf_cache_enable_check</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the CACHE peripheral is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The CACHE is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The CACHE is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="578" column="24" bodyfile="hal/nrf_cache.h" bodystart="578" bodyend="581" declfile="hal/nrf_cache.h" declline="238" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaefdb58b01a18348964ff64105e4e795b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_invalidate</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_invalidate</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for invalidating the cache content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="583" column="24" bodyfile="hal/nrf_cache.h" bodystart="583" bodyend="590" declfile="hal/nrf_cache.h" declline="245" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga6d9ba61a07efda4785f4d13ca2216575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_erase</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_erase</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for erasing the cache content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="592" column="24" bodyfile="hal/nrf_cache.h" bodystart="592" bodyend="599" declfile="hal/nrf_cache.h" declline="252" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaa3869bbc7a6c3585925c2d212a3810bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_erase_status_check</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg)</argsstring>
        <name>nrf_cache_erase_status_check</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking the status of <ref refid="group__nrf__cache__hal_1ga6d9ba61a07efda4785f4d13ca2216575" kindref="member">nrf_cache_erase()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Erase is finished. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Erase is not complete or has not started. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="601" column="24" bodyfile="hal/nrf_cache.h" bodystart="601" bodyend="609" declfile="hal/nrf_cache.h" declline="262" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaad1baeca8bd8d414090974a07b15e46d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_erase_status_clear</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_erase_status_clear</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for clearing the status of the cache erase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="611" column="24" bodyfile="hal/nrf_cache.h" bodystart="611" bodyend="619" declfile="hal/nrf_cache.h" declline="269" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga5a35696d8b62a4bbadbf198f37031805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_profiling_set</definition>
        <argsstring>(NRF_CACHE_Type *p_reg, bool enable)</argsstring>
        <name>nrf_cache_profiling_set</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the cache profiling. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if cache profiling is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="621" column="24" bodyfile="hal/nrf_cache.h" bodystart="621" bodyend="630" declfile="hal/nrf_cache.h" declline="277" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gac5e7cb47f50fea87249214c524b51119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_profiling_counters_clear</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_profiling_counters_clear</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for clearing the cache profiling counters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="632" column="24" bodyfile="hal/nrf_cache.h" bodystart="632" bodyend="639" declfile="hal/nrf_cache.h" declline="284" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaac6153662b901d2183c452f9ef04b076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_instruction_hit_counter_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg, nrf_cache_region_t region)</argsstring>
        <name>nrf_cache_instruction_hit_counter_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref></type>
          <declname>region</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of cache hits for instruction fetch from the specified cache region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Separate counters are used for flash region and XIP region. </para>
</simplesect>
<simplesect kind="note"><para>Cache profiling must be enabled first. See <ref refid="group__nrf__cache__hal_1ga5a35696d8b62a4bbadbf198f37031805" kindref="member">nrf_cache_profiling_set</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache region.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of instruction fetch cache hits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="641" column="28" bodyfile="hal/nrf_cache.h" bodystart="641" bodyend="650" declfile="hal/nrf_cache.h" declline="298" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaf20b23ae75f3d11a08d628e5b7ecd180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_instruction_miss_counter_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg, nrf_cache_region_t region)</argsstring>
        <name>nrf_cache_instruction_miss_counter_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref></type>
          <declname>region</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of cache misses for instruction fetch from the specified cache region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Separate counters are used for flash region and XIP region. </para>
</simplesect>
<simplesect kind="note"><para>Cache profiling must be enabled first. See <ref refid="group__nrf__cache__hal_1ga5a35696d8b62a4bbadbf198f37031805" kindref="member">nrf_cache_profiling_set</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache region.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of instruction fetch cache misses. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="652" column="28" bodyfile="hal/nrf_cache.h" bodystart="652" bodyend="661" declfile="hal/nrf_cache.h" declline="313" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga26fedd2a0b6f762125b5e11451e30f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_data_hit_counter_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg, nrf_cache_region_t region)</argsstring>
        <name>nrf_cache_data_hit_counter_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref></type>
          <declname>region</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of cache hits for data fetch from the specified cache region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Separate counters are used for flash region and XIP region. </para>
</simplesect>
<simplesect kind="note"><para>Cache profiling must be enabled first. See <ref refid="group__nrf__cache__hal_1ga5a35696d8b62a4bbadbf198f37031805" kindref="member">nrf_cache_profiling_set</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache region.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of data fetch cache hits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="663" column="28" bodyfile="hal/nrf_cache.h" bodystart="663" bodyend="672" declfile="hal/nrf_cache.h" declline="328" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaa972907d2ce82a410ea13b8da0b583eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_data_miss_counter_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg, nrf_cache_region_t region)</argsstring>
        <name>nrf_cache_data_miss_counter_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref></type>
          <declname>region</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of cache misses for data fetch from the specified cache region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Separate counters are used for flash region and XIP region. </para>
</simplesect>
<simplesect kind="note"><para>Cache profiling must be enabled first. See <ref refid="group__nrf__cache__hal_1ga5a35696d8b62a4bbadbf198f37031805" kindref="member">nrf_cache_profiling_set</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache region.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of data fetch cache misses. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="674" column="28" bodyfile="hal/nrf_cache.h" bodystart="674" bodyend="683" declfile="hal/nrf_cache.h" declline="343" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gab95b2acd2a16a1b1a4d4712fbbc2bd4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_ram_mode_set</definition>
        <argsstring>(NRF_CACHE_Type *p_reg, bool enable)</argsstring>
        <name>nrf_cache_ram_mode_set</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the cache RAM mode. </para>
        </briefdescription>
        <detaileddescription>
<para>When configured in the RAM mode, the accesses to internal or external flash will not be cached. In this mode, the cache data contents can be used as the read/write RAM. Only the data content of the cache is available as RAM.</para>
<para><simplesect kind="note"><para>Enabling the RAM mode causes the RAM to be cleared. </para>
</simplesect>
<simplesect kind="note"><para>Disabling the RAM mode causes the cache to be invalidated.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the cache RAM mode is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="686" column="24" bodyfile="hal/nrf_cache.h" bodystart="686" bodyend="691" declfile="hal/nrf_cache.h" declline="360" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga59bfba4829667844633caf62c22f073e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_ram_mode_check</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg)</argsstring>
        <name>nrf_cache_ram_mode_check</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the cache is in RAM mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the cache RAM mode is enabled, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="693" column="24" bodyfile="hal/nrf_cache.h" bodystart="693" bodyend="696" declfile="hal/nrf_cache.h" declline="369" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga6f05b1ef7689b8d3316dc40e93f71461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_ramsize_set</definition>
        <argsstring>(NRF_CACHE_Type *p_reg, nrf_cache_ramsize_t ramsize)</argsstring>
        <name>nrf_cache_ramsize_set</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1ga991edeffce0e89bffec886613b9fef42" kindref="member">nrf_cache_ramsize_t</ref></type>
          <declname>ramsize</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of splitting the dedicated cache RAM. </para>
        </briefdescription>
        <detaileddescription>
<para>Dedicated cache RAM can be splitted into cache memory and generic memory. By default, all dedicated RAM is used for cache memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ramsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Dedicated cache RAM split configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="700" column="24" bodyfile="hal/nrf_cache.h" bodystart="700" bodyend="703" declfile="hal/nrf_cache.h" declline="382" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gae5fc746c9dd94b53f2a14846780960db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__cache__hal_1ga991edeffce0e89bffec886613b9fef42" kindref="member">nrf_cache_ramsize_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_cache_ramsize_t nrf_cache_ramsize_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg)</argsstring>
        <name>nrf_cache_ramsize_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the configuration of splitting the dedicated cache RAM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Configuration of dedicated cache RAM split. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="705" column="39" bodyfile="hal/nrf_cache.h" bodystart="705" bodyend="708" declfile="hal/nrf_cache.h" declline="391" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga9bc9f2a59ccd951d1e2d4f087e52c43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_read_lock_enable</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_read_lock_enable</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for blocking the cache content access. </para>
        </briefdescription>
        <detaileddescription>
<para>To unlock the cache content access, a reset has to be performed.</para>
<para><simplesect kind="note"><para>Blocking is ignored in the RAM mode.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="711" column="24" bodyfile="hal/nrf_cache.h" bodystart="711" bodyend="714" declfile="hal/nrf_cache.h" declline="403" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga05756fe9cd2bb93b1a022dade02ede60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_update_lock_set</definition>
        <argsstring>(NRF_CACHE_Type *p_reg, bool enable)</argsstring>
        <name>nrf_cache_update_lock_set</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for blocking the cache content updates. </para>
        </briefdescription>
        <detaileddescription>
<para>Blocking of updates prevents updating of cache content on cache misses, but the peripheral will continue to check for instruction/data fetches in the content already present in the cache.</para>
<para><simplesect kind="note"><para>Blocking is ignored in the RAM mode.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if cache content update lock is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="716" column="24" bodyfile="hal/nrf_cache.h" bodystart="716" bodyend="720" declfile="hal/nrf_cache.h" declline="417" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga7a93f10d29db8e1aa8ebea5e08a944dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_data_get</definition>
        <argsstring>(NRF_CACHEDATA_Type const *p_reg, uint32_t set, uint8_t way, uint8_t word)</argsstring>
        <name>nrf_cache_data_get</name>
        <param>
          <type>NRF_CACHEDATA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>way</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>Function for getting the cache data word. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When operating in the RAM mode, the cache data is accessible as a general purpose RAM.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set</parametername>
</parameternamelist>
<parameterdescription>
<para>Set that contains the data to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">way</parametername>
</parameternamelist>
<parameterdescription>
<para>Way that contains the data to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">word</parametername>
</parameternamelist>
<parameterdescription>
<para>Data word index to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit data word. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="723" column="28" bodyfile="hal/nrf_cache.h" bodystart="723" bodyend="750" declfile="hal/nrf_cache.h" declline="432" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gacc7d4f3ec88bc499f72c78a5d4f7d217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_tag_get</definition>
        <argsstring>(NRF_CACHEINFO_Type const *p_reg, uint32_t set, uint8_t way)</argsstring>
        <name>nrf_cache_tag_get</name>
        <param>
          <type>NRF_CACHEINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>way</declname>
        </param>
        <briefdescription>
<para>Function for getting the tag associated with the specified set and way. </para>
        </briefdescription>
        <detaileddescription>
<para>The tag is used to check if an entry in the cache matches the address that is being fetched.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set</parametername>
</parameternamelist>
<parameterdescription>
<para>Set that contains the tag to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">way</parametername>
</parameternamelist>
<parameterdescription>
<para>Way that contains the tag to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tag value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="754" column="28" bodyfile="hal/nrf_cache.h" bodystart="754" bodyend="765" declfile="hal/nrf_cache.h" declline="450" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaaa54ee451b51ddc9a2fda2702f74db2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_line_validity_check</definition>
        <argsstring>(NRF_CACHEINFO_Type const *p_reg, uint32_t set, uint8_t way)</argsstring>
        <name>nrf_cache_line_validity_check</name>
        <param>
          <type>NRF_CACHEINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>way</declname>
        </param>
        <briefdescription>
<para>Function for checking the validity of a cache line associated with the specified set and way. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set</parametername>
</parameternamelist>
<parameterdescription>
<para>Set that contains the cache line to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">way</parametername>
</parameternamelist>
<parameterdescription>
<para>Way that contains the cache line to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache line is valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache line is invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="767" column="24" bodyfile="hal/nrf_cache.h" bodystart="767" bodyend="780" declfile="hal/nrf_cache.h" declline="464" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gabd81e14a0131c0d6cf6cebe0c681339b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_cache_mru_get</definition>
        <argsstring>(NRF_CACHEINFO_Type const *p_reg, uint32_t set)</argsstring>
        <name>nrf_cache_mru_get</name>
        <param>
          <type>NRF_CACHEINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Function for getting the most recently used way in the specified set. </para>
        </briefdescription>
        <detaileddescription>
<para>The most recently used way is updated on each fetch from the cache and is used for the cache replacement policy.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The most recently used way in the specified set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="782" column="27" bodyfile="hal/nrf_cache.h" bodystart="782" bodyend="791" declfile="hal/nrf_cache.h" declline="478" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaa27dd3609dcb6f9b4c9a5a6edcefa4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_data_unit_validity_check</definition>
        <argsstring>(NRF_CACHEINFO_Type const *p_reg, uint32_t set, uint8_t way, uint8_t word)</argsstring>
        <name>nrf_cache_data_unit_validity_check</name>
        <param>
          <type>NRF_CACHEINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>way</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>Function for checking the validity of a data unit associated with the specified set, way and word. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set</parametername>
</parameternamelist>
<parameterdescription>
<para>Set that contains the data unit to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">way</parametername>
</parameternamelist>
<parameterdescription>
<para>Way that contains the data unit to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">word</parametername>
</parameternamelist>
<parameterdescription>
<para>Data word index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Data unit is valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Data unit is invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="794" column="24" bodyfile="hal/nrf_cache.h" bodystart="794" bodyend="841" declfile="hal/nrf_cache.h" declline="493" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga7f2a4358f0d38825cfa2b51637bf81b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_is_data_unit_dirty_check</definition>
        <argsstring>(NRF_CACHEINFO_Type const *p_reg, uint32_t set, uint8_t way, uint8_t word)</argsstring>
        <name>nrf_cache_is_data_unit_dirty_check</name>
        <param>
          <type>NRF_CACHEINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>way</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>Function for checking the dirtiness of a data unit associated with the specified set, way and word. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set</parametername>
</parameternamelist>
<parameterdescription>
<para>Set that contains the data unit to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">way</parametername>
</parameternamelist>
<parameterdescription>
<para>Way that contains the data unit to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">word</parametername>
</parameternamelist>
<parameterdescription>
<para>Data word index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Data unit is dirty. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Data unit is clean. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="845" column="24" bodyfile="hal/nrf_cache.h" bodystart="845" bodyend="871" declfile="hal/nrf_cache.h" declline="511" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gacae4625e5f9d055c0fe52dd1d2607bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_lineaddr_set</definition>
        <argsstring>(NRF_CACHE_Type *p_reg, uint32_t addr)</argsstring>
        <name>nrf_cache_lineaddr_set</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Function to set the memory address covered by the line to be maintained. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache line adress. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="876" column="24" bodyfile="hal/nrf_cache.h" bodystart="876" bodyend="879" declfile="hal/nrf_cache.h" declline="524" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga7eb1bd528269b5647c4ed3a6172fd8be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_lineaddr_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg)</argsstring>
        <name>nrf_cache_lineaddr_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function to get the memory address covered by the line to be maintained. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Cache line adress. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="881" column="28" bodyfile="hal/nrf_cache.h" bodystart="881" bodyend="884" declfile="hal/nrf_cache.h" declline="533" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaec4381cdc4063490b6fcf05ecd09289b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_task_trigger</definition>
        <argsstring>(NRF_CACHE_Type *p_reg, nrf_cache_task_t task)</argsstring>
        <name>nrf_cache_task_trigger</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1ga49ede922bdb9d9b6243a72e9a0049ecd" kindref="member">nrf_cache_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for triggering the specified CACHE task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="886" column="24" bodyfile="hal/nrf_cache.h" bodystart="886" bodyend="889" declfile="hal/nrf_cache.h" declline="541" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga7ded5d5db4f09095de5e83af7977a6dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_task_address_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg, nrf_cache_task_t task)</argsstring>
        <name>nrf_cache_task_address_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1ga49ede922bdb9d9b6243a72e9a0049ecd" kindref="member">nrf_cache_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of the specified task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Task address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="891" column="28" bodyfile="hal/nrf_cache.h" bodystart="891" bodyend="895" declfile="hal/nrf_cache.h" declline="551" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gabee8421cea588033567777ca5a96d81f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_busy_check</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg)</argsstring>
        <name>nrf_cache_busy_check</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the cache is busy or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the cache is busy, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="899" column="24" bodyfile="hal/nrf_cache.h" bodystart="899" bodyend="908" declfile="hal/nrf_cache.h" declline="563" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__cache__hal_1ga32ac18f436cb69269be29078ca6ca81b" prot="public" static="no">
        <name>NRF_CACHE_HAS_CACHEDATA</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the CACHEDATA feature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="53" column="9" bodyfile="hal/nrf_cache.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gaec83162a6d4722ed7ce6e81ab4258060" prot="public" static="no">
        <name>NRF_CACHE_HAS_CACHEDATA_DU</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the CACHE data units feature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="60" column="9" bodyfile="hal/nrf_cache.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gad02dbd3d08bd18d77529b89992dbc918" prot="public" static="no">
        <name>NRF_CACHE_HAS_CACHEINFO</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the CACHEINFO feature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="68" column="9" bodyfile="hal/nrf_cache.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga0ccad93be73a274f268a6e22bb3f5c8a" prot="public" static="no">
        <name>NRF_CACHE_HAS_TASKS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether cache tasks are supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="75" column="9" bodyfile="hal/nrf_cache.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gadddcee2ef281a0b684aafabc484caaa5" prot="public" static="no">
        <name>NRF_CACHE_HAS_TASK_CLEAN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the CLEAN cache/line tasks are supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="82" column="9" bodyfile="hal/nrf_cache.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gae219d8ccd77dcc3a5536d91e204d160d" prot="public" static="no">
        <name>NRF_CACHE_HAS_TASK_FLUSH</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the FLUSH cache/line tasks are supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="89" column="9" bodyfile="hal/nrf_cache.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga647b07ab7cad0cfe3d9ef022f7c03102" prot="public" static="no">
        <name>NRF_CACHE_HAS_TASK_SAVE_RESTORE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether save and restore tasks are supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="96" column="9" bodyfile="hal/nrf_cache.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gae91fc8215b8a8d5f550d3990d04157c7" prot="public" static="no">
        <name>NRF_CACHE_HAS_STATUS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether status check is supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="103" column="9" bodyfile="hal/nrf_cache.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga68d568a37bd28713c6856caa2a4d8cf4" prot="public" static="no">
        <name>NRF_CACHE_HAS_RAM_MODE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether splitting the dedicated RAM between cache and generic memory is supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="110" column="9" bodyfile="hal/nrf_cache.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga725c921400abd2c84a86d9fc5c48df79" prot="public" static="no">
        <name>NRF_CACHE_HAS_RAMSIZE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether configuration of split of dedicated RAM between cache and generic memory is supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="117" column="9" bodyfile="hal/nrf_cache.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga860a47018b86190aaa175203860340e0" prot="public" static="no">
        <name>NRF_CACHE_HAS_CACHEINFO_DU_DIRTY</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether dirtiness check functionality for cache is supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="124" column="9" bodyfile="hal/nrf_cache.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gab20b72f49bea8a7fcb1c9794184187b4" prot="public" static="no">
        <name>NRF_CACHE_HAS_CACHEINFO_DU_VALIDATION</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether data unit validation functionality for cache is supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="131" column="9" bodyfile="hal/nrf_cache.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga3fa376ece57b8058ded3edcc1e9823b7" prot="public" static="no">
        <name>NRF_CACHE_HAS_CACHEINFO_SET_WAY_INFO</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether cache info has INFO register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="138" column="9" bodyfile="hal/nrf_cache.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gaba704e23dc434ea4178bf71d750e7595" prot="public" static="no">
        <name>NRF_CACHEDATA_DATA_WORDS_IN_UNIT_MAX</name>
        <initializer>CACHEDATA_SET_WAY_DU_DATA_MaxCount</initializer>
        <briefdescription>
<para>Max number of words in CACHEDATA data units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="145" column="9" bodyfile="hal/nrf_cache.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga3a5879d2e51d1bcaf2b79f8297f4b076" prot="public" static="no">
        <name>NRF_CACHEDATA_DATA_UNITS_MAX</name>
        <initializer>CACHEDATA_SET_WAY_DU_MaxCount</initializer>
        <briefdescription>
<para>Max number of CACHEDATA data units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="147" column="9" bodyfile="hal/nrf_cache.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gaec18b55decdc118a55febe0f73882e7f" prot="public" static="no">
        <name>NRF_CACHEDATA_WORD_INDEX_MAX</name>
        <initializer>        (<ref refid="group__nrf__cache__hal_1gaba704e23dc434ea4178bf71d750e7595" kindref="member">NRF_CACHEDATA_DATA_WORDS_IN_UNIT_MAX</ref> * <ref refid="group__nrf__cache__hal_1ga3a5879d2e51d1bcaf2b79f8297f4b076" kindref="member">NRF_CACHEDATA_DATA_UNITS_MAX</ref>)</initializer>
        <briefdescription>
<para>Max number of CACHEDATA words. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="149" column="9" bodyfile="hal/nrf_cache.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gadf10cbe14426a052c970304d92dccba4" prot="public" static="no">
        <name>NRF_CACHEDATA_WAY_INDEX_MAX</name>
        <initializer>CACHEDATA_SET_WAY_MaxCount</initializer>
        <briefdescription>
<para>Max number of CACHEDATA ways. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="152" column="9" bodyfile="hal/nrf_cache.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gac2a874e223201447fbbfd7cce6dbd2a7" prot="public" static="no">
        <name>NRF_CACHEDATA_SET_INDEX_MAX</name>
        <initializer>CACHEDATA_SET_MaxCount</initializer>
        <briefdescription>
<para>Max number of CACHEDATA sets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="154" column="9" bodyfile="hal/nrf_cache.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga47e3b11d456e175bc52f32ac36a29d88" prot="public" static="no">
        <name>NRF_CACHEINFO_DATA_WORDS_IN_UNIT_MAX</name>
        <initializer>CACHEDATA_SET_WAY_DU_DATA_MaxCount</initializer>
        <briefdescription>
<para>Max number of words in CACHEINFO data units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="159" column="9" bodyfile="hal/nrf_cache.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga0ee2b7edda1cd22aa38f929eced44c21" prot="public" static="no">
        <name>NRF_CACHEINFO_DATA_UNITS_MAX</name>
        <initializer>CACHEDATA_SET_WAY_DU_MaxCount</initializer>
        <briefdescription>
<para>Max number of CACHEINFO data units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="161" column="9" bodyfile="hal/nrf_cache.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga279f580f4bf64462858fb253f6a20a81" prot="public" static="no">
        <name>NRF_CACHEINFO_WORD_INDEX_MAX</name>
        <initializer>        (<ref refid="group__nrf__cache__hal_1ga47e3b11d456e175bc52f32ac36a29d88" kindref="member">NRF_CACHEINFO_DATA_WORDS_IN_UNIT_MAX</ref> * <ref refid="group__nrf__cache__hal_1ga0ee2b7edda1cd22aa38f929eced44c21" kindref="member">NRF_CACHEINFO_DATA_UNITS_MAX</ref>)</initializer>
        <briefdescription>
<para>Max number of CACHEINFO words. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="163" column="9" bodyfile="hal/nrf_cache.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga8adc07f29cc163b28878e389836dcd8a" prot="public" static="no">
        <name>NRF_CACHEINFO_WAY_INDEX_MAX</name>
        <initializer>CACHEINFO_SET_WAY_MaxCount</initializer>
        <briefdescription>
<para>Max number of CACHEINFO ways. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="166" column="9" bodyfile="hal/nrf_cache.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga5c9059963ea7e4e4bb0b074d06367a41" prot="public" static="no">
        <name>NRF_CACHEINFO_SET_INDEX_MAX</name>
        <initializer>CACHEINFO_SET_MaxCount</initializer>
        <briefdescription>
<para>Max number of CACHEINFO sets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="168" column="9" bodyfile="hal/nrf_cache.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga414bb481a7ba4e07d48828d47a02adc1" prot="public" static="no">
        <name>NRF_CACHE_MODE_RAMSIZE_MAX</name>
        <initializer>CACHE_MODE_RAMSIZE_Max</initializer>
        <briefdescription>
<para>Max enumerator value of RAMSIZE field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="173" column="9" bodyfile="hal/nrf_cache.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The hardware access layer for managing the CACHE peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
