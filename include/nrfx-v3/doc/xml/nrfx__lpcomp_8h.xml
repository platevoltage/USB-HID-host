<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfx__lpcomp_8h" kind="file" language="C++">
    <compoundname>nrfx_lpcomp.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes refid="nrfy__lpcomp_8h" local="no">haly/nrfy_lpcomp.h</includes>
    <incdepgraph>
      <node id="1">
        <label>drivers/include/nrfx_lpcomp.h</label>
        <link refid="nrfx__lpcomp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrfx__lpcomp__config__t" prot="public">nrfx_lpcomp_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrfx__lpcomp_1gac349eca33f0c728b249bc9a30ab69b8f" prot="public" static="no">
        <name>NRFX_LPCOMP_DEFAULT_CONFIG</name>
        <param><defname>_input</defname></param>
        <initializer>{                                                                                        \
    .reference = <ref refid="group__nrf__lpcomp__hal_1gga0c957a3dd1132acd90e420b70477cef0a3dc4b910d34b81d4ec6437e0b1713618" kindref="member">NRF_LPCOMP_REF_SUPPLY_4_8</ref>,                                              \
    .detection = <ref refid="group__nrf__lpcomp__hal_1gga98b70e2e8ab4595eb74b92e7036f09b3adcbff8fcde243a4551172830d289ce38" kindref="member">NRF_LPCOMP_DETECT_CROSS</ref>,                                                \
    <ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(LPCOMP_FEATURE_HYST_PRESENT, (.hyst = <ref refid="group__nrf__lpcomp__hal_1ggad24ec3049d0115c6cc04ff6040f99fc8a2d262d78e9d569e32b4e3b096a6f0422" kindref="member">NRF_LPCOMP_HYST_NOHYST</ref>,), ()) \
    .input = (<ref refid="group__nrf__lpcomp__hal_1gaa5d1f81aba060210a9f72b3323144e7c" kindref="member">nrf_lpcomp_input_t</ref>)_input,                                                 \
    .interrupt_priority = NRFX_LPCOMP_DEFAULT_CONFIG_IRQ_PRIORITY                        \
}</initializer>
        <briefdescription>
<para>LPCOMP driver default configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>This configuration sets up LPCOMP with the following options:<itemizedlist>
<listitem><para>reference voltage: 4/8 of supply voltage</para>
</listitem><listitem><para>detection of both up and down crossings</para>
</listitem><listitem><para>hysteresis disabled</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Comparator input pin. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_lpcomp.h" line="85" column="9" bodyfile="drivers/include/nrfx_lpcomp.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrfx__lpcomp_1gabc311f5d0ad394a1b9e75c2f35146d5d" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nrfx_lpcomp_event_handler_t) (nrf_lpcomp_event_t event)</definition>
        <argsstring>)(nrf_lpcomp_event_t event)</argsstring>
        <name>nrfx_lpcomp_event_handler_t</name>
        <briefdescription>
<para>LPCOMP event handler function type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>LPCOMP event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_lpcomp.h" line="55" column="9" bodyfile="drivers/include/nrfx_lpcomp.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__lpcomp_1ga624f1e98f60e0effc57c7552e9091090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_lpcomp_init</definition>
        <argsstring>(nrfx_lpcomp_config_t const *p_config, nrfx_lpcomp_event_handler_t event_handler)</argsstring>
        <name>nrfx_lpcomp_init</name>
        <param>
          <type><ref refid="structnrfx__lpcomp__config__t" kindref="compound">nrfx_lpcomp_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <param>
          <type><ref refid="group__nrfx__lpcomp_1gabc311f5d0ad394a1b9e75c2f35146d5d" kindref="member">nrfx_lpcomp_event_handler_t</ref></type>
          <declname>event_handler</declname>
        </param>
        <briefdescription>
<para>Function for initializing the LPCOMP driver. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes the LPCOMP driver, but does not enable the peripheral or any interrupts. To start the driver, call the function <ref refid="group__nrfx__lpcomp_1ga419afd58e233d1770b548057f43d8ecb" kindref="member">nrfx_lpcomp_enable()</ref> after initialization.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with the initial configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Event handler provided by the user. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_ALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. Deprecated - use <ref refid="group__nrfx__error__codes_1gga2449720f8fa17b22243218068459a24badc3fc33e8a7dc8b9a9547fe07b437efd" kindref="member">NRFX_ERROR_ALREADY</ref> instead. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>The COMP peripheral is already in use. This is possible only if <ref refid="group__nrfx__prs" kindref="compound">Peripheral Resource Sharing (PRS)</ref> module is enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_lpcomp.h" line="125" column="12" declfile="drivers/include/nrfx_lpcomp.h" declline="125" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__lpcomp_1ga85688c3f05ac4a9414e89e3321c46325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_lpcomp_uninit</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_lpcomp_uninit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for uninitializing the LPCOMP driver. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uninitializes the LPCOMP driver. The LPCOMP peripheral and its interrupts are disabled, and local variables are cleaned. After this call, you must initialize the driver again by calling <ref refid="group__nrfx__lpcomp_1ga624f1e98f60e0effc57c7552e9091090" kindref="member">nrfx_lpcomp_init()</ref> if you want to use it.</para>
<para><simplesect kind="see"><para><ref refid="group__nrfx__lpcomp_1ga2ca7bf99d573607494cee7386c5ec7c7" kindref="member">nrfx_lpcomp_disable</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrfx__lpcomp_1ga624f1e98f60e0effc57c7552e9091090" kindref="member">nrfx_lpcomp_init</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_lpcomp.h" line="138" column="7" declfile="drivers/include/nrfx_lpcomp.h" declline="138" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__lpcomp_1ga03e57ec0fe6f81562293b54889228442" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_lpcomp_init_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_lpcomp_init_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking if the LPCOMP driver is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is not initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_lpcomp.h" line="146" column="6" declfile="drivers/include/nrfx_lpcomp.h" declline="146" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__lpcomp_1ga419afd58e233d1770b548057f43d8ecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_lpcomp_enable</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_lpcomp_enable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for enabling the LPCOMP peripheral and interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para>Before calling this function, the driver must be initialized. This function enables the LPCOMP peripheral and its interrupts.</para>
<para><simplesect kind="see"><para><ref refid="group__nrfx__lpcomp_1ga2ca7bf99d573607494cee7386c5ec7c7" kindref="member">nrfx_lpcomp_disable</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_lpcomp.h" line="156" column="6" declfile="drivers/include/nrfx_lpcomp.h" declline="156" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__lpcomp_1ga2ca7bf99d573607494cee7386c5ec7c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_lpcomp_disable</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_lpcomp_disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for disabling the LPCOMP peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>Before calling this function, the driver must be initialized. This function disables the LPCOMP peripheral and its interrupts.</para>
<para><simplesect kind="see"><para><ref refid="group__nrfx__lpcomp_1ga419afd58e233d1770b548057f43d8ecb" kindref="member">nrfx_lpcomp_enable</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_lpcomp.h" line="166" column="6" declfile="drivers/include/nrfx_lpcomp.h" declline="166" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="nrfx__lpcomp_8h_1a1b5a379952f1ed42b41d4dc6883d5306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_lpcomp_irq_handler</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_lpcomp_irq_handler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_lpcomp.h" line="171" column="6" declfile="drivers/include/nrfx_lpcomp.h" declline="171" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2014<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_LPCOMP_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_LPCOMP_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;haly/nrfy_lpcomp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfx_lpcomp<sp/>LPCOMP<sp/>driver</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_lpcomp</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Low<sp/>Power<sp/>Comparator<sp/>(LPCOMP)<sp/>peripheral<sp/>driver.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>@brief<sp/>LPCOMP<sp/>event<sp/>handler<sp/>function<sp/>type.</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>LPCOMP<sp/>event.</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<sp/><ref refid="group__nrfx__lpcomp_1gabc311f5d0ad394a1b9e75c2f35146d5d" kindref="member">nrfx_lpcomp_event_handler_t</ref>)(<ref refid="group__nrf__lpcomp__hal_1ga5d332176ba68f2b4bacc3418198a1835" kindref="member">nrf_lpcomp_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">/**<sp/>@brief<sp/>LPCOMP<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="structnrfx__lpcomp__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRFX_API_VER_AT_LEAST(3,<sp/>2,<sp/>0)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lpcomp__hal_1ga0c957a3dd1132acd90e420b70477cef0" kindref="member">nrf_lpcomp_ref_t</ref><sp/><sp/><sp/><sp/><sp/>reference;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Reference<sp/>selection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lpcomp__hal_1ga2fe5dab7079a6db8d11aa7c021e1e00f" kindref="member">nrf_lpcomp_ext_ref_t</ref><sp/>ext_ref;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>External<sp/>analog<sp/>reference<sp/>selection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lpcomp__hal_1ga98b70e2e8ab4595eb74b92e7036f09b3" kindref="member">nrf_lpcomp_detect_t</ref><sp/><sp/>detection;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Detection<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_LPCOMP_HAS_HYST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lpcomp__hal_1gad24ec3049d0115c6cc04ff6040f99fc8" kindref="member">nrf_lpcomp_hyst_t</ref><sp/><sp/><sp/><sp/>hyst;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Comparator<sp/>hysteresis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__lpcomp__config__t" kindref="compound">nrf_lpcomp_config_t</ref><sp/><sp/>config;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Peripheral<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__lpcomp__hal_1gaa5d1f81aba060210a9f72b3323144e7c" kindref="member">nrf_lpcomp_input_t</ref><sp/><sp/><sp/>input;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Input<sp/>to<sp/>be<sp/>monitored.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interrupt_priority;<sp/></highlight><highlight class="comment">///&lt;<sp/>LPCOMP<sp/>interrupt<sp/>priority.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">}<sp/><ref refid="structnrfx__lpcomp__config__t" kindref="compound">nrfx_lpcomp_config_t</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRFX_API_VER_AT_LEAST(3,<sp/>2,<sp/>0)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="75"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*<sp/>@brief<sp/>LPCOMP<sp/>driver<sp/>default<sp/>configuration.</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>This<sp/>configuration<sp/>sets<sp/>up<sp/>LPCOMP<sp/>with<sp/>the<sp/>following<sp/>options:</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>-<sp/>reference<sp/>voltage:<sp/>4/8<sp/>of<sp/>supply<sp/>voltage</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>-<sp/>detection<sp/>of<sp/>both<sp/>up<sp/>and<sp/>down<sp/>crossings</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>-<sp/>hysteresis<sp/>disabled</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>_input<sp/>Comparator<sp/>input<sp/>pin.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_LPCOMP_DEFAULT_CONFIG(_input)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.reference<sp/>=<sp/>NRF_LPCOMP_REF_SUPPLY_4_8,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.detection<sp/>=<sp/>NRF_LPCOMP_DETECT_CROSS,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(LPCOMP_FEATURE_HYST_PRESENT,<sp/>(.hyst<sp/>=<sp/>NRF_LPCOMP_HYST_NOHYST,),<sp/>())<sp/>\</highlight></codeline>
<codeline lineno="90"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.input<sp/>=<sp/>(nrf_lpcomp_input_t)_input,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.interrupt_priority<sp/>=<sp/>NRFX_LPCOMP_DEFAULT_CONFIG_IRQ_PRIORITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_LPCOMP_DEFAULT_CONFIG(_input)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.config<sp/>=<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.reference<sp/>=<sp/>NRF_LPCOMP_REF_SUPPLY_4_8,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.detection<sp/>=<sp/>NRF_LPCOMP_DETECT_CROSS,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(LPCOMP_FEATURE_HYST_PRESENT,<sp/>(.hyst<sp/>=<sp/>NRF_LPCOMP_HYST_NOHYST,),<sp/>())<sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>},<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.input<sp/>=<sp/>(nrf_lpcomp_input_t)_input,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.interrupt_priority<sp/>=<sp/>NRFX_LPCOMP_DEFAULT_CONFIG_IRQ_PRIORITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>the<sp/>LPCOMP<sp/>driver.</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initializes<sp/>the<sp/>LPCOMP<sp/>driver,<sp/>but<sp/>does<sp/>not<sp/>enable<sp/>the<sp/>peripheral<sp/>or<sp/>any<sp/>interrupts.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*<sp/>To<sp/>start<sp/>the<sp/>driver,<sp/>call<sp/>the<sp/>function<sp/>nrfx_lpcomp_enable()<sp/>after<sp/>initialization.</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>the<sp/>initial<sp/>configuration.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event_handler<sp/>Event<sp/>handler<sp/>provided<sp/>by<sp/>the<sp/>user.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Must<sp/>not<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initialization<sp/>was<sp/>successful.</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_ALREADY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_STATE<sp/>The<sp/>driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deprecated<sp/>-<sp/>use<sp/>@ref<sp/>NRFX_ERROR_ALREADY<sp/>instead.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>COMP<sp/>peripheral<sp/>is<sp/>already<sp/>in<sp/>use.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>possible<sp/>only<sp/>if<sp/>@ref<sp/>nrfx_prs<sp/>module</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__lpcomp_1ga624f1e98f60e0effc57c7552e9091090" kindref="member">nrfx_lpcomp_init</ref>(<ref refid="structnrfx__lpcomp__config__t" kindref="compound">nrfx_lpcomp_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__lpcomp_1gabc311f5d0ad394a1b9e75c2f35146d5d" kindref="member">nrfx_lpcomp_event_handler_t</ref><sp/><sp/>event_handler);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="128"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>uninitializing<sp/>the<sp/>LPCOMP<sp/>driver.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>uninitializes<sp/>the<sp/>LPCOMP<sp/>driver.<sp/>The<sp/>LPCOMP<sp/>peripheral<sp/>and</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*<sp/>its<sp/>interrupts<sp/>are<sp/>disabled,<sp/>and<sp/>local<sp/>variables<sp/>are<sp/>cleaned.<sp/>After<sp/>this<sp/>call,<sp/>you<sp/>must</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/>*<sp/>initialize<sp/>the<sp/>driver<sp/>again<sp/>by<sp/>calling<sp/>nrfx_lpcomp_init()<sp/>if<sp/>you<sp/>want<sp/>to<sp/>use<sp/>it.</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_lpcomp_disable</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_lpcomp_init</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="group__nrfx__lpcomp_1ga85688c3f05ac4a9414e89e3321c46325" kindref="member">nrfx_lpcomp_uninit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="140"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>LPCOMP<sp/>driver<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Driver<sp/>is<sp/>not<sp/>initialized.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__lpcomp_1ga03e57ec0fe6f81562293b54889228442" kindref="member">nrfx_lpcomp_init_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>LPCOMP<sp/>peripheral<sp/>and<sp/>interrupts.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/>Before<sp/>calling<sp/>this<sp/>function,<sp/>the<sp/>driver<sp/>must<sp/>be<sp/>initialized.<sp/>This<sp/>function</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*<sp/>enables<sp/>the<sp/>LPCOMP<sp/>peripheral<sp/>and<sp/>its<sp/>interrupts.</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_lpcomp_disable</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__lpcomp_1ga419afd58e233d1770b548057f43d8ecb" kindref="member">nrfx_lpcomp_enable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>LPCOMP<sp/>peripheral.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>Before<sp/>calling<sp/>this<sp/>function,<sp/>the<sp/>driver<sp/>must<sp/>be<sp/>initialized.<sp/>This<sp/>function<sp/>disables<sp/>the<sp/>LPCOMP</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>peripheral<sp/>and<sp/>its<sp/>interrupts.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_lpcomp_enable</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__lpcomp_1ga2ca7bf99d573607494cee7386c5ec7c7" kindref="member">nrfx_lpcomp_disable</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="168"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrfx_lpcomp_irq_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_LPCOMP_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="drivers/include/nrfx_lpcomp.h"/>
  </compounddef>
</doxygen>
