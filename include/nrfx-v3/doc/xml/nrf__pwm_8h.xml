<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__pwm_8h" kind="file" language="C++">
    <compoundname>nrf_pwm.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfy__pwm_8h" local="no">haly/nrfy_pwm.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_pwm.h</label>
        <link refid="nrf__pwm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__pwm__values__grouped__t" prot="public">nrf_pwm_values_grouped_t</innerclass>
    <innerclass refid="structnrf__pwm__values__individual__t" prot="public">nrf_pwm_values_individual_t</innerclass>
    <innerclass refid="structnrf__pwm__values__wave__form__t" prot="public">nrf_pwm_values_wave_form_t</innerclass>
    <innerclass refid="unionnrf__pwm__values__t" prot="public">nrf_pwm_values_t</innerclass>
    <innerclass refid="structnrf__pwm__sequence__t" prot="public">nrf_pwm_sequence_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__pwm__hal_1ga86811116140ecb75c7d757b01c4adb96" prot="public" static="no">
        <name>NRF_PWM_HAS_DMA_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether dedicated DMA register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="52" column="9" bodyfile="hal/nrf_pwm.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__pwm__hal_1ga240f49caf1c537e90c02a642cac6e783" prot="public" static="no">
        <name>NRF_PWM_HAS_SHORT_LOOPSDONE_SEQSTART</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether shorting SEQSTART task with LOOPSDONE event is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="60" column="9" bodyfile="hal/nrf_pwm.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__pwm__hal_1ga2a18bc6151ac90276411d185a83140e1" prot="public" static="no">
        <name>NRF_PWM_HAS_DMA_TASKS_EVENTS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether PWM DMA tasks and events are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="68" column="9" bodyfile="hal/nrf_pwm.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__pwm__hal_1ga8919d0a9f8aef141eb03920e66993c3b" prot="public" static="no">
        <name>NRF_PWM_HAS_SEQ_CNT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether setting the number of duty cycle values for a sequence is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="75" column="9" bodyfile="hal/nrf_pwm.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__pwm__hal_1ga885a662a4c5a59a3c260e2a98aeae523" prot="public" static="no">
        <name>NRF_PWM_INST_GET</name>
        <param><defname>idx</defname></param>
        <initializer><ref refid="group__nrfx__utils_1ga5ea61d0994f6fb1ab5ed59d44f6a7ce9" kindref="member">NRFX_CONCAT</ref>(NRF_, PWM, idx)</initializer>
        <briefdescription>
<para>Macro getting pointer to the structure of registers of the PWM peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM instance index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the structure of registers of the PWM peripheral. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="87" column="10" bodyfile="hal/nrf_pwm.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__pwm__hal_1gabf854890a14200d20e7aea8234a16887" prot="public" static="no">
        <name>NRF_PWM_PIN_NOT_CONNECTED</name>
        <initializer>0xFFFFFFFF</initializer>
        <briefdescription>
<para>This value can be provided as a parameter for the <ref refid="group__nrf__pwm__hal_1ga0bcd0f7311e790199cd14373fc823a9f" kindref="member">nrf_pwm_pins_set</ref> function call to specify that a given output channel shall not be connected to a physical pin. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="94" column="9" bodyfile="hal/nrf_pwm.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__pwm__hal_1ga9935002ab3ef7325efe73a6979e77990" prot="public" static="no">
        <name>NRF_PWM_CHANNEL_COUNT</name>
        <initializer>4</initializer>
        <briefdescription>
<para>Number of channels in each PWM instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="97" column="9" bodyfile="hal/nrf_pwm.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__pwm__hal_1ga22d0be020efeeabd0da15cf6a458beeb" prot="public" static="no">
        <name>NRF_PWM_VALUES_LENGTH</name>
        <param><defname>array</defname></param>
        <initializer>(sizeof(array) / 2UL)</initializer>
        <briefdescription>
<para>Helper macro for calculating the number of 16-bit values in the specified array of duty cycle values. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="103" column="9" bodyfile="hal/nrf_pwm.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_pwm_task_t</name>
        <enumvalue id="group__nrf__pwm__hal_1gga11cb9ca8fbb773011a3ad6658914418ea1cdbda5c0c8086b3e22909f93ae2eda8" prot="public">
          <name>NRF_PWM_TASK_STOP</name>
          <initializer>= offsetof(NRF_PWM_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>Stops PWM pulse generation on all channels at the end of the current PWM period, and stops the sequence playback. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga11cb9ca8fbb773011a3ad6658914418ea0e0eb4565d08c63ccd6b314e8b6b4c90" prot="public">
          <name>NRF_PWM_TASK_SEQSTART0</name>
          <initializer>= offsetof(NRF_PWM_Type, TASKS_DMA.SEQ[0].START)</initializer>
          <briefdescription>
<para>Starts playback of sequence 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga11cb9ca8fbb773011a3ad6658914418eafcce137014a7767686d57ccb832dcb99" prot="public">
          <name>NRF_PWM_TASK_SEQSTART1</name>
          <initializer>= offsetof(NRF_PWM_Type, TASKS_DMA.SEQ[1].START)</initializer>
          <briefdescription>
<para>Starts playback of sequence 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga11cb9ca8fbb773011a3ad6658914418eaaa206912dd578140efcf3a668a78f4e5" prot="public">
          <name>NRF_PWM_TASK_NEXTSTEP</name>
          <initializer>= offsetof(NRF_PWM_Type, TASKS_NEXTSTEP)</initializer>
          <briefdescription>
<para>Steps by one value in the current sequence if the decoder is set to <ref refid="group__nrf__pwm__hal_1ggae25a7e03c383934d33cda8a049b7dde4aa64f9312c7d5928aadcaf7596e61357b" kindref="member">NRF_PWM_STEP_TRIGGERED</ref> mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PWM tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="107" column="1" bodyfile="hal/nrf_pwm.h" bodystart="108" bodyend="118"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_pwm_event_t</name>
        <enumvalue id="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfadf20e481b3105e4ef6e6f80423c8192b" prot="public">
          <name>NRF_PWM_EVENT_STOPPED</name>
          <initializer>= offsetof(NRF_PWM_Type, EVENTS_STOPPED)</initializer>
          <briefdescription>
<para>Response to STOP task, emitted when PWM pulses are no longer generated. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfaa5bb09f0669ce66b58053dd382a3bcbf" prot="public">
          <name>NRF_PWM_EVENT_SEQSTARTED0</name>
          <initializer>= offsetof(NRF_PWM_Type, EVENTS_SEQSTARTED[0])</initializer>
          <briefdescription>
<para>First PWM period started on sequence 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa79aea4fc8f7e536c180a1b5b4c9a2596" prot="public">
          <name>NRF_PWM_EVENT_SEQSTARTED1</name>
          <initializer>= offsetof(NRF_PWM_Type, EVENTS_SEQSTARTED[1])</initializer>
          <briefdescription>
<para>First PWM period started on sequence 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa60bc770e86e8c3e1987b7828c5527e3b" prot="public">
          <name>NRF_PWM_EVENT_SEQEND0</name>
          <initializer>= offsetof(NRF_PWM_Type, EVENTS_SEQEND[0])</initializer>
          <briefdescription>
<para>Emitted at the end of every sequence 0 when its last value has been read from RAM. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa250b4184e07ce53864c00aa17f142c3e" prot="public">
          <name>NRF_PWM_EVENT_SEQEND1</name>
          <initializer>= offsetof(NRF_PWM_Type, EVENTS_SEQEND[1])</initializer>
          <briefdescription>
<para>Emitted at the end of every sequence 1 when its last value has been read from RAM. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa2340304c4d850deee64456310c272d13" prot="public">
          <name>NRF_PWM_EVENT_PWMPERIODEND</name>
          <initializer>= offsetof(NRF_PWM_Type, EVENTS_PWMPERIODEND)</initializer>
          <briefdescription>
<para>Emitted at the end of each PWM period. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa904f95da3dc44a8e147623f4ae32a268" prot="public">
          <name>NRF_PWM_EVENT_LOOPSDONE</name>
          <initializer>= offsetof(NRF_PWM_Type, EVENTS_LOOPSDONE)</initializer>
          <briefdescription>
<para>Concatenated sequences have been played the specified number of times. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PWM events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="121" column="1" bodyfile="hal/nrf_pwm.h" bodystart="122" bodyend="130"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__pwm__hal_1ga3f6888e6f40342ef64cf5b9555bd04d5" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_pwm_int_mask_t</name>
        <enumvalue id="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5ad7b8b51084d217e44611e4353d8d8a36" prot="public">
          <name>NRF_PWM_INT_STOPPED_MASK</name>
          <initializer>= PWM_INTENSET_STOPPED_Msk</initializer>
          <briefdescription>
<para>Interrupt on STOPPED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5a41e26a43feadb28f3fa05b41bee59a4e" prot="public">
          <name>NRF_PWM_INT_SEQSTARTED0_MASK</name>
          <initializer>= PWM_INTENSET_SEQSTARTED0_Msk</initializer>
          <briefdescription>
<para>Interrupt on SEQSTARTED[0] event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5ac6ae5c9057a052908572d3b03c7fa5e4" prot="public">
          <name>NRF_PWM_INT_SEQSTARTED1_MASK</name>
          <initializer>= PWM_INTENSET_SEQSTARTED1_Msk</initializer>
          <briefdescription>
<para>Interrupt on SEQSTARTED[1] event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5a5bdd3b534ac4b8e538d653f69ce83627" prot="public">
          <name>NRF_PWM_INT_SEQEND0_MASK</name>
          <initializer>= PWM_INTENSET_SEQEND0_Msk</initializer>
          <briefdescription>
<para>Interrupt on SEQEND[0] event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5a6727da1cd7e51206d5d51702ef249d1e" prot="public">
          <name>NRF_PWM_INT_SEQEND1_MASK</name>
          <initializer>= PWM_INTENSET_SEQEND1_Msk</initializer>
          <briefdescription>
<para>Interrupt on SEQEND[1] event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5a11080b028d0f9714cef68a08be3ad1c2" prot="public">
          <name>NRF_PWM_INT_PWMPERIODEND_MASK</name>
          <initializer>= PWM_INTENSET_PWMPERIODEND_Msk</initializer>
          <briefdescription>
<para>Interrupt on PWMPERIODEND event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5a409117735d39f637f068291dcc5b02be" prot="public">
          <name>NRF_PWM_INT_LOOPSDONE_MASK</name>
          <initializer>= PWM_INTENSET_LOOPSDONE_Msk</initializer>
          <briefdescription>
<para>Interrupt on LOOPSDONE event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PWM interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="133" column="1" bodyfile="hal/nrf_pwm.h" bodystart="134" bodyend="142"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__pwm__hal_1ga677eee0f6fb961e515018d5cf68d06a6" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_pwm_short_mask_t</name>
        <enumvalue id="group__nrf__pwm__hal_1gga677eee0f6fb961e515018d5cf68d06a6aea663e579d7f33326625af10b4437024" prot="public">
          <name>NRF_PWM_SHORT_SEQEND0_STOP_MASK</name>
          <initializer>= PWM_SHORTS_SEQEND0_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between SEQEND[0] event and STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga677eee0f6fb961e515018d5cf68d06a6add885779b4d8c2f77dd5d53119c17a40" prot="public">
          <name>NRF_PWM_SHORT_SEQEND1_STOP_MASK</name>
          <initializer>= PWM_SHORTS_SEQEND1_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between SEQEND[1] event and STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga677eee0f6fb961e515018d5cf68d06a6ac3db7894c3849c4bc4fa1150799a12d5" prot="public">
          <name>NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK</name>
          <initializer>= PWM_SHORTS_LOOPSDONE_SEQSTART0_Msk</initializer>
          <briefdescription>
<para>Shortcut between LOOPSDONE event and SEQSTART[0] task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga677eee0f6fb961e515018d5cf68d06a6aaefb987c3a650031c75517f6e8aa9221" prot="public">
          <name>NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK</name>
          <initializer>= PWM_SHORTS_LOOPSDONE_SEQSTART1_Msk</initializer>
          <briefdescription>
<para>Shortcut between LOOPSDONE event and SEQSTART[1] task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga677eee0f6fb961e515018d5cf68d06a6aabc8554ee052151a9d49dafa25321cbe" prot="public">
          <name>NRF_PWM_SHORT_LOOPSDONE_STOP_MASK</name>
          <initializer>= PWM_SHORTS_LOOPSDONE_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between LOOPSDONE event and STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PWM shortcuts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="145" column="1" bodyfile="hal/nrf_pwm.h" bodystart="146" bodyend="157"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__pwm__hal_1ga1f29b190ff13c52895d249e07ebe92cb" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_pwm_mode_t</name>
        <enumvalue id="group__nrf__pwm__hal_1gga1f29b190ff13c52895d249e07ebe92cba0b9d394af2cbadb2fd430f73e6b2a28c" prot="public">
          <name>NRF_PWM_MODE_UP</name>
          <initializer>= PWM_MODE_UPDOWN_Up</initializer>
          <briefdescription>
<para>Up counter (edge-aligned PWM duty cycle). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga1f29b190ff13c52895d249e07ebe92cba37eab07de351c4001e96bfe588b5fac7" prot="public">
          <name>NRF_PWM_MODE_UP_AND_DOWN</name>
          <initializer>= PWM_MODE_UPDOWN_UpAndDown</initializer>
          <briefdescription>
<para>Up and down counter (center-aligned PWM duty cycle). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PWM modes of operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="160" column="1" bodyfile="hal/nrf_pwm.h" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__pwm__hal_1ga8479da20e14394fb2388b1be3b879670" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_pwm_clk_t</name>
        <enumvalue id="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a0074030b06b359a6caf1cf00eafd28cc" prot="public">
          <name>NRF_PWM_CLK_16MHz</name>
          <initializer>= PWM_PRESCALER_PRESCALER_DIV_1</initializer>
          <briefdescription>
<para>16 MHz / 1 = 16 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a4a67fe77580783f462d89e2a6fcef9c6" prot="public">
          <name>NRF_PWM_CLK_8MHz</name>
          <initializer>= PWM_PRESCALER_PRESCALER_DIV_2</initializer>
          <briefdescription>
<para>16 MHz / 2 = 8 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a64d3ac0932e8dc1b27a4133d56bf06be" prot="public">
          <name>NRF_PWM_CLK_4MHz</name>
          <initializer>= PWM_PRESCALER_PRESCALER_DIV_4</initializer>
          <briefdescription>
<para>16 MHz / 4 = 4 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670acacabaa47b84f819006fe490792aa50e" prot="public">
          <name>NRF_PWM_CLK_2MHz</name>
          <initializer>= PWM_PRESCALER_PRESCALER_DIV_8</initializer>
          <briefdescription>
<para>16 MHz / 8 = 2 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a30e595429e6787e18df7ca04b897bb11" prot="public">
          <name>NRF_PWM_CLK_1MHz</name>
          <initializer>= PWM_PRESCALER_PRESCALER_DIV_16</initializer>
          <briefdescription>
<para>16 MHz / 16 = 1 MHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a5adb2af103d1968468dd46f572a4a2c5" prot="public">
          <name>NRF_PWM_CLK_500kHz</name>
          <initializer>= PWM_PRESCALER_PRESCALER_DIV_32</initializer>
          <briefdescription>
<para>16 MHz / 32 = 500 kHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a52f5dff4d18dac79ea6387f1ed9e0aa0" prot="public">
          <name>NRF_PWM_CLK_250kHz</name>
          <initializer>= PWM_PRESCALER_PRESCALER_DIV_64</initializer>
          <briefdescription>
<para>16 MHz / 64 = 250 kHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a809f569f8bed353ccf5ef237c31a93f1" prot="public">
          <name>NRF_PWM_CLK_125kHz</name>
          <initializer>= PWM_PRESCALER_PRESCALER_DIV_128</initializer>
          <briefdescription>
<para>16 MHz / 128 = 125 kHz. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PWM base clock frequencies. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="167" column="1" bodyfile="hal/nrf_pwm.h" bodystart="168" bodyend="177"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__pwm__hal_1ga453888e5feb46774da27499ca1eeafd2" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_pwm_dec_load_t</name>
        <enumvalue id="group__nrf__pwm__hal_1gga453888e5feb46774da27499ca1eeafd2a23a17dad88a8dff161e09c5057e70362" prot="public">
          <name>NRF_PWM_LOAD_COMMON</name>
          <initializer>= PWM_DECODER_LOAD_Common</initializer>
          <briefdescription>
<para>1st half word (16-bit) used in all PWM channels (0-3). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga453888e5feb46774da27499ca1eeafd2ab66a66edb78babab583af6326452ed29" prot="public">
          <name>NRF_PWM_LOAD_GROUPED</name>
          <initializer>= PWM_DECODER_LOAD_Grouped</initializer>
          <briefdescription>
<para>1st half word (16-bit) used in channels 0 and 1; 2nd word in channels 2 and 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga453888e5feb46774da27499ca1eeafd2a97607a1a4b271d76c6d1305408e6ca4e" prot="public">
          <name>NRF_PWM_LOAD_INDIVIDUAL</name>
          <initializer>= PWM_DECODER_LOAD_Individual</initializer>
          <briefdescription>
<para>1st half word (16-bit) used in channel 0; 2nd in channel 1; 3rd in channel 2; 4th in channel 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1gga453888e5feb46774da27499ca1eeafd2a5e0beb030e89afbac264872b6991585a" prot="public">
          <name>NRF_PWM_LOAD_WAVE_FORM</name>
          <initializer>= PWM_DECODER_LOAD_WaveForm</initializer>
          <briefdescription>
<para>1st half word (16-bit) used in channel 0; 2nd in channel 1; ... ; 4th as the top value for the pulse generator counter. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PWM decoder load modes. </para>
        </briefdescription>
        <detaileddescription>
<para>The selected mode determines how the sequence data is read from RAM and spread to the compare registers. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="185" column="1" bodyfile="hal/nrf_pwm.h" bodystart="186" bodyend="191"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__pwm__hal_1gae25a7e03c383934d33cda8a049b7dde4" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_pwm_dec_step_t</name>
        <enumvalue id="group__nrf__pwm__hal_1ggae25a7e03c383934d33cda8a049b7dde4aec7f52e96da457170f1a516ea78357a1" prot="public">
          <name>NRF_PWM_STEP_AUTO</name>
          <initializer>= PWM_DECODER_MODE_RefreshCount</initializer>
          <briefdescription>
<para>Automatically after the current value is played and repeated the requested number of times. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__pwm__hal_1ggae25a7e03c383934d33cda8a049b7dde4aa64f9312c7d5928aadcaf7596e61357b" prot="public">
          <name>NRF_PWM_STEP_TRIGGERED</name>
          <initializer>= PWM_DECODER_MODE_NextStep</initializer>
          <briefdescription>
<para>When the <ref refid="group__nrf__pwm__hal_1gga11cb9ca8fbb773011a3ad6658914418eaaa206912dd578140efcf3a668a78f4e5" kindref="member">NRF_PWM_TASK_NEXTSTEP</ref> task is triggered. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>PWM decoder next step modes. </para>
        </briefdescription>
        <detaileddescription>
<para>The selected mode determines when the next value from the active sequence is loaded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="199" column="1" bodyfile="hal/nrf_pwm.h" bodystart="200" bodyend="203"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrf__pwm__hal_1ga5a7353575cd92e960e569d94db319d8d" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t nrf_pwm_values_common_t</definition>
        <argsstring></argsstring>
        <name>nrf_pwm_values_common_t</name>
        <briefdescription>
<para>Type used for defining duty cycle values for a sequence loaded in <ref refid="group__nrf__pwm__hal_1gga453888e5feb46774da27499ca1eeafd2a23a17dad88a8dff161e09c5057e70362" kindref="member">NRF_PWM_LOAD_COMMON</ref> mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="209" column="18" bodyfile="hal/nrf_pwm.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga80273886334d6d99c516aa13e9e6773a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_task_trigger</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_task_t task)</argsstring>
        <name>nrf_pwm_task_trigger</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified PWM task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="622" column="24" bodyfile="hal/nrf_pwm.h" bodystart="622" bodyend="626" declfile="hal/nrf_pwm.h" declline="298" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1gaa78ad952a4164f2acdc2aa22b6fd0618" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_pwm_task_address_get</definition>
        <argsstring>(NRF_PWM_Type const *p_reg, nrf_pwm_task_t task)</argsstring>
        <name>nrf_pwm_task_address_get</name>
        <param>
          <type>NRF_PWM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified PWM task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="628" column="28" bodyfile="hal/nrf_pwm.h" bodystart="628" bodyend="632" declfile="hal/nrf_pwm.h" declline="309" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1gadd2be0c46a34bece88f176db55cfe9ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_event_clear</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_event_t event)</argsstring>
        <name>nrf_pwm_event_clear</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified PWM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="634" column="24" bodyfile="hal/nrf_pwm.h" bodystart="634" bodyend="639" declfile="hal/nrf_pwm.h" declline="318" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga7b6689ec738c01ef7e02d6923b8707a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_pwm_event_check</definition>
        <argsstring>(NRF_PWM_Type const *p_reg, nrf_pwm_event_t event)</argsstring>
        <name>nrf_pwm_event_check</name>
        <param>
          <type>NRF_PWM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the PWM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="641" column="24" bodyfile="hal/nrf_pwm.h" bodystart="641" bodyend="645" declfile="hal/nrf_pwm.h" declline="330" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga3eba935312b4bf541151a30e0d408beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_pwm_event_address_get</definition>
        <argsstring>(NRF_PWM_Type const *p_reg, nrf_pwm_event_t event)</argsstring>
        <name>nrf_pwm_event_address_get</name>
        <param>
          <type>NRF_PWM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified PWM event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="647" column="28" bodyfile="hal/nrf_pwm.h" bodystart="647" bodyend="651" declfile="hal/nrf_pwm.h" declline="341" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1gad37230defb6539bad9deeed03b4ec1ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_shorts_enable</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_pwm_shorts_enable</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts to be enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="653" column="24" bodyfile="hal/nrf_pwm.h" bodystart="653" bodyend="656" declfile="hal/nrf_pwm.h" declline="350" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga52672c9d16d8b47bfccf573a959d1929" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_shorts_disable</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_pwm_shorts_disable</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts to be disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="658" column="24" bodyfile="hal/nrf_pwm.h" bodystart="658" bodyend="661" declfile="hal/nrf_pwm.h" declline="359" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga486254506e79e5017ec076850ac3b275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_shorts_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_pwm_shorts_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of PWM shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Shortcuts configuration to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="663" column="24" bodyfile="hal/nrf_pwm.h" bodystart="663" bodyend="666" declfile="hal/nrf_pwm.h" declline="368" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1gad97a8c07dceaad191d77748b3311c25b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_int_enable</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_pwm_int_enable</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__pwm__hal_1ga3f6888e6f40342ef64cf5b9555bd04d5" kindref="member">nrf_pwm_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="668" column="24" bodyfile="hal/nrf_pwm.h" bodystart="668" bodyend="671" declfile="hal/nrf_pwm.h" declline="378" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga502fca6db746ea1fb1d5c45573cc6c1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_int_disable</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_pwm_int_disable</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__pwm__hal_1ga3f6888e6f40342ef64cf5b9555bd04d5" kindref="member">nrf_pwm_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="673" column="24" bodyfile="hal/nrf_pwm.h" bodystart="673" bodyend="676" declfile="hal/nrf_pwm.h" declline="388" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga188dee0693d8704d6d8d77bf2e68831a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_int_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_pwm_int_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of PWM interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be set. Use <ref refid="group__nrf__pwm__hal_1ga3f6888e6f40342ef64cf5b9555bd04d5" kindref="member">nrf_pwm_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="678" column="24" bodyfile="hal/nrf_pwm.h" bodystart="678" bodyend="681" declfile="hal/nrf_pwm.h" declline="398" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1gaec938406e805161ad153e2a95638a74c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_pwm_int_enable_check</definition>
        <argsstring>(NRF_PWM_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_pwm_int_enable_check</name>
        <param>
          <type>NRF_PWM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__pwm__hal_1ga3f6888e6f40342ef64cf5b9555bd04d5" kindref="member">nrf_pwm_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="683" column="28" bodyfile="hal/nrf_pwm.h" bodystart="683" bodyend="686" declfile="hal/nrf_pwm.h" declline="410" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1gad002575566c75b323e425cdf59c0a550" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_subscribe_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_task_t task, uint8_t channel)</argsstring>
        <name>nrf_pwm_subscribe_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given PWM task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="421" column="24" declfile="hal/nrf_pwm.h" declline="421" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga7622c00fccfd7653ef3ca5a2f43ca07f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_subscribe_clear</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_task_t task)</argsstring>
        <name>nrf_pwm_subscribe_clear</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given PWM task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="432" column="24" declfile="hal/nrf_pwm.h" declline="432" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga41edf2cfc651f859f465ac532cd4616a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_publish_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_event_t event, uint8_t channel)</argsstring>
        <name>nrf_pwm_publish_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given PWM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="443" column="24" declfile="hal/nrf_pwm.h" declline="443" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga6cd95cd70efae593bd68fa84e93fc433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_publish_clear</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_event_t event)</argsstring>
        <name>nrf_pwm_publish_clear</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given PWM event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="454" column="24" declfile="hal/nrf_pwm.h" declline="454" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga592cb178b637ab0b03bea8523e8ded82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_enable</definition>
        <argsstring>(NRF_PWM_Type *p_reg)</argsstring>
        <name>nrf_pwm_enable</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the PWM peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="718" column="24" bodyfile="hal/nrf_pwm.h" bodystart="718" bodyend="721" declfile="hal/nrf_pwm.h" declline="463" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga03d306651afccddaccc092b9da93789a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_disable</definition>
        <argsstring>(NRF_PWM_Type *p_reg)</argsstring>
        <name>nrf_pwm_disable</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the PWM peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="723" column="24" bodyfile="hal/nrf_pwm.h" bodystart="723" bodyend="726" declfile="hal/nrf_pwm.h" declline="470" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga5895bf394e866a56f522c4bbdfb54996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_pwm_enable_check</definition>
        <argsstring>(NRF_PWM_Type const *p_reg)</argsstring>
        <name>nrf_pwm_enable_check</name>
        <param>
          <type>NRF_PWM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the PWM peripheral is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The PWM is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The PWM is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="728" column="24" bodyfile="hal/nrf_pwm.h" bodystart="728" bodyend="731" declfile="hal/nrf_pwm.h" declline="480" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga0bcd0f7311e790199cd14373fc823a9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_pins_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint32_t const out_pins[4])</argsstring>
        <name>nrf_pwm_pins_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t const</type>
          <declname>out_pins</declname>
          <array>[4]</array>
        </param>
        <briefdescription>
<para>Function for assigning pins to PWM output channels. </para>
        </briefdescription>
        <detaileddescription>
<para>Usage of all PWM output channels is optional. If a given channel is not needed, pass the <ref refid="group__nrf__pwm__hal_1gabf854890a14200d20e7aea8234a16887" kindref="member">NRF_PWM_PIN_NOT_CONNECTED</ref> value instead of its pin number.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">out_pins</parametername>
</parameternamelist>
<parameterdescription>
<para>Array with pin numbers for individual PWM output channels. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="733" column="24" bodyfile="hal/nrf_pwm.h" bodystart="733" bodyend="741" declfile="hal/nrf_pwm.h" declline="492" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1gaafe7e1c261d441016e999e52ec8282b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_pwm_pin_get</definition>
        <argsstring>(NRF_PWM_Type const *p_reg, uint8_t channel)</argsstring>
        <name>nrf_pwm_pin_get</name>
        <param>
          <type>NRF_PWM_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for getting pin selection associated with specified PWM output channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>PWM output channel.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pin selection associated with specified PWM output channel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="743" column="28" bodyfile="hal/nrf_pwm.h" bodystart="743" bodyend="747" declfile="hal/nrf_pwm.h" declline="503" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga58bcf18a7b025c1416d7ea3d6e35038b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_configure</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_clk_t base_clock, nrf_pwm_mode_t mode, uint16_t top_value)</argsstring>
        <name>nrf_pwm_configure</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga8479da20e14394fb2388b1be3b879670" kindref="member">nrf_pwm_clk_t</ref></type>
          <declname>base_clock</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga1f29b190ff13c52895d249e07ebe92cb" kindref="member">nrf_pwm_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>top_value</declname>
        </param>
        <briefdescription>
<para>Function for configuring the PWM peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">base_clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Base clock frequency. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Operating mode of the pulse generator counter. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">top_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value up to which the pulse generator counter counts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="749" column="24" bodyfile="hal/nrf_pwm.h" bodystart="749" bodyend="759" declfile="hal/nrf_pwm.h" declline="513" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga993b47eb4fc9b6350ced9043945a8206" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_sequence_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint8_t seq_id, nrf_pwm_sequence_t const *p_seq)</argsstring>
        <name>nrf_pwm_sequence_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>seq_id</declname>
        </param>
        <param>
          <type><ref refid="structnrf__pwm__sequence__t" kindref="compound">nrf_pwm_sequence_t</ref> const *</type>
          <declname>p_seq</declname>
        </param>
        <briefdescription>
<para>Function for defining a sequence of PWM duty cycles. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the sequence (0 or 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_seq</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the sequence definition. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="761" column="24" bodyfile="hal/nrf_pwm.h" bodystart="761" bodyend="771" declfile="hal/nrf_pwm.h" declline="525" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga5b99dfe4536733fdc46059eb5d4d704c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint8_t seq_id, uint16_t const *p_values)</argsstring>
        <name>nrf_pwm_seq_ptr_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>seq_id</declname>
        </param>
        <param>
          <type>uint16_t const *</type>
          <declname>p_values</declname>
        </param>
        <briefdescription>
<para>Function for modifying the pointer to the duty cycle values in the specified sequence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the sequence (0 or 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_values</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to an array with duty cycle values. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="773" column="24" bodyfile="hal/nrf_pwm.h" bodystart="773" bodyend="784" declfile="hal/nrf_pwm.h" declline="537" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga794b85dd82faa63d636603e797259798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint8_t seq_id, uint16_t length)</argsstring>
        <name>nrf_pwm_seq_cnt_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>seq_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Function for modifying the total number of duty cycle values in the specified sequence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the sequence (0 or 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of duty cycle values (in 16-bit half words). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="786" column="24" bodyfile="hal/nrf_pwm.h" bodystart="786" bodyend="799" declfile="hal/nrf_pwm.h" declline="549" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1gad0371b811ef5160dbcab8bdfa03b8448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint8_t seq_id, uint32_t refresh)</argsstring>
        <name>nrf_pwm_seq_refresh_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>seq_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>refresh</declname>
        </param>
        <briefdescription>
<para>Function for modifying the additional number of PWM periods spent on each duty cycle value in the specified sequence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the sequence (0 or 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">refresh</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of additional PWM periods for each duty cycle value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="801" column="24" bodyfile="hal/nrf_pwm.h" bodystart="801" bodyend="808" declfile="hal/nrf_pwm.h" declline="561" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga70c82b30f512bfb43092fd793e79fefd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint8_t seq_id, uint32_t end_delay)</argsstring>
        <name>nrf_pwm_seq_end_delay_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>seq_id</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>end_delay</declname>
        </param>
        <briefdescription>
<para>Function for modifying the additional time added after the sequence is played. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier of the sequence (0 or 1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">end_delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of PWM periods added at the end of the sequence. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="810" column="24" bodyfile="hal/nrf_pwm.h" bodystart="810" bodyend="817" declfile="hal/nrf_pwm.h" declline="573" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga6a3c94d7139f17dd0f43ef4f16abb5cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_decoder_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, nrf_pwm_dec_load_t dec_load, nrf_pwm_dec_step_t dec_step)</argsstring>
        <name>nrf_pwm_decoder_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1ga453888e5feb46774da27499ca1eeafd2" kindref="member">nrf_pwm_dec_load_t</ref></type>
          <declname>dec_load</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__pwm__hal_1gae25a7e03c383934d33cda8a049b7dde4" kindref="member">nrf_pwm_dec_step_t</ref></type>
          <declname>dec_step</declname>
        </param>
        <briefdescription>
<para>Function for setting the mode of loading sequence data from RAM and advancing the sequence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dec_load</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode of loading sequence data from RAM. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dec_step</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode of advancing the active sequence. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="819" column="24" bodyfile="hal/nrf_pwm.h" bodystart="819" bodyend="825" declfile="hal/nrf_pwm.h" declline="585" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1gaa7c79a9e33546f5dff5ef564052cbe1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_pwm_loop_set</definition>
        <argsstring>(NRF_PWM_Type *p_reg, uint16_t loop_count)</argsstring>
        <name>nrf_pwm_loop_set</name>
        <param>
          <type>NRF_PWM_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>loop_count</declname>
        </param>
        <briefdescription>
<para>Function for setting the number of times the sequence playback should be performed. </para>
        </briefdescription>
        <detaileddescription>
<para>This function applies to two-sequence playback (concatenated sequence 0 and 1). A single sequence can be played back only once.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">loop_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of times to perform the sequence playback. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="827" column="24" bodyfile="hal/nrf_pwm.h" bodystart="827" bodyend="831" declfile="hal/nrf_pwm.h" declline="599" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1gaa0d334d0587cb0f3213e097a67475d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_pwm_task_t nrf_pwm_seqstart_task_get</definition>
        <argsstring>(uint8_t seq_id)</argsstring>
        <name>nrf_pwm_seqstart_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>seq_id</declname>
        </param>
        <briefdescription>
<para>Function for getting the specified PWM SEQSTART task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The specified PWM SEQSTART task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="833" column="34" bodyfile="hal/nrf_pwm.h" bodystart="833" bodyend="841" declfile="hal/nrf_pwm.h" declline="608" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__pwm__hal_1ga9e0af905e8f4605795455630b66ea833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_pwm_event_t nrf_pwm_seqend_event_get</definition>
        <argsstring>(uint8_t seq_id)</argsstring>
        <name>nrf_pwm_seqend_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>seq_id</declname>
        </param>
        <briefdescription>
<para>Function for getting the specified PWM SEQEND event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">seq_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The specified PWM SEQEND event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_pwm.h" line="843" column="35" bodyfile="hal/nrf_pwm.h" bodystart="843" bodyend="851" declfile="hal/nrf_pwm.h" declline="617" declcolumn="35"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_PWM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_PWM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_pwm_hal<sp/>PWM<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_pwm</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>Pulse<sp/>Width<sp/>Modulation<sp/>(PWM)<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PWM_DMA_SEQ_PTR_PTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>dedicated<sp/>DMA<sp/>register<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_PWM_HAS_DMA_REG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_PWM_HAS_DMA_REG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PWM_SHORTS_LOOPSDONE_SEQSTART0_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>shorting<sp/>SEQSTART<sp/>task<sp/>with<sp/>LOOPSDONE<sp/>event<sp/>is<sp/>available.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_PWM_HAS_SHORT_LOOPSDONE_SEQSTART<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_PWM_HAS_SHORT_LOOPSDONE_SEQSTART<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(PWM_TASKS_DMA_SEQ_START_START_Msk)<sp/>&amp;&amp;<sp/>defined(PWM_EVENTS_DMA_SEQ_END_END_Msk))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>PWM<sp/>DMA<sp/>tasks<sp/>and<sp/>events<sp/>are<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_PWM_HAS_DMA_TASKS_EVENTS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_PWM_HAS_DMA_TASKS_EVENTS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PWM_SEQ_CNT_CNT_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>setting<sp/>the<sp/>number<sp/>of<sp/>duty<sp/>cycle<sp/>values<sp/>for<sp/>a<sp/>sequence<sp/>is<sp/>available.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_PWM_HAS_SEQ_CNT<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_PWM_HAS_SEQ_CNT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>getting<sp/>pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>PWM<sp/>peripheral.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>idx<sp/>PWM<sp/>instance<sp/>index.</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>PWM<sp/>peripheral.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/>#define<sp/>NRF_PWM_INST_GET(idx)<sp/>NRFX_CONCAT(NRF_,<sp/>PWM,<sp/>idx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="89"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>@brief<sp/>This<sp/>value<sp/>can<sp/>be<sp/>provided<sp/>as<sp/>a<sp/>parameter<sp/>for<sp/>the<sp/>@ref<sp/>nrf_pwm_pins_set</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>call<sp/>to<sp/>specify<sp/>that<sp/>a<sp/>given<sp/>output<sp/>channel<sp/>shall<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connected<sp/>to<sp/>a<sp/>physical<sp/>pin.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_PWM_PIN_NOT_CONNECTED<sp/><sp/>0xFFFFFFFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment">/**<sp/>@brief<sp/>Number<sp/>of<sp/>channels<sp/>in<sp/>each<sp/>PWM<sp/>instance.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_PWM_CHANNEL_COUNT<sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="99"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Helper<sp/>macro<sp/>for<sp/>calculating<sp/>the<sp/>number<sp/>of<sp/>16-bit<sp/>values<sp/>in<sp/>the<sp/>specified</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/>of<sp/>duty<sp/>cycle<sp/>values.</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_PWM_VALUES_LENGTH(array)<sp/><sp/>(sizeof(array)<sp/>/<sp/>2UL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment">/**<sp/>@brief<sp/>PWM<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga11cb9ca8fbb773011a3ad6658914418ea1cdbda5c0c8086b3e22909f93ae2eda8" kindref="member">NRF_PWM_TASK_STOP</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_PWM_Type,<sp/>TASKS_STOP),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Stops<sp/>PWM<sp/>pulse<sp/>generation<sp/>on<sp/>all<sp/>channels<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>current<sp/>PWM<sp/>period,<sp/>and<sp/>stops<sp/>the<sp/>sequence<sp/>playback.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_PWM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga11cb9ca8fbb773011a3ad6658914418ea0e0eb4565d08c63ccd6b314e8b6b4c90" kindref="member">NRF_PWM_TASK_SEQSTART0</ref><sp/>=<sp/>offsetof(NRF_PWM_Type,<sp/>TASKS_DMA.SEQ[0].START),<sp/></highlight><highlight class="comment">///&lt;<sp/>Starts<sp/>playback<sp/>of<sp/>sequence<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga11cb9ca8fbb773011a3ad6658914418eafcce137014a7767686d57ccb832dcb99" kindref="member">NRF_PWM_TASK_SEQSTART1</ref><sp/>=<sp/>offsetof(NRF_PWM_Type,<sp/>TASKS_DMA.SEQ[1].START),<sp/></highlight><highlight class="comment">///&lt;<sp/>Starts<sp/>playback<sp/>of<sp/>sequence<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga11cb9ca8fbb773011a3ad6658914418ea0e0eb4565d08c63ccd6b314e8b6b4c90" kindref="member">NRF_PWM_TASK_SEQSTART0</ref><sp/>=<sp/>offsetof(NRF_PWM_Type,<sp/>TASKS_SEQSTART[0]),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Starts<sp/>playback<sp/>of<sp/>sequence<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga11cb9ca8fbb773011a3ad6658914418eafcce137014a7767686d57ccb832dcb99" kindref="member">NRF_PWM_TASK_SEQSTART1</ref><sp/>=<sp/>offsetof(NRF_PWM_Type,<sp/>TASKS_SEQSTART[1]),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Starts<sp/>playback<sp/>of<sp/>sequence<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga11cb9ca8fbb773011a3ad6658914418eaaa206912dd578140efcf3a668a78f4e5" kindref="member">NRF_PWM_TASK_NEXTSTEP</ref><sp/><sp/>=<sp/>offsetof(NRF_PWM_Type,<sp/>TASKS_NEXTSTEP)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Steps<sp/>by<sp/>one<sp/>value<sp/>in<sp/>the<sp/>current<sp/>sequence<sp/>if<sp/>the<sp/>decoder<sp/>is<sp/>set<sp/>to<sp/>@ref<sp/>NRF_PWM_STEP_TRIGGERED<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">}<sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment">/**<sp/>@brief<sp/>PWM<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfadf20e481b3105e4ef6e6f80423c8192b" kindref="member">NRF_PWM_EVENT_STOPPED</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_PWM_Type,<sp/>EVENTS_STOPPED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Response<sp/>to<sp/>STOP<sp/>task,<sp/>emitted<sp/>when<sp/>PWM<sp/>pulses<sp/>are<sp/>no<sp/>longer<sp/>generated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfaa5bb09f0669ce66b58053dd382a3bcbf" kindref="member">NRF_PWM_EVENT_SEQSTARTED0</ref><sp/><sp/>=<sp/>offsetof(NRF_PWM_Type,<sp/>EVENTS_SEQSTARTED[0]),<sp/></highlight><highlight class="comment">///&lt;<sp/>First<sp/>PWM<sp/>period<sp/>started<sp/>on<sp/>sequence<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa79aea4fc8f7e536c180a1b5b4c9a2596" kindref="member">NRF_PWM_EVENT_SEQSTARTED1</ref><sp/><sp/>=<sp/>offsetof(NRF_PWM_Type,<sp/>EVENTS_SEQSTARTED[1]),<sp/></highlight><highlight class="comment">///&lt;<sp/>First<sp/>PWM<sp/>period<sp/>started<sp/>on<sp/>sequence<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa60bc770e86e8c3e1987b7828c5527e3b" kindref="member">NRF_PWM_EVENT_SEQEND0</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_PWM_Type,<sp/>EVENTS_SEQEND[0]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Emitted<sp/>at<sp/>the<sp/>end<sp/>of<sp/>every<sp/>sequence<sp/>0<sp/>when<sp/>its<sp/>last<sp/>value<sp/>has<sp/>been<sp/>read<sp/>from<sp/>RAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa250b4184e07ce53864c00aa17f142c3e" kindref="member">NRF_PWM_EVENT_SEQEND1</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_PWM_Type,<sp/>EVENTS_SEQEND[1]),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Emitted<sp/>at<sp/>the<sp/>end<sp/>of<sp/>every<sp/>sequence<sp/>1<sp/>when<sp/>its<sp/>last<sp/>value<sp/>has<sp/>been<sp/>read<sp/>from<sp/>RAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa2340304c4d850deee64456310c272d13" kindref="member">NRF_PWM_EVENT_PWMPERIODEND</ref><sp/>=<sp/>offsetof(NRF_PWM_Type,<sp/>EVENTS_PWMPERIODEND),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Emitted<sp/>at<sp/>the<sp/>end<sp/>of<sp/>each<sp/>PWM<sp/>period.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga4a8ceac653433e4ac8ee8682bdef45bfa904f95da3dc44a8e147623f4ae32a268" kindref="member">NRF_PWM_EVENT_LOOPSDONE</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_PWM_Type,<sp/>EVENTS_LOOPSDONE)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Concatenated<sp/>sequences<sp/>have<sp/>been<sp/>played<sp/>the<sp/>specified<sp/>number<sp/>of<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">}<sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment">/**<sp/>@brief<sp/>PWM<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5ad7b8b51084d217e44611e4353d8d8a36" kindref="member">NRF_PWM_INT_STOPPED_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_INTENSET_STOPPED_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>STOPPED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5a41e26a43feadb28f3fa05b41bee59a4e" kindref="member">NRF_PWM_INT_SEQSTARTED0_MASK</ref><sp/><sp/>=<sp/>PWM_INTENSET_SEQSTARTED0_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>SEQSTARTED[0]<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5ac6ae5c9057a052908572d3b03c7fa5e4" kindref="member">NRF_PWM_INT_SEQSTARTED1_MASK</ref><sp/><sp/>=<sp/>PWM_INTENSET_SEQSTARTED1_Msk,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>SEQSTARTED[1]<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5a5bdd3b534ac4b8e538d653f69ce83627" kindref="member">NRF_PWM_INT_SEQEND0_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_INTENSET_SEQEND0_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>SEQEND[0]<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5a6727da1cd7e51206d5d51702ef249d1e" kindref="member">NRF_PWM_INT_SEQEND1_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_INTENSET_SEQEND1_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>SEQEND[1]<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5a11080b028d0f9714cef68a08be3ad1c2" kindref="member">NRF_PWM_INT_PWMPERIODEND_MASK</ref><sp/>=<sp/>PWM_INTENSET_PWMPERIODEND_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>PWMPERIODEND<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga3f6888e6f40342ef64cf5b9555bd04d5a409117735d39f637f068291dcc5b02be" kindref="member">NRF_PWM_INT_LOOPSDONE_MASK</ref><sp/><sp/><sp/><sp/>=<sp/>PWM_INTENSET_LOOPSDONE_Msk<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>LOOPSDONE<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">}<sp/><ref refid="group__nrf__pwm__hal_1ga3f6888e6f40342ef64cf5b9555bd04d5" kindref="member">nrf_pwm_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment">/**<sp/>@brief<sp/>PWM<sp/>shortcuts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga677eee0f6fb961e515018d5cf68d06a6aea663e579d7f33326625af10b4437024" kindref="member">NRF_PWM_SHORT_SEQEND0_STOP_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_SHORTS_SEQEND0_STOP_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>SEQEND[0]<sp/>event<sp/>and<sp/>STOP<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga677eee0f6fb961e515018d5cf68d06a6add885779b4d8c2f77dd5d53119c17a40" kindref="member">NRF_PWM_SHORT_SEQEND1_STOP_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_SHORTS_SEQEND1_STOP_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>SEQEND[1]<sp/>event<sp/>and<sp/>STOP<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PWM_SHORTS_LOOPSDONE_SEQSTART0_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga677eee0f6fb961e515018d5cf68d06a6ac3db7894c3849c4bc4fa1150799a12d5" kindref="member">NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK</ref><sp/>=<sp/>PWM_SHORTS_LOOPSDONE_SEQSTART0_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>LOOPSDONE<sp/>event<sp/>and<sp/>SEQSTART[0]<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga677eee0f6fb961e515018d5cf68d06a6aaefb987c3a650031c75517f6e8aa9221" kindref="member">NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK</ref><sp/>=<sp/>PWM_SHORTS_LOOPSDONE_SEQSTART1_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>LOOPSDONE<sp/>event<sp/>and<sp/>SEQSTART[1]<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga677eee0f6fb961e515018d5cf68d06a6ac3db7894c3849c4bc4fa1150799a12d5" kindref="member">NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK</ref><sp/>=<sp/>PWM_SHORTS_LOOPSDONE_DMA_SEQ0_START_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>LOOPSDONE<sp/>event<sp/>and<sp/>DMA.SEQ[0].START<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga677eee0f6fb961e515018d5cf68d06a6aaefb987c3a650031c75517f6e8aa9221" kindref="member">NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK</ref><sp/>=<sp/>PWM_SHORTS_LOOPSDONE_DMA_SEQ1_START_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>LOOPSDONE<sp/>event<sp/>and<sp/>DMA.SEQ[1].START<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga677eee0f6fb961e515018d5cf68d06a6aabc8554ee052151a9d49dafa25321cbe" kindref="member">NRF_PWM_SHORT_LOOPSDONE_STOP_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_SHORTS_LOOPSDONE_STOP_Msk<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>LOOPSDONE<sp/>event<sp/>and<sp/>STOP<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">}<sp/><ref refid="group__nrf__pwm__hal_1ga677eee0f6fb961e515018d5cf68d06a6" kindref="member">nrf_pwm_short_mask_t</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment">/**<sp/>@brief<sp/>PWM<sp/>modes<sp/>of<sp/>operation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga1f29b190ff13c52895d249e07ebe92cba0b9d394af2cbadb2fd430f73e6b2a28c" kindref="member">NRF_PWM_MODE_UP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_MODE_UPDOWN_Up,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Up<sp/>counter<sp/>(edge-aligned<sp/>PWM<sp/>duty<sp/>cycle).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga1f29b190ff13c52895d249e07ebe92cba37eab07de351c4001e96bfe588b5fac7" kindref="member">NRF_PWM_MODE_UP_AND_DOWN</ref><sp/>=<sp/>PWM_MODE_UPDOWN_UpAndDown,<sp/></highlight><highlight class="comment">///&lt;<sp/>Up<sp/>and<sp/>down<sp/>counter<sp/>(center-aligned<sp/>PWM<sp/>duty<sp/>cycle).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal">}<sp/><ref refid="group__nrf__pwm__hal_1ga1f29b190ff13c52895d249e07ebe92cb" kindref="member">nrf_pwm_mode_t</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="166"><highlight class="comment">/**<sp/>@brief<sp/>PWM<sp/>base<sp/>clock<sp/>frequencies.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a0074030b06b359a6caf1cf00eafd28cc" kindref="member">NRF_PWM_CLK_16MHz</ref><sp/><sp/>=<sp/>PWM_PRESCALER_PRESCALER_DIV_1,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>16<sp/>MHz<sp/>/<sp/>1<sp/>=<sp/>16<sp/>MHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a4a67fe77580783f462d89e2a6fcef9c6" kindref="member">NRF_PWM_CLK_8MHz</ref><sp/><sp/><sp/>=<sp/>PWM_PRESCALER_PRESCALER_DIV_2,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>16<sp/>MHz<sp/>/<sp/>2<sp/>=<sp/>8<sp/>MHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a64d3ac0932e8dc1b27a4133d56bf06be" kindref="member">NRF_PWM_CLK_4MHz</ref><sp/><sp/><sp/>=<sp/>PWM_PRESCALER_PRESCALER_DIV_4,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>16<sp/>MHz<sp/>/<sp/>4<sp/>=<sp/>4<sp/>MHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670acacabaa47b84f819006fe490792aa50e" kindref="member">NRF_PWM_CLK_2MHz</ref><sp/><sp/><sp/>=<sp/>PWM_PRESCALER_PRESCALER_DIV_8,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>16<sp/>MHz<sp/>/<sp/>8<sp/>=<sp/>2<sp/>MHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a30e595429e6787e18df7ca04b897bb11" kindref="member">NRF_PWM_CLK_1MHz</ref><sp/><sp/><sp/>=<sp/>PWM_PRESCALER_PRESCALER_DIV_16,<sp/></highlight><highlight class="comment">///&lt;<sp/>16<sp/>MHz<sp/>/<sp/>16<sp/>=<sp/>1<sp/>MHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a5adb2af103d1968468dd46f572a4a2c5" kindref="member">NRF_PWM_CLK_500kHz</ref><sp/>=<sp/>PWM_PRESCALER_PRESCALER_DIV_32,<sp/></highlight><highlight class="comment">///&lt;<sp/>16<sp/>MHz<sp/>/<sp/>32<sp/>=<sp/>500<sp/>kHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a52f5dff4d18dac79ea6387f1ed9e0aa0" kindref="member">NRF_PWM_CLK_250kHz</ref><sp/>=<sp/>PWM_PRESCALER_PRESCALER_DIV_64,<sp/></highlight><highlight class="comment">///&lt;<sp/>16<sp/>MHz<sp/>/<sp/>64<sp/>=<sp/>250<sp/>kHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga8479da20e14394fb2388b1be3b879670a809f569f8bed353ccf5ef237c31a93f1" kindref="member">NRF_PWM_CLK_125kHz</ref><sp/>=<sp/>PWM_PRESCALER_PRESCALER_DIV_128<sp/></highlight><highlight class="comment">///&lt;<sp/>16<sp/>MHz<sp/>/<sp/>128<sp/>=<sp/>125<sp/>kHz.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">}<sp/><ref refid="group__nrf__pwm__hal_1ga8479da20e14394fb2388b1be3b879670" kindref="member">nrf_pwm_clk_t</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="179"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*<sp/>@brief<sp/>PWM<sp/>decoder<sp/>load<sp/>modes.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>The<sp/>selected<sp/>mode<sp/>determines<sp/>how<sp/>the<sp/>sequence<sp/>data<sp/>is<sp/>read<sp/>from<sp/>RAM<sp/>and</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*<sp/>spread<sp/>to<sp/>the<sp/>compare<sp/>registers.</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga453888e5feb46774da27499ca1eeafd2a23a17dad88a8dff161e09c5057e70362" kindref="member">NRF_PWM_LOAD_COMMON</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_DECODER_LOAD_Common,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>1st<sp/>half<sp/>word<sp/>(16-bit)<sp/>used<sp/>in<sp/>all<sp/>PWM<sp/>channels<sp/>(0-3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga453888e5feb46774da27499ca1eeafd2ab66a66edb78babab583af6326452ed29" kindref="member">NRF_PWM_LOAD_GROUPED</ref><sp/><sp/><sp/><sp/>=<sp/>PWM_DECODER_LOAD_Grouped,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>1st<sp/>half<sp/>word<sp/>(16-bit)<sp/>used<sp/>in<sp/>channels<sp/>0<sp/>and<sp/>1;<sp/>2nd<sp/>word<sp/>in<sp/>channels<sp/>2<sp/>and<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga453888e5feb46774da27499ca1eeafd2a97607a1a4b271d76c6d1305408e6ca4e" kindref="member">NRF_PWM_LOAD_INDIVIDUAL</ref><sp/>=<sp/>PWM_DECODER_LOAD_Individual,<sp/></highlight><highlight class="comment">///&lt;<sp/>1st<sp/>half<sp/>word<sp/>(16-bit)<sp/>used<sp/>in<sp/>channel<sp/>0;<sp/>2nd<sp/>in<sp/>channel<sp/>1;<sp/>3rd<sp/>in<sp/>channel<sp/>2;<sp/>4th<sp/>in<sp/>channel<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gga453888e5feb46774da27499ca1eeafd2a5e0beb030e89afbac264872b6991585a" kindref="member">NRF_PWM_LOAD_WAVE_FORM</ref><sp/><sp/>=<sp/>PWM_DECODER_LOAD_WaveForm<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>1st<sp/>half<sp/>word<sp/>(16-bit)<sp/>used<sp/>in<sp/>channel<sp/>0;<sp/>2nd<sp/>in<sp/>channel<sp/>1;<sp/>...<sp/>;<sp/>4th<sp/>as<sp/>the<sp/>top<sp/>value<sp/>for<sp/>the<sp/>pulse<sp/>generator<sp/>counter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">}<sp/><ref refid="group__nrf__pwm__hal_1ga453888e5feb46774da27499ca1eeafd2" kindref="member">nrf_pwm_dec_load_t</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="193"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>@brief<sp/>PWM<sp/>decoder<sp/>next<sp/>step<sp/>modes.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>The<sp/>selected<sp/>mode<sp/>determines<sp/>when<sp/>the<sp/>next<sp/>value<sp/>from<sp/>the<sp/>active<sp/>sequence</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>is<sp/>loaded.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ggae25a7e03c383934d33cda8a049b7dde4aec7f52e96da457170f1a516ea78357a1" kindref="member">NRF_PWM_STEP_AUTO</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>PWM_DECODER_MODE_RefreshCount,<sp/></highlight><highlight class="comment">///&lt;<sp/>Automatically<sp/>after<sp/>the<sp/>current<sp/>value<sp/>is<sp/>played<sp/>and<sp/>repeated<sp/>the<sp/>requested<sp/>number<sp/>of<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ggae25a7e03c383934d33cda8a049b7dde4aa64f9312c7d5928aadcaf7596e61357b" kindref="member">NRF_PWM_STEP_TRIGGERED</ref><sp/>=<sp/>PWM_DECODER_MODE_NextStep<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>When<sp/>the<sp/>@ref<sp/>NRF_PWM_TASK_NEXTSTEP<sp/>task<sp/>is<sp/>triggered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">}<sp/><ref refid="group__nrf__pwm__hal_1gae25a7e03c383934d33cda8a049b7dde4" kindref="member">nrf_pwm_dec_step_t</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="205"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Type<sp/>used<sp/>for<sp/>defining<sp/>duty<sp/>cycle<sp/>values<sp/>for<sp/>a<sp/>sequence</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loaded<sp/>in<sp/>@ref<sp/>NRF_PWM_LOAD_COMMON<sp/>mode.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="group__nrf__pwm__hal_1ga5a7353575cd92e960e569d94db319d8d" kindref="member">nrf_pwm_values_common_t</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="211"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Structure<sp/>for<sp/>defining<sp/>duty<sp/>cycle<sp/>values<sp/>for<sp/>a<sp/>sequence</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loaded<sp/>in<sp/>@ref<sp/>NRF_PWM_LOAD_GROUPED<sp/>mode.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="structnrf__pwm__values__grouped__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>group_0;<sp/></highlight><highlight class="comment">///&lt;<sp/>Duty<sp/>cycle<sp/>value<sp/>for<sp/>group<sp/>0<sp/>(channels<sp/>0<sp/>and<sp/>1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>group_1;<sp/></highlight><highlight class="comment">///&lt;<sp/>Duty<sp/>cycle<sp/>value<sp/>for<sp/>group<sp/>1<sp/>(channels<sp/>2<sp/>and<sp/>3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal">}<sp/><ref refid="structnrf__pwm__values__grouped__t" kindref="compound">nrf_pwm_values_grouped_t</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="220"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Structure<sp/>for<sp/>defining<sp/>duty<sp/>cycle<sp/>values<sp/>for<sp/>a<sp/>sequence</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loaded<sp/>in<sp/>@ref<sp/>NRF_PWM_LOAD_INDIVIDUAL<sp/>mode.</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="structnrf__pwm__values__individual__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>channel_0;<sp/></highlight><highlight class="comment">///&lt;<sp/>Duty<sp/>cycle<sp/>value<sp/>for<sp/>channel<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>channel_1;<sp/></highlight><highlight class="comment">///&lt;<sp/>Duty<sp/>cycle<sp/>value<sp/>for<sp/>channel<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>channel_2;<sp/></highlight><highlight class="comment">///&lt;<sp/>Duty<sp/>cycle<sp/>value<sp/>for<sp/>channel<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>channel_3;<sp/></highlight><highlight class="comment">///&lt;<sp/>Duty<sp/>cycle<sp/>value<sp/>for<sp/>channel<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">}<sp/><ref refid="structnrf__pwm__values__individual__t" kindref="compound">nrf_pwm_values_individual_t</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="232"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Structure<sp/>for<sp/>defining<sp/>duty<sp/>cycle<sp/>values<sp/>for<sp/>a<sp/>sequence</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loaded<sp/>in<sp/>@ref<sp/>NRF_PWM_LOAD_WAVE_FORM<sp/>mode.</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="structnrf__pwm__values__wave__form__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>channel_0;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Duty<sp/>cycle<sp/>value<sp/>for<sp/>channel<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>channel_1;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Duty<sp/>cycle<sp/>value<sp/>for<sp/>channel<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>channel_2;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Duty<sp/>cycle<sp/>value<sp/>for<sp/>channel<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>counter_top;<sp/></highlight><highlight class="comment">///&lt;<sp/>Top<sp/>value<sp/>for<sp/>the<sp/>pulse<sp/>generator<sp/>counter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal">}<sp/><ref refid="structnrf__pwm__values__wave__form__t" kindref="compound">nrf_pwm_values_wave_form_t</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="243"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Union<sp/>grouping<sp/>pointers<sp/>to<sp/>arrays<sp/>of<sp/>duty<sp/>cycle<sp/>values<sp/>applicable<sp/>to</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>various<sp/>loading<sp/>modes.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="unionnrf__pwm__values__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga5a7353575cd92e960e569d94db319d8d" kindref="member">nrf_pwm_values_common_t</ref><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_common;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>to<sp/>be<sp/>used<sp/>in<sp/>@ref<sp/>NRF_PWM_LOAD_COMMON<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__pwm__values__grouped__t" kindref="compound">nrf_pwm_values_grouped_t</ref><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_grouped;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>to<sp/>be<sp/>used<sp/>in<sp/>@ref<sp/>NRF_PWM_LOAD_GROUPED<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__pwm__values__individual__t" kindref="compound">nrf_pwm_values_individual_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_individual;<sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>to<sp/>be<sp/>used<sp/>in<sp/>@ref<sp/>NRF_PWM_LOAD_INDIVIDUAL<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__pwm__values__wave__form__t" kindref="compound">nrf_pwm_values_wave_form_t</ref><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_wave_form;<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>to<sp/>be<sp/>used<sp/>in<sp/>@ref<sp/>NRF_PWM_LOAD_WAVE_FORM<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_raw;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>providing<sp/>raw<sp/>access<sp/>to<sp/>the<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">}<sp/><ref refid="unionnrf__pwm__values__t" kindref="compound">nrf_pwm_values_t</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="255"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Structure<sp/>for<sp/>defining<sp/>a<sp/>sequence<sp/>of<sp/>PWM<sp/>duty<sp/>cycles.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>When<sp/>the<sp/>sequence<sp/>is<sp/>set<sp/>(by<sp/>a<sp/>call<sp/>to<sp/>@ref<sp/>nrf_pwm_sequence_set),<sp/>the</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>provided<sp/>duty<sp/>cycle<sp/>values<sp/>are<sp/>not<sp/>copied.<sp/>The<sp/>@p<sp/>values<sp/>pointer<sp/>is<sp/>stored</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>internal<sp/>register<sp/>of<sp/>the<sp/>peripheral,<sp/>and<sp/>the<sp/>values<sp/>are<sp/>loaded<sp/>from<sp/>RAM</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>during<sp/>the<sp/>sequence<sp/>playback.<sp/>Therefore,<sp/>you<sp/>must<sp/>ensure<sp/>that<sp/>the<sp/>values</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>do<sp/>not<sp/>change<sp/>before<sp/>and<sp/>during<sp/>the<sp/>sequence<sp/>playback<sp/>(for<sp/>example,</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>the<sp/>values<sp/>cannot<sp/>be<sp/>placed<sp/>in<sp/>a<sp/>local<sp/>variable<sp/>that<sp/>is<sp/>allocated<sp/>on<sp/>stack).</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>sequence<sp/>is<sp/>played<sp/>in<sp/>a<sp/>loop<sp/>and<sp/>the<sp/>values<sp/>are<sp/>to<sp/>be<sp/>updated</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>before<sp/>the<sp/>next<sp/>iteration,<sp/>it<sp/>is<sp/>safe<sp/>to<sp/>modify<sp/>them<sp/>when<sp/>the<sp/>corresponding</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*<sp/>event<sp/>signaling<sp/>the<sp/>end<sp/>of<sp/>sequence<sp/>occurs<sp/>(@ref<sp/>NRF_PWM_EVENT_SEQEND0</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>or<sp/>@ref<sp/>NRF_PWM_EVENT_SEQEND1,<sp/>respectively).</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>@p<sp/>repeats<sp/>and<sp/>@p<sp/>end_delay<sp/>values<sp/>(which<sp/>are<sp/>written<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>SEQ[n].REFRESH<sp/>and<sp/>SEQ[n].ENDDELAY<sp/>registers<sp/>in<sp/>the<sp/>peripheral,</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>respectively)<sp/>are<sp/>ignored<sp/>at<sp/>the<sp/>end<sp/>of<sp/>a<sp/>complex<sp/>sequence</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>playback,<sp/>indicated<sp/>by<sp/>the<sp/>LOOPSDONE<sp/>event.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>the<sp/>Product<sp/>Specification<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="structnrf__pwm__sequence__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionnrf__pwm__values__t" kindref="compound">nrf_pwm_values_t</ref><sp/>values;<sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>to<sp/>an<sp/>array<sp/>with<sp/>duty<sp/>cycle<sp/>values.<sp/>This<sp/>array<sp/>must<sp/>be<sp/>in<sp/>Data<sp/>RAM.</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/**&lt;<sp/>This<sp/>field<sp/>is<sp/>defined<sp/>as<sp/>an<sp/>union<sp/>of<sp/>pointers</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>to<sp/>provide<sp/>a<sp/>convenient<sp/>way<sp/>to<sp/>define<sp/>duty</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>cycle<sp/>values<sp/>in<sp/>various<sp/>loading<sp/>modes</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>(see<sp/>@ref<sp/>nrf_pwm_dec_load_t).</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>In<sp/>each<sp/>value,<sp/>the<sp/>most<sp/>significant<sp/>bit<sp/>(15)</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>determines<sp/>the<sp/>polarity<sp/>of<sp/>the<sp/>output<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>others<sp/>(14-0)<sp/>compose<sp/>the<sp/>15-bit<sp/>value<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>compared<sp/>with<sp/>the<sp/>pulse<sp/>generator<sp/>counter.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>length;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Number<sp/>of<sp/>16-bit<sp/>values<sp/>in<sp/>the<sp/>array<sp/>pointed<sp/>by<sp/>@p<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>repeats;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Number<sp/>of<sp/>times<sp/>that<sp/>each<sp/>duty<sp/>cycle<sp/>is<sp/>to<sp/>be<sp/>repeated<sp/>(after<sp/>being<sp/>played<sp/>once).<sp/>Ignored<sp/>in<sp/>@ref<sp/>NRF_PWM_STEP_TRIGGERED<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>end_delay;<sp/></highlight><highlight class="comment">///&lt;<sp/>Additional<sp/>time<sp/>(in<sp/>PWM<sp/>periods)<sp/>that<sp/>the<sp/>last<sp/>duty<sp/>cycle<sp/>is<sp/>to<sp/>be<sp/>kept<sp/>after<sp/>the<sp/>sequence<sp/>is<sp/>played.<sp/>Ignored<sp/>in<sp/>@ref<sp/>NRF_PWM_STEP_TRIGGERED<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">}<sp/><ref refid="structnrf__pwm__sequence__t" kindref="compound">nrf_pwm_sequence_t</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="292"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>the<sp/>specified<sp/>PWM<sp/>task.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga80273886334d6d99c516aa13e9e6773a" kindref="member">nrf_pwm_task_trigger</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="301"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>PWM<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>PWM<sp/>task.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__pwm__hal_1gaa78ad952a4164f2acdc2aa22b6fd0618" kindref="member">nrf_pwm_task_address_get</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="312"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>PWM<sp/>event.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>clear.</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gadd2be0c46a34bece88f176db55cfe9ee" kindref="member">nrf_pwm_event_clear</ref>(NRF_PWM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="321"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>PWM<sp/>event.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga7b6689ec738c01ef7e02d6923b8707a4" kindref="member">nrf_pwm_event_check</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="333"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>PWM<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>PWM<sp/>event.</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__pwm__hal_1ga3eba935312b4bf541151a30e0d408beb" kindref="member">nrf_pwm_event_address_get</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="344"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>shortcuts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gad37230defb6539bad9deeed03b4ec1ed" kindref="member">nrf_pwm_shorts_enable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="353"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>specified<sp/>shortcuts.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>shortcuts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga52672c9d16d8b47bfccf573a959d1929" kindref="member">nrf_pwm_shorts_disable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="362"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>configuration<sp/>of<sp/>PWM<sp/>shortcuts.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Shortcuts<sp/>configuration<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga486254506e79e5017ec076850ac3b275" kindref="member">nrf_pwm_shorts_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="371"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_pwm_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gad97a8c07dceaad191d77748b3311c25b" kindref="member">nrf_pwm_int_enable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="381"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_pwm_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga502fca6db746ea1fb1d5c45573cc6c1b" kindref="member">nrf_pwm_int_disable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="391"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>configuration<sp/>of<sp/>PWM<sp/>interrupts.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_pwm_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga188dee0693d8704d6d8d77bf2e68831a" kindref="member">nrf_pwm_int_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="401"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_pwm_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__pwm__hal_1gaec938406e805161ad153e2a95638a74c" kindref="member">nrf_pwm_int_enable_check</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="413"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PWM<sp/>task.</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gad002575566c75b323e425cdf59c0a550" kindref="member">nrf_pwm_subscribe_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="425"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PWM<sp/>task.</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga7622c00fccfd7653ef3ca5a2f43ca07f" kindref="member">nrf_pwm_subscribe_clear</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="435"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PWM<sp/>event.</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga41edf2cfc651f859f465ac532cd4616a" kindref="member">nrf_pwm_publish_set</ref>(NRF_PWM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="447"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PWM<sp/>event.</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="453"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga6cd95cd70efae593bd68fa84e93fc433" kindref="member">nrf_pwm_publish_clear</ref>(NRF_PWM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="458"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>PWM<sp/>peripheral.</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga592cb178b637ab0b03bea8523e8ded82" kindref="member">nrf_pwm_enable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="465"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>PWM<sp/>peripheral.</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga03d306651afccddaccc092b9da93789a" kindref="member">nrf_pwm_disable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="472"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>PWM<sp/>peripheral<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>PWM<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>PWM<sp/>is<sp/>not<sp/>enabled.</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga5895bf394e866a56f522c4bbdfb54996" kindref="member">nrf_pwm_enable_check</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="482"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>assigning<sp/>pins<sp/>to<sp/>PWM<sp/>output<sp/>channels.</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/>Usage<sp/>of<sp/>all<sp/>PWM<sp/>output<sp/>channels<sp/>is<sp/>optional.<sp/>If<sp/>a<sp/>given<sp/>channel<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/>needed,<sp/>pass<sp/>the<sp/>@ref<sp/>NRF_PWM_PIN_NOT_CONNECTED<sp/>value<sp/>instead<sp/>of<sp/>its<sp/>pin</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/>number.</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>out_pins<sp/>Array<sp/>with<sp/>pin<sp/>numbers<sp/>for<sp/>individual<sp/>PWM<sp/>output<sp/>channels.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga0bcd0f7311e790199cd14373fc823a9f" kindref="member">nrf_pwm_pins_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>out_pins[<ref refid="group__nrf__pwm__hal_1ga9935002ab3ef7325efe73a6979e77990" kindref="member">NRF_PWM_CHANNEL_COUNT</ref>]);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="495"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>pin<sp/>selection<sp/>associated<sp/>with<sp/>specified<sp/>PWM<sp/>output<sp/>channel.</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>PWM<sp/>output<sp/>channel.</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pin<sp/>selection<sp/>associated<sp/>with<sp/>specified<sp/>PWM<sp/>output<sp/>channel.</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__pwm__hal_1gaafe7e1c261d441016e999e52ec8282b4" kindref="member">nrf_pwm_pin_get</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>channel);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="505"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>PWM<sp/>peripheral.</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>base_clock<sp/>Base<sp/>clock<sp/>frequency.</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Operating<sp/>mode<sp/>of<sp/>the<sp/>pulse<sp/>generator<sp/>counter.</highlight></codeline>
<codeline lineno="511"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>top_value<sp/><sp/>Value<sp/>up<sp/>to<sp/>which<sp/>the<sp/>pulse<sp/>generator<sp/>counter<sp/>counts.</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga58bcf18a7b025c1416d7ea3d6e35038b" kindref="member">nrf_pwm_configure</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga8479da20e14394fb2388b1be3b879670" kindref="member">nrf_pwm_clk_t</ref><sp/><sp/>base_clock,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga1f29b190ff13c52895d249e07ebe92cb" kindref="member">nrf_pwm_mode_t</ref><sp/>mode,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_value);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="518"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>defining<sp/>a<sp/>sequence<sp/>of<sp/>PWM<sp/>duty<sp/>cycles.</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>seq_id<sp/>Identifier<sp/>of<sp/>the<sp/>sequence<sp/>(0<sp/>or<sp/>1).</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_seq<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>sequence<sp/>definition.</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga993b47eb4fc9b6350ced9043945a8206" kindref="member">nrf_pwm_sequence_set</ref>(NRF_PWM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_id,</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__pwm__sequence__t" kindref="compound">nrf_pwm_sequence_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_seq);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="529"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>modifying<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>duty<sp/>cycle<sp/>values</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>specified<sp/>sequence.</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>seq_id<sp/><sp/><sp/>Identifier<sp/>of<sp/>the<sp/>sequence<sp/>(0<sp/>or<sp/>1).</highlight></codeline>
<codeline lineno="535"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_values<sp/>Pointer<sp/>to<sp/>an<sp/>array<sp/>with<sp/>duty<sp/>cycle<sp/>values.</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga5b99dfe4536733fdc46059eb5d4d704c" kindref="member">nrf_pwm_seq_ptr_set</ref>(NRF_PWM_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_id,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_values);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="541"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>modifying<sp/>the<sp/>total<sp/>number<sp/>of<sp/>duty<sp/>cycle<sp/>values</highlight></codeline>
<codeline lineno="543"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>specified<sp/>sequence.</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>seq_id<sp/>Identifier<sp/>of<sp/>the<sp/>sequence<sp/>(0<sp/>or<sp/>1).</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>length<sp/>Number<sp/>of<sp/>duty<sp/>cycle<sp/>values<sp/>(in<sp/>16-bit<sp/>half<sp/>words).</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga794b85dd82faa63d636603e797259798" kindref="member">nrf_pwm_seq_cnt_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_id,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>length);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="553"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>modifying<sp/>the<sp/>additional<sp/>number<sp/>of<sp/>PWM<sp/>periods<sp/>spent</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>each<sp/>duty<sp/>cycle<sp/>value<sp/>in<sp/>the<sp/>specified<sp/>sequence.</highlight></codeline>
<codeline lineno="556"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>seq_id<sp/><sp/>Identifier<sp/>of<sp/>the<sp/>sequence<sp/>(0<sp/>or<sp/>1).</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>refresh<sp/>Number<sp/>of<sp/>additional<sp/>PWM<sp/>periods<sp/>for<sp/>each<sp/>duty<sp/>cycle<sp/>value.</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gad0371b811ef5160dbcab8bdfa03b8448" kindref="member">nrf_pwm_seq_refresh_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_id,</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>refresh);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="565"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="566"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>modifying<sp/>the<sp/>additional<sp/>time<sp/>added<sp/>after<sp/>the<sp/>sequence</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>played.</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>seq_id<sp/><sp/><sp/><sp/>Identifier<sp/>of<sp/>the<sp/>sequence<sp/>(0<sp/>or<sp/>1).</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>end_delay<sp/>Number<sp/>of<sp/>PWM<sp/>periods<sp/>added<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>sequence.</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga70c82b30f512bfb43092fd793e79fefd" kindref="member">nrf_pwm_seq_end_delay_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_id,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_delay);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="577"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>mode<sp/>of<sp/>loading<sp/>sequence<sp/>data<sp/>from<sp/>RAM</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>advancing<sp/>the<sp/>sequence.</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>dec_load<sp/>Mode<sp/>of<sp/>loading<sp/>sequence<sp/>data<sp/>from<sp/>RAM.</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>dec_step<sp/>Mode<sp/>of<sp/>advancing<sp/>the<sp/>active<sp/>sequence.</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga6a3c94d7139f17dd0f43ef4f16abb5cd" kindref="member">nrf_pwm_decoder_set</ref>(NRF_PWM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga453888e5feb46774da27499ca1eeafd2" kindref="member">nrf_pwm_dec_load_t</ref><sp/>dec_load,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gae25a7e03c383934d33cda8a049b7dde4" kindref="member">nrf_pwm_dec_step_t</ref><sp/>dec_step);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="589"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>number<sp/>of<sp/>times<sp/>the<sp/>sequence<sp/>playback</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>should<sp/>be<sp/>performed.</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>applies<sp/>to<sp/>two-sequence<sp/>playback<sp/>(concatenated<sp/>sequence<sp/>0<sp/>and<sp/>1).</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/>*<sp/>A<sp/>single<sp/>sequence<sp/>can<sp/>be<sp/>played<sp/>back<sp/>only<sp/>once.</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>loop_count<sp/>Number<sp/>of<sp/>times<sp/>to<sp/>perform<sp/>the<sp/>sequence<sp/>playback.</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gaa7c79a9e33546f5dff5ef564052cbe1c" kindref="member">nrf_pwm_loop_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,<sp/>uint16_t<sp/>loop_count);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="601"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>specified<sp/>PWM<sp/>SEQSTART<sp/>task.</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>seq_id<sp/>Sequence<sp/>index.</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>specified<sp/>PWM<sp/>SEQSTART<sp/>task.</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/><ref refid="group__nrf__pwm__hal_1gaa0d334d0587cb0f3213e097a67475d5e" kindref="member">nrf_pwm_seqstart_task_get</ref>(uint8_t<sp/>seq_id);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="610"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>specified<sp/>PWM<sp/>SEQEND<sp/>event.</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>seq_id<sp/>Sequence<sp/>index.</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>specified<sp/>PWM<sp/>SEQEND<sp/>event.</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/><ref refid="group__nrf__pwm__hal_1ga9e0af905e8f4605795455630b66ea833" kindref="member">nrf_pwm_seqend_event_get</ref>(uint8_t<sp/>seq_id);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga80273886334d6d99c516aa13e9e6773a" kindref="member">nrf_pwm_task_trigger</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__pwm__hal_1gaa78ad952a4164f2acdc2aa22b6fd0618" kindref="member">nrf_pwm_task_address_get</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)task);</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gadd2be0c46a34bece88f176db55cfe9ee" kindref="member">nrf_pwm_event_clear</ref>(NRF_PWM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="636"><highlight class="normal">{</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga7b6689ec738c01ef7e02d6923b8707a4" kindref="member">nrf_pwm_event_check</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="643"><highlight class="normal">{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__pwm__hal_1ga3eba935312b4bf541151a30e0d408beb" kindref="member">nrf_pwm_event_address_get</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="649"><highlight class="normal">{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gad37230defb6539bad9deeed03b4ec1ed" kindref="member">nrf_pwm_shorts_enable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga52672c9d16d8b47bfccf573a959d1929" kindref="member">nrf_pwm_shorts_disable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>&amp;=<sp/>~(mask);</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga486254506e79e5017ec076850ac3b275" kindref="member">nrf_pwm_shorts_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="664"><highlight class="normal">{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SHORTS<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gad97a8c07dceaad191d77748b3311c25b" kindref="member">nrf_pwm_int_enable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="669"><highlight class="normal">{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga502fca6db746ea1fb1d5c45573cc6c1b" kindref="member">nrf_pwm_int_disable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga188dee0693d8704d6d8d77bf2e68831a" kindref="member">nrf_pwm_int_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTEN<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__pwm__hal_1gaec938406e805161ad153e2a95638a74c" kindref="member">nrf_pwm_int_enable_check</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gad002575566c75b323e425cdf59c0a550" kindref="member">nrf_pwm_subscribe_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga7622c00fccfd7653ef3ca5a2f43ca07f" kindref="member">nrf_pwm_subscribe_clear</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="701"><highlight class="normal">}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga41edf2cfc651f859f465ac532cd4616a" kindref="member">nrf_pwm_publish_set</ref>(NRF_PWM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="706"><highlight class="normal">{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga6cd95cd70efae593bd68fa84e93fc433" kindref="member">nrf_pwm_publish_clear</ref>(NRF_PWM_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga592cb178b637ab0b03bea8523e8ded82" kindref="member">nrf_pwm_enable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="719"><highlight class="normal">{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(PWM_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>PWM_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga03d306651afccddaccc092b9da93789a" kindref="member">nrf_pwm_disable</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="724"><highlight class="normal">{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(PWM_ENABLE_ENABLE_Disabled<sp/>&lt;&lt;<sp/>PWM_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga5895bf394e866a56f522c4bbdfb54996" kindref="member">nrf_pwm_enable_check</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="729"><highlight class="normal">{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;ENABLE<sp/>==<sp/>PWM_ENABLE_ENABLE_Enabled;</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga0bcd0f7311e790199cd14373fc823a9f" kindref="member">nrf_pwm_pins_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>out_pins[<ref refid="group__nrf__pwm__hal_1ga9935002ab3ef7325efe73a6979e77990" kindref="member">NRF_PWM_CHANNEL_COUNT</ref>])</highlight></codeline>
<codeline lineno="735"><highlight class="normal">{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>i;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="group__nrf__pwm__hal_1ga9935002ab3ef7325efe73a6979e77990" kindref="member">NRF_PWM_CHANNEL_COUNT</ref>;<sp/>++i)</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg-&gt;PSEL.OUT[i]<sp/>=<sp/>out_pins[i];</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal">}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__pwm__hal_1gaafe7e1c261d441016e999e52ec8282b4" kindref="member">nrf_pwm_pin_get</ref>(NRF_PWM_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint8_t<sp/>channel)</highlight></codeline>
<codeline lineno="744"><highlight class="normal">{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(channel<sp/>&lt;<sp/><ref refid="group__nrf__pwm__hal_1ga9935002ab3ef7325efe73a6979e77990" kindref="member">NRF_PWM_CHANNEL_COUNT</ref>);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PSEL.OUT[channel];</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga58bcf18a7b025c1416d7ea3d6e35038b" kindref="member">nrf_pwm_configure</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga8479da20e14394fb2388b1be3b879670" kindref="member">nrf_pwm_clk_t</ref><sp/><sp/>base_clock,</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga1f29b190ff13c52895d249e07ebe92cb" kindref="member">nrf_pwm_mode_t</ref><sp/>mode,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>top_value)</highlight></codeline>
<codeline lineno="753"><highlight class="normal">{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(top_value<sp/>&lt;=<sp/>PWM_COUNTERTOP_COUNTERTOP_Msk);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PRESCALER<sp/><sp/>=<sp/>base_clock;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>mode;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;COUNTERTOP<sp/>=<sp/>top_value;</highlight></codeline>
<codeline lineno="759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga993b47eb4fc9b6350ced9043945a8206" kindref="member">nrf_pwm_sequence_set</ref>(NRF_PWM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_id,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__pwm__sequence__t" kindref="compound">nrf_pwm_sequence_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_seq)</highlight></codeline>
<codeline lineno="764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(p_seq<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga5b99dfe4536733fdc46059eb5d4d704c" kindref="member">nrf_pwm_seq_ptr_set</ref>(<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,<sp/>seq_id,<sp/>p_seq-&gt;<ref refid="structnrf__pwm__sequence__t_1ad3244198df7ea3a206740dacd398db1e" kindref="member">values</ref>.<ref refid="unionnrf__pwm__values__t_1ad74b132e940f0833c3f51dd1a575bf65" kindref="member">p_raw</ref>);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga794b85dd82faa63d636603e797259798" kindref="member">nrf_pwm_seq_cnt_set</ref>(<sp/><sp/><sp/><sp/><sp/><sp/>p_reg,<sp/>seq_id,<sp/>p_seq-&gt;<ref refid="structnrf__pwm__sequence__t_1a10eb34aa01124d2e6924607cae877fe0" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gad0371b811ef5160dbcab8bdfa03b8448" kindref="member">nrf_pwm_seq_refresh_set</ref>(<sp/><sp/>p_reg,<sp/>seq_id,<sp/>p_seq-&gt;<ref refid="structnrf__pwm__sequence__t_1a4affe1893257c8976f28309cd4cf3d61" kindref="member">repeats</ref>);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga70c82b30f512bfb43092fd793e79fefd" kindref="member">nrf_pwm_seq_end_delay_set</ref>(p_reg,<sp/>seq_id,<sp/>p_seq-&gt;<ref refid="structnrf__pwm__sequence__t_1abeac7fdb41a97569861f03fd52c2f526" kindref="member">end_delay</ref>);</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga5b99dfe4536733fdc46059eb5d4d704c" kindref="member">nrf_pwm_seq_ptr_set</ref>(NRF_PWM_Type<sp/>*<sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_id,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_values)</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(seq_id<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(p_values<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_PWM_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.SEQ[seq_id].PTR<sp/>=<sp/>(uint32_t)p_values;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SEQ[seq_id].PTR<sp/>=<sp/>(uint32_t)p_values;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga794b85dd82faa63d636603e797259798" kindref="member">nrf_pwm_seq_cnt_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_id,</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>length)</highlight></codeline>
<codeline lineno="789"><highlight class="normal">{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(seq_id<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(length<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_PWM_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t)<sp/>&lt;=<sp/>PWM_DMA_SEQ_MAXCNT_MAXCNT_Msk);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.SEQ[seq_id].MAXCNT<sp/>=<sp/>length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint16_t);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(length<sp/>&lt;=<sp/>PWM_SEQ_CNT_CNT_Msk);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SEQ[seq_id].CNT<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal">}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gad0371b811ef5160dbcab8bdfa03b8448" kindref="member">nrf_pwm_seq_refresh_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_id,</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>refresh)</highlight></codeline>
<codeline lineno="804"><highlight class="normal">{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(seq_id<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(refresh<sp/>&lt;=<sp/>PWM_SEQ_REFRESH_CNT_Msk);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SEQ[seq_id].REFRESH<sp/><sp/>=<sp/>refresh;</highlight></codeline>
<codeline lineno="808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga70c82b30f512bfb43092fd793e79fefd" kindref="member">nrf_pwm_seq_end_delay_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_id,</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>end_delay)</highlight></codeline>
<codeline lineno="813"><highlight class="normal">{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(seq_id<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(end_delay<sp/>&lt;=<sp/>PWM_SEQ_ENDDELAY_CNT_Msk);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SEQ[seq_id].ENDDELAY<sp/>=<sp/>end_delay;</highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1ga6a3c94d7139f17dd0f43ef4f16abb5cd" kindref="member">nrf_pwm_decoder_set</ref>(NRF_PWM_Type<sp/>*<sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1ga453888e5feb46774da27499ca1eeafd2" kindref="member">nrf_pwm_dec_load_t</ref><sp/>dec_load,</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__pwm__hal_1gae25a7e03c383934d33cda8a049b7dde4" kindref="member">nrf_pwm_dec_step_t</ref><sp/>dec_step)</highlight></codeline>
<codeline lineno="822"><highlight class="normal">{</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DECODER<sp/>=<sp/>((uint32_t)dec_load<sp/>&lt;&lt;<sp/>PWM_DECODER_LOAD_Pos)<sp/>|</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)dec_step<sp/>&lt;&lt;<sp/>PWM_DECODER_MODE_Pos);</highlight></codeline>
<codeline lineno="825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__pwm__hal_1gaa7c79a9e33546f5dff5ef564052cbe1c" kindref="member">nrf_pwm_loop_set</ref>(NRF_PWM_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>loop_count)</highlight></codeline>
<codeline lineno="829"><highlight class="normal">{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;LOOP<sp/>=<sp/>loop_count;</highlight></codeline>
<codeline lineno="831"><highlight class="normal">}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref><sp/><ref refid="group__nrf__pwm__hal_1gaa0d334d0587cb0f3213e097a67475d5e" kindref="member">nrf_pwm_seqstart_task_get</ref>(uint8_t<sp/>seq_id)</highlight></codeline>
<codeline lineno="834"><highlight class="normal">{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(seq_id<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_PWM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref>)<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_PWM_Type,<sp/>TASKS_DMA.SEQ[seq_id].START);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__pwm__hal_1ga11cb9ca8fbb773011a3ad6658914418e" kindref="member">nrf_pwm_task_t</ref>)<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_PWM_Type,<sp/>TASKS_SEQSTART[seq_id]);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref><sp/><ref refid="group__nrf__pwm__hal_1ga9e0af905e8f4605795455630b66ea833" kindref="member">nrf_pwm_seqend_event_get</ref>(uint8_t<sp/>seq_id)</highlight></codeline>
<codeline lineno="844"><highlight class="normal">{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(seq_id<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_PWM_HAS_DMA_TASKS_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref>)<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_PWM_Type,<sp/>EVENTS_DMA.SEQ[seq_id].END);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__pwm__hal_1ga4a8ceac653433e4ac8ee8682bdef45bf" kindref="member">nrf_pwm_event_t</ref>)<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_PWM_Type,<sp/>EVENTS_SEQEND[seq_id]);</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="855"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_PWM_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_pwm.h"/>
  </compounddef>
</doxygen>
