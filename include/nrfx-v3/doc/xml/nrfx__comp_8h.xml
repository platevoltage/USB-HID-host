<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfx__comp_8h" kind="file" language="C++">
    <compoundname>nrfx_comp.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes refid="nrfy__comp_8h" local="no">haly/nrfy_comp.h</includes>
    <incdepgraph>
      <node id="1">
        <label>drivers/include/nrfx_comp.h</label>
        <link refid="nrfx__comp_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrfx__comp__config__t" prot="public">nrfx_comp_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrfx__comp_1gacdf2ab36ea0b8f8dedf50dcda346e6de" prot="public" static="no">
        <name>NRFX_COMP_VOLTAGE_THRESHOLD_TO_INT</name>
        <param><defname>vol</defname></param>
        <param><defname>ref</defname></param>
        <initializer>    (uint8_t)(((vol) &gt; ((ref) / 64)) ? (<ref refid="group__nrfx__common_1gace8c98e2beb5dae71ccd6da8a5c50f93" kindref="member">NRFX_ROUNDED_DIV</ref>((vol) * 64,(ref)) - 1) : 0)</initializer>
        <briefdescription>
<para>Macro for converting the threshold voltage to an integer value (needed by the COMP_TH register). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">vol</parametername>
</parameternamelist>
<parameterdescription>
<para>Voltage to be changed to COMP_TH register value. This value must not be smaller than reference voltage divided by 64. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ref</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference voltage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="59" column="9" bodyfile="drivers/include/nrfx_comp.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__comp_1ga098f0c155f948ee596e123ec2d31af66" prot="public" static="no">
        <name>NRFX_COMP_CONFIG_TH</name>
        <initializer>{                                                            \
    .th_down = <ref refid="group__nrfx__comp_1gacdf2ab36ea0b8f8dedf50dcda346e6de" kindref="member">NRFX_COMP_VOLTAGE_THRESHOLD_TO_INT</ref>(0.5, 1.8), \
    .th_up   = <ref refid="group__nrfx__comp_1gacdf2ab36ea0b8f8dedf50dcda346e6de" kindref="member">NRFX_COMP_VOLTAGE_THRESHOLD_TO_INT</ref>(1.5, 1.8)  \
}</initializer>
        <briefdescription>
<para>COMP threshold default configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="103" column="9" bodyfile="drivers/include/nrfx_comp.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfx__comp_1gac36fe635c9ce63e229e5221676c58d39" prot="public" static="no">
        <name>NRFX_COMP_DEFAULT_CONFIG</name>
        <param><defname>_input</defname></param>
        <initializer>{                                                                                  \
    .reference          = <ref refid="group__nrf__comp__hal_1gga2cb45b32907064f8b15ae54d91ca7470a683a97562633fe24b117a2ccbc0faa90" kindref="member">NRF_COMP_REF_INT_1V2</ref>,                                    \
    .main_mode          = <ref refid="group__nrf__comp__hal_1gga501c4187cafe59f88ed8e98c7de2bfe6ac957c24d7ddc8c5ed4ff64430d2965db" kindref="member">NRF_COMP_MAIN_MODE_SE</ref>,                                   \
    .threshold          = <ref refid="group__nrfx__comp_1ga098f0c155f948ee596e123ec2d31af66" kindref="member">NRFX_COMP_CONFIG_TH</ref>,                                     \
    .speed_mode         = <ref refid="group__nrf__comp__hal_1ggab73023f0b42ab46c65312f9ea9419e05ab112225d17bad73d2ab7729a8a1d76de" kindref="member">NRF_COMP_SP_MODE_HIGH</ref>,                                   \
    .hyst               = <ref refid="group__nrf__comp__hal_1ggaad279eda81a34c4cc4534f2603ab2717a83a04f019cc200d74e481e644420b6fe" kindref="member">NRF_COMP_HYST_NO_HYST</ref>,                                   \
    <ref refid="group__nrfx__utils_1ga3759226de0d998545425ded334168058" kindref="member">NRFX_COND_CODE_1</ref>(<ref refid="group__nrf__comp__hal_1gae7541cca597fceac27d9155082b16248" kindref="member">NRF_COMP_HAS_ISOURCE</ref>, (.isource = <ref refid="group__nrf__comp__hal_1ggaee0ea1e7c432520ed0ff1fb8ed3e9586ad24db8d5831ad607e770c5a426131710" kindref="member">NRF_COMP_ISOURCE_OFF</ref>,), ()) \
    .input              = (<ref refid="group__nrf__comp__hal_1ga4fb8152c87746c98fa6952a30ef7ad01" kindref="member">nrf_comp_input_t</ref>)_input,                                \
    .interrupt_priority = NRFX_COMP_DEFAULT_CONFIG_IRQ_PRIORITY                    \
}</initializer>
        <briefdescription>
<para>COMP driver default configuration. </para>
        </briefdescription>
        <detaileddescription>
<para>This configuration sets up COMP with the following options:<itemizedlist>
<listitem><para>single-ended mode</para>
</listitem><listitem><para>reference voltage: internal 1.8 V</para>
</listitem><listitem><para>lower threshold: 0.5 V</para>
</listitem><listitem><para>upper threshold: 1.5 V</para>
</listitem><listitem><para>high speed mode</para>
</listitem><listitem><para>hysteresis disabled</para>
</listitem><listitem><para>current source disabled</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">_input</parametername>
</parameternamelist>
<parameterdescription>
<para>Analog input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="123" column="9" bodyfile="drivers/include/nrfx_comp.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrfx__comp_1gabbfffa8459178cf1b70333169b8f1cf8" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_comp_short_mask_t</name>
        <enumvalue id="group__nrfx__comp_1ggabbfffa8459178cf1b70333169b8f1cf8a9c32d5c150a2e8b09b75b3a4de1c4842" prot="public">
          <name>NRFX_COMP_SHORT_STOP_AFTER_CROSS_EVT</name>
          <initializer>= NRF_COMP_SHORT_STOP_CROSS_MASK</initializer>
          <briefdescription>
<para>Shortcut between the CROSS event and the STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__comp_1ggabbfffa8459178cf1b70333169b8f1cf8af7bcfc6dacc824971e5a15598aa91623" prot="public">
          <name>NRFX_COMP_SHORT_STOP_AFTER_UP_EVT</name>
          <initializer>= NRF_COMP_SHORT_STOP_UP_MASK</initializer>
          <briefdescription>
<para>Shortcut between the UP event and the STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__comp_1ggabbfffa8459178cf1b70333169b8f1cf8a6dd0bbdad7b4b139bc304a4d0ec57ecf" prot="public">
          <name>NRFX_COMP_SHORT_STOP_AFTER_DOWN_EVT</name>
          <initializer>= NRF_COMP_SHORT_STOP_DOWN_MASK</initializer>
          <briefdescription>
<para>Shortcut between the DOWN event and the STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>COMP shortcut masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="70" column="1" bodyfile="drivers/include/nrfx_comp.h" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrfx__comp_1ga30e626b6c05002ecb1b8b282c66a09a7" prot="public" static="no" strong="no">
        <type></type>
        <name>nrfx_comp_evt_en_mask_t</name>
        <enumvalue id="group__nrfx__comp_1gga30e626b6c05002ecb1b8b282c66a09a7aa41bcedf7f707f24cdb87ce6d701d8ed" prot="public">
          <name>NRFX_COMP_EVT_EN_CROSS_MASK</name>
          <initializer>= NRF_COMP_INT_CROSS_MASK</initializer>
          <briefdescription>
<para>CROSS event (generated after VIN+ == VIN-). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__comp_1gga30e626b6c05002ecb1b8b282c66a09a7a19ee04176739129fbf548e17adf98360" prot="public">
          <name>NRFX_COMP_EVT_EN_UP_MASK</name>
          <initializer>= NRF_COMP_INT_UP_MASK</initializer>
          <briefdescription>
<para>UP event (generated when VIN+ crosses VIN- while increasing). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__comp_1gga30e626b6c05002ecb1b8b282c66a09a7aa30ad383da08c0a89b450689f65b2c85" prot="public">
          <name>NRFX_COMP_EVT_EN_DOWN_MASK</name>
          <initializer>= NRF_COMP_INT_DOWN_MASK</initializer>
          <briefdescription>
<para>DOWN event (generated when VIN+ crosses VIN- while decreasing). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrfx__comp_1gga30e626b6c05002ecb1b8b282c66a09a7af1d688cfefb912a7fd3160d40341116a" prot="public">
          <name>NRFX_COMP_EVT_EN_READY_MASK</name>
          <initializer>= NRF_COMP_INT_READY_MASK</initializer>
          <briefdescription>
<para>READY event (generated when the module is ready). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>COMP events masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="78" column="1" bodyfile="drivers/include/nrfx_comp.h" bodystart="79" bodyend="84"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrfx__comp_1ga722c3568601fb8c784b743db3cd6d5df" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* nrfx_comp_event_handler_t) (nrf_comp_event_t event)</definition>
        <argsstring>)(nrf_comp_event_t event)</argsstring>
        <name>nrfx_comp_event_handler_t</name>
        <briefdescription>
<para>COMP event handler function type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="67" column="9" bodyfile="drivers/include/nrfx_comp.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrfx__comp_1gaa6f509775eb5e6ba0c034c6ec9faaab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_comp_init</definition>
        <argsstring>(nrfx_comp_config_t const *p_config, nrfx_comp_event_handler_t event_handler)</argsstring>
        <name>nrfx_comp_init</name>
        <param>
          <type><ref refid="structnrfx__comp__config__t" kindref="compound">nrfx_comp_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <param>
          <type><ref refid="group__nrfx__comp_1ga722c3568601fb8c784b743db3cd6d5df" kindref="member">nrfx_comp_event_handler_t</ref></type>
          <declname>event_handler</declname>
        </param>
        <briefdescription>
<para>Function for initializing the COMP driver. </para>
        </briefdescription>
        <detaileddescription>
<para>This function initializes the COMP driver, but does not enable the peripheral or any interrupts. To start the driver, call the function <ref refid="group__nrfx__comp_1ga0cdf4de1646d2edd59b7bafa550d525b" kindref="member">nrfx_comp_start()</ref> after initialization.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with the initial configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>Event handler provided by the user. Must not be NULL.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Initialization was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_ALREADY</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is already initialized. Deprecated - use <ref refid="group__nrfx__error__codes_1gga2449720f8fa17b22243218068459a24badc3fc33e8a7dc8b9a9547fe07b437efd" kindref="member">NRFX_ERROR_ALREADY</ref> instead. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>The LPCOMP peripheral is already in use. This is possible only if <ref refid="group__nrfx__prs" kindref="compound">Peripheral Resource Sharing (PRS)</ref> module is enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="153" column="12" declfile="drivers/include/nrfx_comp.h" declline="153" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__comp_1ga18e841c34f26c4cfee61e26a1879944b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref></type>
        <definition>nrfx_err_t nrfx_comp_reconfigure</definition>
        <argsstring>(nrfx_comp_config_t const *p_config)</argsstring>
        <name>nrfx_comp_reconfigure</name>
        <param>
          <type><ref refid="structnrfx__comp__config__t" kindref="compound">nrfx_comp_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for reconfiguring the COMP driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with the configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NRFX_SUCCESS</parametername>
</parameternamelist>
<parameterdescription>
<para>Reconfiguration was successful. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_BUSY</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is running and cannot be reconfigured. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NRFX_ERROR_INVALID_STATE</parametername>
</parameternamelist>
<parameterdescription>
<para>The driver is uninitialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="165" column="12" declfile="drivers/include/nrfx_comp.h" declline="165" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__comp_1gaa0fd36c985fb6bd3d9e969734f8248f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_comp_uninit</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_comp_uninit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for uninitializing the COMP driver. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uninitializes the COMP driver. The COMP peripheral and its interrupts are disabled, and local variables are cleaned. After this call, you must initialize the driver again by calling <ref refid="group__nrfx__comp_1gaa6f509775eb5e6ba0c034c6ec9faaab9" kindref="member">nrfx_comp_init()</ref> if you want to use it.</para>
<para><simplesect kind="see"><para><ref refid="group__nrfx__comp_1gae778ebd92531a679ca3b1839325da18a" kindref="member">nrfx_comp_stop</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="176" column="6" declfile="drivers/include/nrfx_comp.h" declline="176" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__comp_1ga1ac49649b27e57713cc3a68b9acd3b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool nrfx_comp_init_check</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_comp_init_check</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for checking if the COMP driver is initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is already initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Driver is not initialized. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="184" column="6" declfile="drivers/include/nrfx_comp.h" declline="184" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__comp_1gae8ed581127ee4bb09d047089ff1450e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_comp_pin_select</definition>
        <argsstring>(nrf_comp_input_t psel)</argsstring>
        <name>nrfx_comp_pin_select</name>
        <param>
          <type><ref refid="group__nrf__comp__hal_1ga4fb8152c87746c98fa6952a30ef7ad01" kindref="member">nrf_comp_input_t</ref></type>
          <declname>psel</declname>
        </param>
        <briefdescription>
<para>Function for setting the analog input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">psel</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP analog pin selection. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="191" column="6" declfile="drivers/include/nrfx_comp.h" declline="191" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__comp_1ga0cdf4de1646d2edd59b7bafa550d525b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_comp_start</definition>
        <argsstring>(uint32_t comp_evt_en_mask, uint32_t comp_shorts_mask)</argsstring>
        <name>nrfx_comp_start</name>
        <param>
          <type>uint32_t</type>
          <declname>comp_evt_en_mask</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>comp_shorts_mask</declname>
        </param>
        <briefdescription>
<para>Function for starting the COMP peripheral and interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para>Before calling this function, the driver must be initialized. This function enables the COMP peripheral and its interrupts.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">comp_evt_en_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of events to be enabled. This parameter is to be built as an OR of elements from <ref refid="group__nrfx__comp_1ga30e626b6c05002ecb1b8b282c66a09a7" kindref="member">nrfx_comp_evt_en_mask_t</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">comp_shorts_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts to be enabled. This parameter is to be built as an OR of elements from <ref refid="group__nrfx__comp_1gabbfffa8459178cf1b70333169b8f1cf8" kindref="member">nrfx_comp_short_mask_t</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrfx__comp_1gaa6f509775eb5e6ba0c034c6ec9faaab9" kindref="member">nrfx_comp_init</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="206" column="6" declfile="drivers/include/nrfx_comp.h" declline="206" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__comp_1gae778ebd92531a679ca3b1839325da18a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_comp_stop</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_comp_stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for stopping the COMP peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para>Before calling this function, the driver must be enabled. This function disables the COMP peripheral and its interrupts.</para>
<para><simplesect kind="see"><para><ref refid="group__nrfx__comp_1gaa0fd36c985fb6bd3d9e969734f8248f9" kindref="member">nrfx_comp_uninit</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="216" column="6" declfile="drivers/include/nrfx_comp.h" declline="216" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__comp_1ga262fc4093be0326cdf610d5ca038c2b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nrfx_comp_sample</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_comp_sample</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function for copying the current state of the comparator result to the RESULT register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>The input voltage is below the threshold (VIN+ &lt; VIN-). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>The input voltage is above the threshold (VIN+ &gt; VIN-). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="224" column="10" declfile="drivers/include/nrfx_comp.h" declline="224" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__comp_1ga1307fbe9500f4bacc75c5369957cd18e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE uint32_t</type>
        <definition>NRFX_STATIC_INLINE uint32_t nrfx_comp_task_address_get</definition>
        <argsstring>(nrf_comp_task_t task)</argsstring>
        <name>nrfx_comp_task_address_get</name>
        <param>
          <type><ref refid="group__nrf__comp__hal_1ga0a587fcb0646329cb6d9700f555787f8" kindref="member">nrf_comp_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of a COMP task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the given COMP task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="245" column="29" bodyfile="drivers/include/nrfx_comp.h" bodystart="245" bodyend="248" declfile="drivers/include/nrfx_comp.h" declline="233" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfx__comp_1gaed9c03c22f56e836fc82a56a3fc4f40b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFX_STATIC_INLINE uint32_t</type>
        <definition>NRFX_STATIC_INLINE uint32_t nrfx_comp_event_address_get</definition>
        <argsstring>(nrf_comp_event_t event)</argsstring>
        <name>nrfx_comp_event_address_get</name>
        <param>
          <type><ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of a COMP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>COMP event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the given COMP event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="250" column="29" bodyfile="drivers/include/nrfx_comp.h" bodystart="250" bodyend="253" declfile="drivers/include/nrfx_comp.h" declline="242" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="nrfx__comp_8h_1a422d304cd3bd9a1693bc927097b322c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nrfx_comp_irq_handler</definition>
        <argsstring>(void)</argsstring>
        <name>nrfx_comp_irq_handler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/include/nrfx_comp.h" line="259" column="6" declfile="drivers/include/nrfx_comp.h" declline="259" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_COMP_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_COMP_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;haly/nrfy_comp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfx_comp<sp/>COMP<sp/>driver</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_comp</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Comparator<sp/>(COMP)<sp/>peripheral<sp/>driver.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Macro<sp/>for<sp/>converting<sp/>the<sp/>threshold<sp/>voltage<sp/>to<sp/>an<sp/>integer<sp/>value</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(needed<sp/>by<sp/>the<sp/>COMP_TH<sp/>register).</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>vol<sp/>Voltage<sp/>to<sp/>be<sp/>changed<sp/>to<sp/>COMP_TH<sp/>register<sp/>value.<sp/>This<sp/>value</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>not<sp/>be<sp/>smaller<sp/>than<sp/>reference<sp/>voltage<sp/>divided<sp/>by<sp/>64.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ref<sp/>Reference<sp/>voltage.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_COMP_VOLTAGE_THRESHOLD_TO_INT(vol,<sp/>ref)<sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(uint8_t)(((vol)<sp/>&gt;<sp/>((ref)<sp/>/<sp/>64))<sp/>?<sp/>(NRFX_ROUNDED_DIV((vol)<sp/>*<sp/>64,(ref))<sp/>-<sp/>1)<sp/>:<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>@brief<sp/>COMP<sp/>event<sp/>handler<sp/>function<sp/>type.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>COMP<sp/>event.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<sp/><ref refid="group__nrfx__comp_1ga722c3568601fb8c784b743db3cd6d5df" kindref="member">nrfx_comp_event_handler_t</ref>)(<ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="69"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>shortcut<sp/>masks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__comp_1ggabbfffa8459178cf1b70333169b8f1cf8a9c32d5c150a2e8b09b75b3a4de1c4842" kindref="member">NRFX_COMP_SHORT_STOP_AFTER_CROSS_EVT</ref><sp/>=<sp/><ref refid="group__nrf__comp__hal_1ggac21bbfe9589f7dfa639396957d2f2d79ab244208dd383122017e2f5ce0e593564" kindref="member">NRF_COMP_SHORT_STOP_CROSS_MASK</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>the<sp/>CROSS<sp/>event<sp/>and<sp/>the<sp/>STOP<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__comp_1ggabbfffa8459178cf1b70333169b8f1cf8af7bcfc6dacc824971e5a15598aa91623" kindref="member">NRFX_COMP_SHORT_STOP_AFTER_UP_EVT</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__comp__hal_1ggac21bbfe9589f7dfa639396957d2f2d79a238f7ff2ccecbe44a8f2c5ecd9defe9b" kindref="member">NRF_COMP_SHORT_STOP_UP_MASK</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>the<sp/>UP<sp/>event<sp/>and<sp/>the<sp/>STOP<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__comp_1ggabbfffa8459178cf1b70333169b8f1cf8a6dd0bbdad7b4b139bc304a4d0ec57ecf" kindref="member">NRFX_COMP_SHORT_STOP_AFTER_DOWN_EVT</ref><sp/><sp/>=<sp/><ref refid="group__nrf__comp__hal_1ggac21bbfe9589f7dfa639396957d2f2d79a9a48568b373cedda97dff468bf5e40f8" kindref="member">NRF_COMP_SHORT_STOP_DOWN_MASK</ref><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Shortcut<sp/>between<sp/>the<sp/>DOWN<sp/>event<sp/>and<sp/>the<sp/>STOP<sp/>task.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}<sp/><ref refid="group__nrfx__comp_1gabbfffa8459178cf1b70333169b8f1cf8" kindref="member">nrfx_comp_short_mask_t</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="77"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>events<sp/>masks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__comp_1gga30e626b6c05002ecb1b8b282c66a09a7aa41bcedf7f707f24cdb87ce6d701d8ed" kindref="member">NRFX_COMP_EVT_EN_CROSS_MASK</ref><sp/>=<sp/><ref refid="group__nrf__comp__hal_1ggab671bf5df533600ad4538f8ca2005a43a8bf5389eb68ecca5d1fad116f711eda2" kindref="member">NRF_COMP_INT_CROSS_MASK</ref>,<sp/></highlight><highlight class="comment">///&lt;<sp/>CROSS<sp/>event<sp/>(generated<sp/>after<sp/>VIN+<sp/>==<sp/>VIN-).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__comp_1gga30e626b6c05002ecb1b8b282c66a09a7a19ee04176739129fbf548e17adf98360" kindref="member">NRFX_COMP_EVT_EN_UP_MASK</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__nrf__comp__hal_1ggab671bf5df533600ad4538f8ca2005a43a25b4fc71542b4e626dd99ef643768fb5" kindref="member">NRF_COMP_INT_UP_MASK</ref>,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>UP<sp/>event<sp/>(generated<sp/>when<sp/>VIN+<sp/>crosses<sp/>VIN-<sp/>while<sp/>increasing).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__comp_1gga30e626b6c05002ecb1b8b282c66a09a7aa30ad383da08c0a89b450689f65b2c85" kindref="member">NRFX_COMP_EVT_EN_DOWN_MASK</ref><sp/><sp/>=<sp/><ref refid="group__nrf__comp__hal_1ggab671bf5df533600ad4538f8ca2005a43ad78cf001b11ef4dd67f8f28c9f2dbe0c" kindref="member">NRF_COMP_INT_DOWN_MASK</ref>,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>DOWN<sp/>event<sp/>(generated<sp/>when<sp/>VIN+<sp/>crosses<sp/>VIN-<sp/>while<sp/>decreasing).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__comp_1gga30e626b6c05002ecb1b8b282c66a09a7af1d688cfefb912a7fd3160d40341116a" kindref="member">NRFX_COMP_EVT_EN_READY_MASK</ref><sp/>=<sp/><ref refid="group__nrf__comp__hal_1ggab671bf5df533600ad4538f8ca2005a43a5416dd348fbaa0b85363fc1b5525099d" kindref="member">NRF_COMP_INT_READY_MASK</ref><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>READY<sp/>event<sp/>(generated<sp/>when<sp/>the<sp/>module<sp/>is<sp/>ready).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">}<sp/><ref refid="group__nrfx__comp_1ga30e626b6c05002ecb1b8b282c66a09a7" kindref="member">nrfx_comp_evt_en_mask_t</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="86"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="structnrfx__comp__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ga2cb45b32907064f8b15ae54d91ca7470" kindref="member">nrf_comp_ref_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reference;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Reference<sp/>selection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gaa940ec4e99c2581cdf5000e61d327a8e" kindref="member">nrf_comp_ext_ref_t</ref><sp/><sp/><sp/>ext_ref;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>External<sp/>analog<sp/>reference<sp/>selection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ga501c4187cafe59f88ed8e98c7de2bfe6" kindref="member">nrf_comp_main_mode_t</ref><sp/>main_mode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Main<sp/>operation<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__comp__th__t" kindref="compound">nrf_comp_th_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threshold;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Structure<sp/>holding<sp/>THDOWN<sp/>and<sp/>THUP<sp/>values<sp/>needed<sp/>by<sp/>the<sp/>COMP_TH<sp/>register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gab73023f0b42ab46c65312f9ea9419e05" kindref="member">nrf_comp_sp_mode_t</ref><sp/><sp/><sp/>speed_mode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Speed<sp/>and<sp/>power<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gaad279eda81a34c4cc4534f2603ab2717" kindref="member">nrf_comp_hyst_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>hyst;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Comparator<sp/>hysteresis.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_COMP_HAS_ISOURCE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1gaee0ea1e7c432520ed0ff1fb8ed3e9586" kindref="member">nrf_isource_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isource;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Current<sp/>source<sp/>selected<sp/>on<sp/>analog<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__comp__hal_1ga4fb8152c87746c98fa6952a30ef7ad01" kindref="member">nrf_comp_input_t</ref><sp/><sp/><sp/><sp/><sp/>input;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Input<sp/>to<sp/>be<sp/>monitored.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interrupt_priority;<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>priority.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">}<sp/><ref refid="structnrfx__comp__config__t" kindref="compound">nrfx_comp_config_t</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment">/**<sp/>@brief<sp/>COMP<sp/>threshold<sp/>default<sp/>configuration.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_COMP_CONFIG_TH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.th_down<sp/>=<sp/>NRFX_COMP_VOLTAGE_THRESHOLD_TO_INT(0.5,<sp/>1.8),<sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.th_up<sp/><sp/><sp/>=<sp/>NRFX_COMP_VOLTAGE_THRESHOLD_TO_INT(1.5,<sp/>1.8)<sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="109"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>@brief<sp/>COMP<sp/>driver<sp/>default<sp/>configuration.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/>*<sp/>This<sp/>configuration<sp/>sets<sp/>up<sp/>COMP<sp/>with<sp/>the<sp/>following<sp/>options:</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/>*<sp/>-<sp/>single-ended<sp/>mode</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/>*<sp/>-<sp/>reference<sp/>voltage:<sp/>internal<sp/>1.8<sp/>V</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/>*<sp/>-<sp/>lower<sp/>threshold:<sp/>0.5<sp/>V</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>-<sp/>upper<sp/>threshold:<sp/>1.5<sp/>V</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/>-<sp/>high<sp/>speed<sp/>mode</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>-<sp/>hysteresis<sp/>disabled</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*<sp/>-<sp/>current<sp/>source<sp/>disabled</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>_input<sp/>Analog<sp/>input.</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFX_COMP_DEFAULT_CONFIG(_input)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.reference<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRF_COMP_REF_INT_1V2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.main_mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRF_COMP_MAIN_MODE_SE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.threshold<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRFX_COMP_CONFIG_TH,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.speed_mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRF_COMP_SP_MODE_HIGH,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.hyst<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NRF_COMP_HYST_NO_HYST,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NRFX_COND_CODE_1(NRF_COMP_HAS_ISOURCE,<sp/>(.isource<sp/>=<sp/>NRF_COMP_ISOURCE_OFF,),<sp/>())<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.input<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(nrf_comp_input_t)_input,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>.interrupt_priority<sp/>=<sp/>NRFX_COMP_DEFAULT_CONFIG_IRQ_PRIORITY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>the<sp/>COMP<sp/>driver.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>initializes<sp/>the<sp/>COMP<sp/>driver,<sp/>but<sp/>does<sp/>not<sp/>enable<sp/>the<sp/>peripheral<sp/>or<sp/>any<sp/>interrupts.</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>To<sp/>start<sp/>the<sp/>driver,<sp/>call<sp/>the<sp/>function<sp/>@ref<sp/>nrfx_comp_start()<sp/>after<sp/>initialization.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>the<sp/>initial<sp/>configuration.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event_handler<sp/>Event<sp/>handler<sp/>provided<sp/>by<sp/>the<sp/>user.</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Must<sp/>not<sp/>be<sp/>NULL.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Initialization<sp/>was<sp/>successful.</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_ALREADY<sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_STATE<sp/>The<sp/>driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Deprecated<sp/>-<sp/>use<sp/>@ref<sp/>NRFX_ERROR_ALREADY<sp/>instead.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>LPCOMP<sp/>peripheral<sp/>is<sp/>already<sp/>in<sp/>use.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>possible<sp/>only<sp/>if<sp/>@ref<sp/>nrfx_prs<sp/>module</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__comp_1gaa6f509775eb5e6ba0c034c6ec9faaab9" kindref="member">nrfx_comp_init</ref>(<ref refid="structnrfx__comp__config__t" kindref="compound">nrfx_comp_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config,</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__comp_1ga722c3568601fb8c784b743db3cd6d5df" kindref="member">nrfx_comp_event_handler_t</ref><sp/><sp/>event_handler);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reconfiguring<sp/>the<sp/>COMP<sp/>driver.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>with<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_SUCCESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reconfiguration<sp/>was<sp/>successful.</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>driver<sp/>is<sp/>running<sp/>and<sp/>cannot<sp/>be<sp/>reconfigured.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>@retval<sp/>NRFX_ERROR_INVALID_STATE<sp/>The<sp/>driver<sp/>is<sp/>uninitialized.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><ref refid="group__nrfx__error__codes_1ga2449720f8fa17b22243218068459a24b" kindref="member">nrfx_err_t</ref><sp/><ref refid="group__nrfx__comp_1ga18e841c34f26c4cfee61e26a1879944b" kindref="member">nrfx_comp_reconfigure</ref>(<ref refid="structnrfx__comp__config__t" kindref="compound">nrfx_comp_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>uninitializing<sp/>the<sp/>COMP<sp/>driver.</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>uninitializes<sp/>the<sp/>COMP<sp/>driver.<sp/>The<sp/>COMP<sp/>peripheral<sp/>and</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>its<sp/>interrupts<sp/>are<sp/>disabled,<sp/>and<sp/>local<sp/>variables<sp/>are<sp/>cleaned.<sp/>After<sp/>this<sp/>call,<sp/>you<sp/>must</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>initialize<sp/>the<sp/>driver<sp/>again<sp/>by<sp/>calling<sp/>nrfx_comp_init()<sp/>if<sp/>you<sp/>want<sp/>to<sp/>use<sp/>it.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_comp_stop</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__comp_1gaa0fd36c985fb6bd3d9e969734f8248f9" kindref="member">nrfx_comp_uninit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="178"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>COMP<sp/>driver<sp/>is<sp/>initialized.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Driver<sp/>is<sp/>already<sp/>initialized.</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Driver<sp/>is<sp/>not<sp/>initialized.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__comp_1ga1ac49649b27e57713cc3a68b9acd3b64" kindref="member">nrfx_comp_init_check</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="186"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>analog<sp/>input.</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>psel<sp/>COMP<sp/>analog<sp/>pin<sp/>selection.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__comp_1gae8ed581127ee4bb09d047089ff1450e7" kindref="member">nrfx_comp_pin_select</ref>(<ref refid="group__nrf__comp__hal_1ga4fb8152c87746c98fa6952a30ef7ad01" kindref="member">nrf_comp_input_t</ref><sp/>psel);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="193"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>starting<sp/>the<sp/>COMP<sp/>peripheral<sp/>and<sp/>interrupts.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>Before<sp/>calling<sp/>this<sp/>function,<sp/>the<sp/>driver<sp/>must<sp/>be<sp/>initialized.<sp/>This<sp/>function</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>enables<sp/>the<sp/>COMP<sp/>peripheral<sp/>and<sp/>its<sp/>interrupts.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>comp_evt_en_mask<sp/>Mask<sp/>of<sp/>events<sp/>to<sp/>be<sp/>enabled.<sp/>This<sp/>parameter<sp/>is<sp/>to<sp/>be<sp/>built<sp/>as</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>OR<sp/>of<sp/>elements<sp/>from<sp/>@ref<sp/>nrfx_comp_evt_en_mask_t.</highlight></codeline>
<codeline lineno="201"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>comp_shorts_mask<sp/>Mask<sp/>of<sp/>shortcuts<sp/>to<sp/>be<sp/>enabled.<sp/>This<sp/>parameter<sp/>is<sp/>to<sp/>be<sp/>built<sp/>as</highlight></codeline>
<codeline lineno="202"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>an<sp/>OR<sp/>of<sp/>elements<sp/>from<sp/>@ref<sp/>nrfx_comp_short_mask_t.</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_comp_init</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__comp_1ga0cdf4de1646d2edd59b7bafa550d525b" kindref="member">nrfx_comp_start</ref>(uint32_t<sp/>comp_evt_en_mask,<sp/>uint32_t<sp/>comp_shorts_mask);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="208"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>stopping<sp/>the<sp/>COMP<sp/>peripheral.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>Before<sp/>calling<sp/>this<sp/>function,<sp/>the<sp/>driver<sp/>must<sp/>be<sp/>enabled.<sp/>This<sp/>function<sp/>disables<sp/>the<sp/>COMP</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>peripheral<sp/>and<sp/>its<sp/>interrupts.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>@sa<sp/>nrfx_comp_uninit</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfx__comp_1gae778ebd92531a679ca3b1839325da18a" kindref="member">nrfx_comp_stop</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="218"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>copying<sp/>the<sp/>current<sp/>state<sp/>of<sp/>the<sp/>comparator<sp/>result<sp/>to<sp/>the<sp/>RESULT<sp/>register.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@retval<sp/>0<sp/>The<sp/>input<sp/>voltage<sp/>is<sp/>below<sp/>the<sp/>threshold<sp/>(VIN+<sp/>&lt;<sp/>VIN-).</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*<sp/>@retval<sp/>1<sp/>The<sp/>input<sp/>voltage<sp/>is<sp/>above<sp/>the<sp/>threshold<sp/>(VIN+<sp/>&gt;<sp/>VIN-).</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">uint32_t<sp/><ref refid="group__nrfx__comp_1ga262fc4093be0326cdf610d5ca038c2b7" kindref="member">nrfx_comp_sample</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="226"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>a<sp/>COMP<sp/>task.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/>COMP<sp/>task.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>given<sp/>COMP<sp/>task.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal">NRFX_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfx__comp_1ga1307fbe9500f4bacc75c5369957cd18e" kindref="member">nrfx_comp_task_address_get</ref>(<ref refid="group__nrf__comp__hal_1ga0a587fcb0646329cb6d9700f555787f8" kindref="member">nrf_comp_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>a<sp/>COMP<sp/>event.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>COMP<sp/>event.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>given<sp/>COMP<sp/>event.</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">NRFX_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfx__comp_1gaed9c03c22f56e836fc82a56a3fc4f40b" kindref="member">nrfx_comp_event_address_get</ref>(<ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFX_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">NRFX_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfx__comp_1ga1307fbe9500f4bacc75c5369957cd18e" kindref="member">nrfx_comp_task_address_get</ref>(<ref refid="group__nrf__comp__hal_1ga0a587fcb0646329cb6d9700f555787f8" kindref="member">nrf_comp_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__comp_1gaeea2df655feee691324495f952960cec" kindref="member">nrfy_comp_task_address_get</ref>(NRF_COMP,<sp/>task);</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal">NRFX_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfx__comp_1gaed9c03c22f56e836fc82a56a3fc4f40b" kindref="member">nrfx_comp_event_address_get</ref>(<ref refid="group__nrf__comp__hal_1ga17ffea3865f2db28127bae9411bce036" kindref="member">nrf_comp_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__comp_1ga5f05676dc3bd9f455d59d6b0685ff930" kindref="member">nrfy_comp_event_address_get</ref>(NRF_COMP,<sp/>event);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="256"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>nrfx_comp_irq_handler(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFX_COMP_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="drivers/include/nrfx_comp.h"/>
  </compounddef>
</doxygen>
