<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__cache_8h" kind="file" language="C++">
    <compoundname>nrf_cache.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_cache.h</label>
        <link refid="nrf__cache_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__cache__hal_1ga32ac18f436cb69269be29078ca6ca81b" prot="public" static="no">
        <name>NRF_CACHE_HAS_CACHEDATA</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the CACHEDATA feature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="53" column="9" bodyfile="hal/nrf_cache.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gaec83162a6d4722ed7ce6e81ab4258060" prot="public" static="no">
        <name>NRF_CACHE_HAS_CACHEDATA_DU</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the CACHE data units feature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="60" column="9" bodyfile="hal/nrf_cache.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gad02dbd3d08bd18d77529b89992dbc918" prot="public" static="no">
        <name>NRF_CACHE_HAS_CACHEINFO</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the CACHEINFO feature. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="68" column="9" bodyfile="hal/nrf_cache.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga0ccad93be73a274f268a6e22bb3f5c8a" prot="public" static="no">
        <name>NRF_CACHE_HAS_TASKS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether cache tasks are supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="75" column="9" bodyfile="hal/nrf_cache.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gadddcee2ef281a0b684aafabc484caaa5" prot="public" static="no">
        <name>NRF_CACHE_HAS_TASK_CLEAN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the CLEAN cache/line tasks are supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="82" column="9" bodyfile="hal/nrf_cache.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gae219d8ccd77dcc3a5536d91e204d160d" prot="public" static="no">
        <name>NRF_CACHE_HAS_TASK_FLUSH</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the FLUSH cache/line tasks are supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="89" column="9" bodyfile="hal/nrf_cache.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga647b07ab7cad0cfe3d9ef022f7c03102" prot="public" static="no">
        <name>NRF_CACHE_HAS_TASK_SAVE_RESTORE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether save and restore tasks are supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="96" column="9" bodyfile="hal/nrf_cache.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gae91fc8215b8a8d5f550d3990d04157c7" prot="public" static="no">
        <name>NRF_CACHE_HAS_STATUS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether status check is supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="103" column="9" bodyfile="hal/nrf_cache.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga68d568a37bd28713c6856caa2a4d8cf4" prot="public" static="no">
        <name>NRF_CACHE_HAS_RAM_MODE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether splitting the dedicated RAM between cache and generic memory is supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="110" column="9" bodyfile="hal/nrf_cache.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga725c921400abd2c84a86d9fc5c48df79" prot="public" static="no">
        <name>NRF_CACHE_HAS_RAMSIZE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether configuration of split of dedicated RAM between cache and generic memory is supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="117" column="9" bodyfile="hal/nrf_cache.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga860a47018b86190aaa175203860340e0" prot="public" static="no">
        <name>NRF_CACHE_HAS_CACHEINFO_DU_DIRTY</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether dirtiness check functionality for cache is supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="124" column="9" bodyfile="hal/nrf_cache.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gab20b72f49bea8a7fcb1c9794184187b4" prot="public" static="no">
        <name>NRF_CACHE_HAS_CACHEINFO_DU_VALIDATION</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether data unit validation functionality for cache is supported. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="131" column="9" bodyfile="hal/nrf_cache.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga3fa376ece57b8058ded3edcc1e9823b7" prot="public" static="no">
        <name>NRF_CACHE_HAS_CACHEINFO_SET_WAY_INFO</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether cache info has INFO register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="138" column="9" bodyfile="hal/nrf_cache.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gaba704e23dc434ea4178bf71d750e7595" prot="public" static="no">
        <name>NRF_CACHEDATA_DATA_WORDS_IN_UNIT_MAX</name>
        <initializer>CACHEDATA_SET_WAY_DU_DATA_MaxCount</initializer>
        <briefdescription>
<para>Max number of words in CACHEDATA data units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="145" column="9" bodyfile="hal/nrf_cache.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga3a5879d2e51d1bcaf2b79f8297f4b076" prot="public" static="no">
        <name>NRF_CACHEDATA_DATA_UNITS_MAX</name>
        <initializer>CACHEDATA_SET_WAY_DU_MaxCount</initializer>
        <briefdescription>
<para>Max number of CACHEDATA data units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="147" column="9" bodyfile="hal/nrf_cache.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gaec18b55decdc118a55febe0f73882e7f" prot="public" static="no">
        <name>NRF_CACHEDATA_WORD_INDEX_MAX</name>
        <initializer>        (<ref refid="group__nrf__cache__hal_1gaba704e23dc434ea4178bf71d750e7595" kindref="member">NRF_CACHEDATA_DATA_WORDS_IN_UNIT_MAX</ref> * <ref refid="group__nrf__cache__hal_1ga3a5879d2e51d1bcaf2b79f8297f4b076" kindref="member">NRF_CACHEDATA_DATA_UNITS_MAX</ref>)</initializer>
        <briefdescription>
<para>Max number of CACHEDATA words. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="149" column="9" bodyfile="hal/nrf_cache.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gadf10cbe14426a052c970304d92dccba4" prot="public" static="no">
        <name>NRF_CACHEDATA_WAY_INDEX_MAX</name>
        <initializer>CACHEDATA_SET_WAY_MaxCount</initializer>
        <briefdescription>
<para>Max number of CACHEDATA ways. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="152" column="9" bodyfile="hal/nrf_cache.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1gac2a874e223201447fbbfd7cce6dbd2a7" prot="public" static="no">
        <name>NRF_CACHEDATA_SET_INDEX_MAX</name>
        <initializer>CACHEDATA_SET_MaxCount</initializer>
        <briefdescription>
<para>Max number of CACHEDATA sets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="154" column="9" bodyfile="hal/nrf_cache.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga47e3b11d456e175bc52f32ac36a29d88" prot="public" static="no">
        <name>NRF_CACHEINFO_DATA_WORDS_IN_UNIT_MAX</name>
        <initializer>CACHEDATA_SET_WAY_DU_DATA_MaxCount</initializer>
        <briefdescription>
<para>Max number of words in CACHEINFO data units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="159" column="9" bodyfile="hal/nrf_cache.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga0ee2b7edda1cd22aa38f929eced44c21" prot="public" static="no">
        <name>NRF_CACHEINFO_DATA_UNITS_MAX</name>
        <initializer>CACHEDATA_SET_WAY_DU_MaxCount</initializer>
        <briefdescription>
<para>Max number of CACHEINFO data units. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="161" column="9" bodyfile="hal/nrf_cache.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga279f580f4bf64462858fb253f6a20a81" prot="public" static="no">
        <name>NRF_CACHEINFO_WORD_INDEX_MAX</name>
        <initializer>        (<ref refid="group__nrf__cache__hal_1ga47e3b11d456e175bc52f32ac36a29d88" kindref="member">NRF_CACHEINFO_DATA_WORDS_IN_UNIT_MAX</ref> * <ref refid="group__nrf__cache__hal_1ga0ee2b7edda1cd22aa38f929eced44c21" kindref="member">NRF_CACHEINFO_DATA_UNITS_MAX</ref>)</initializer>
        <briefdescription>
<para>Max number of CACHEINFO words. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="163" column="9" bodyfile="hal/nrf_cache.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga8adc07f29cc163b28878e389836dcd8a" prot="public" static="no">
        <name>NRF_CACHEINFO_WAY_INDEX_MAX</name>
        <initializer>CACHEINFO_SET_WAY_MaxCount</initializer>
        <briefdescription>
<para>Max number of CACHEINFO ways. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="166" column="9" bodyfile="hal/nrf_cache.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga5c9059963ea7e4e4bb0b074d06367a41" prot="public" static="no">
        <name>NRF_CACHEINFO_SET_INDEX_MAX</name>
        <initializer>CACHEINFO_SET_MaxCount</initializer>
        <briefdescription>
<para>Max number of CACHEINFO sets. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="168" column="9" bodyfile="hal/nrf_cache.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__cache__hal_1ga414bb481a7ba4e07d48828d47a02adc1" prot="public" static="no">
        <name>NRF_CACHE_MODE_RAMSIZE_MAX</name>
        <initializer>CACHE_MODE_RAMSIZE_Max</initializer>
        <briefdescription>
<para>Max enumerator value of RAMSIZE field. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="173" column="9" bodyfile="hal/nrf_cache.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__cache__hal_1ga49ede922bdb9d9b6243a72e9a0049ecd" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_cache_task_t</name>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda0b5faa49a8f6374e0a0d57f999052077" prot="public">
          <name>NRF_CACHE_TASK_CLEANCACHE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_CLEANCACHE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clean the whole cache. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecdae63f5a05627646aa436b210a7d773767" prot="public">
          <name>NRF_CACHE_TASK_CLEANLINE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_CLEANLINE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clean the cache line. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecdac3bf75e1d727aa69ad9b74ea768838f0" prot="public">
          <name>NRF_CACHE_TASK_FLUSHCACHE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_FLUSHCACHE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Flush the whole cache. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda6ce7882a167236d57916c1d86034f5d0" prot="public">
          <name>NRF_CACHE_TASK_FLUSHLINE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_FLUSHLINE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Flush the cache line. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda1942612fbbae087dbf498bb4b6a389ee" prot="public">
          <name>NRF_CACHE_TASK_SAVE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_SAVE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Save the state to a retained memory space. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecdaffde15302587b738fa0043439a48d222" prot="public">
          <name>NRF_CACHE_TASK_RESTORE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_RESTORE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Restore the state from a retained memory space. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda10f8c0acee707f39a8fa647b0b4fe990" prot="public">
          <name>NRF_CACHE_TASK_INVALIDATECACHE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_INVALIDATECACHE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Invalidate the whole cache. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda52b46d3dd9c9155fc291acc745b177a6" prot="public">
          <name>NRF_CACHE_TASK_INVALIDATELINE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_INVALIDATELINE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Invalidate the cache line. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecdaa9f90eb4bba52bdbf22f089bb4b9cb52" prot="public">
          <name>NRF_CACHE_TASK_ERASE</name>
          <initializer>= offsetof(NRF_CACHE_Type, TASKS_ERASE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Erase the whole cache. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CACHE tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="178" column="1" bodyfile="hal/nrf_cache.h" bodystart="179" bodyend="195"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_cache_region_t</name>
        <enumvalue id="group__nrf__cache__hal_1ggaeae9f7c57f88049da165f58737bb95e9a0a431ff82f85fe3fc3e0cd97e2eb8224" prot="public">
          <name>NRF_CACHE_REGION_FLASH</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Cache region related to Flash access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1ggaeae9f7c57f88049da165f58737bb95e9a6d77361b76ca766d78f9718c1311933f" prot="public">
          <name>NRF_CACHE_REGION_XIP</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Cache region related to XIP access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Cache regions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="199" column="1" bodyfile="hal/nrf_cache.h" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__cache__hal_1ga991edeffce0e89bffec886613b9fef42" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_cache_ramsize_t</name>
        <enumvalue id="group__nrf__cache__hal_1gga991edeffce0e89bffec886613b9fef42a2b6d3cc414bf77aaceddd4360b42341f" prot="public">
          <name>NRF_CACHE_RAMSIZE_ALL</name>
          <initializer>= CACHE_MODE_RAMSIZE_All</initializer>
          <briefdescription>
<para>All RAM is used for cache memory. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga991edeffce0e89bffec886613b9fef42a426da0766c12dfb3a29361dbe3f4fb6e" prot="public">
          <name>NRF_CACHE_RAMSIZE_HALF</name>
          <initializer>= CACHE_MODE_RAMSIZE_Half</initializer>
          <briefdescription>
<para>Half of the RAM is used for cache memory. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga991edeffce0e89bffec886613b9fef42a1336a9bc44b84dc6f05635024a7def58" prot="public">
          <name>NRF_CACHE_RAMSIZE_QUARTER</name>
          <initializer>= CACHE_MODE_RAMSIZE_Quarter</initializer>
          <briefdescription>
<para>Quarter of the RAM is used for cache memory. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__cache__hal_1gga991edeffce0e89bffec886613b9fef42a2446ca738264545926ecf98d2ca7d3ae" prot="public">
          <name>NRF_CACHE_RAMSIZE_NONE</name>
          <initializer>= CACHE_MODE_RAMSIZE_None</initializer>
          <briefdescription>
<para>None of the RAM is used for cache memory. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Dedicated RAM size used for cache memory. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="207" column="1" bodyfile="hal/nrf_cache.h" bodystart="208" bodyend="213"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__cache__hal_1ga756fd84f98cf771e67b886da7e5a4996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_enable</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_enable</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the CACHE peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="568" column="24" bodyfile="hal/nrf_cache.h" bodystart="568" bodyend="571" declfile="hal/nrf_cache.h" declline="221" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga9f96b98968845dd74610731ea62c04d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_disable</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_disable</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the CACHE peripheral. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="573" column="24" bodyfile="hal/nrf_cache.h" bodystart="573" bodyend="576" declfile="hal/nrf_cache.h" declline="228" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga7d2944d15b8c601cdbb497db9b6878b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_enable_check</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg)</argsstring>
        <name>nrf_cache_enable_check</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the CACHE peripheral is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The CACHE is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The CACHE is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="578" column="24" bodyfile="hal/nrf_cache.h" bodystart="578" bodyend="581" declfile="hal/nrf_cache.h" declline="238" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaefdb58b01a18348964ff64105e4e795b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_invalidate</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_invalidate</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for invalidating the cache content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="583" column="24" bodyfile="hal/nrf_cache.h" bodystart="583" bodyend="590" declfile="hal/nrf_cache.h" declline="245" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga6d9ba61a07efda4785f4d13ca2216575" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_erase</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_erase</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for erasing the cache content. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="592" column="24" bodyfile="hal/nrf_cache.h" bodystart="592" bodyend="599" declfile="hal/nrf_cache.h" declline="252" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaa3869bbc7a6c3585925c2d212a3810bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_erase_status_check</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg)</argsstring>
        <name>nrf_cache_erase_status_check</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking the status of <ref refid="group__nrf__cache__hal_1ga6d9ba61a07efda4785f4d13ca2216575" kindref="member">nrf_cache_erase()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Erase is finished. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Erase is not complete or has not started. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="601" column="24" bodyfile="hal/nrf_cache.h" bodystart="601" bodyend="609" declfile="hal/nrf_cache.h" declline="262" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaad1baeca8bd8d414090974a07b15e46d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_erase_status_clear</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_erase_status_clear</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for clearing the status of the cache erase. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="611" column="24" bodyfile="hal/nrf_cache.h" bodystart="611" bodyend="619" declfile="hal/nrf_cache.h" declline="269" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga5a35696d8b62a4bbadbf198f37031805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_profiling_set</definition>
        <argsstring>(NRF_CACHE_Type *p_reg, bool enable)</argsstring>
        <name>nrf_cache_profiling_set</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the cache profiling. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if cache profiling is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="621" column="24" bodyfile="hal/nrf_cache.h" bodystart="621" bodyend="630" declfile="hal/nrf_cache.h" declline="277" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gac5e7cb47f50fea87249214c524b51119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_profiling_counters_clear</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_profiling_counters_clear</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for clearing the cache profiling counters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="632" column="24" bodyfile="hal/nrf_cache.h" bodystart="632" bodyend="639" declfile="hal/nrf_cache.h" declline="284" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaac6153662b901d2183c452f9ef04b076" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_instruction_hit_counter_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg, nrf_cache_region_t region)</argsstring>
        <name>nrf_cache_instruction_hit_counter_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref></type>
          <declname>region</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of cache hits for instruction fetch from the specified cache region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Separate counters are used for flash region and XIP region. </para>
</simplesect>
<simplesect kind="note"><para>Cache profiling must be enabled first. See <ref refid="group__nrf__cache__hal_1ga5a35696d8b62a4bbadbf198f37031805" kindref="member">nrf_cache_profiling_set</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache region.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of instruction fetch cache hits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="641" column="28" bodyfile="hal/nrf_cache.h" bodystart="641" bodyend="650" declfile="hal/nrf_cache.h" declline="298" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaf20b23ae75f3d11a08d628e5b7ecd180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_instruction_miss_counter_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg, nrf_cache_region_t region)</argsstring>
        <name>nrf_cache_instruction_miss_counter_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref></type>
          <declname>region</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of cache misses for instruction fetch from the specified cache region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Separate counters are used for flash region and XIP region. </para>
</simplesect>
<simplesect kind="note"><para>Cache profiling must be enabled first. See <ref refid="group__nrf__cache__hal_1ga5a35696d8b62a4bbadbf198f37031805" kindref="member">nrf_cache_profiling_set</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache region.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of instruction fetch cache misses. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="652" column="28" bodyfile="hal/nrf_cache.h" bodystart="652" bodyend="661" declfile="hal/nrf_cache.h" declline="313" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga26fedd2a0b6f762125b5e11451e30f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_data_hit_counter_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg, nrf_cache_region_t region)</argsstring>
        <name>nrf_cache_data_hit_counter_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref></type>
          <declname>region</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of cache hits for data fetch from the specified cache region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Separate counters are used for flash region and XIP region. </para>
</simplesect>
<simplesect kind="note"><para>Cache profiling must be enabled first. See <ref refid="group__nrf__cache__hal_1ga5a35696d8b62a4bbadbf198f37031805" kindref="member">nrf_cache_profiling_set</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache region.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of data fetch cache hits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="663" column="28" bodyfile="hal/nrf_cache.h" bodystart="663" bodyend="672" declfile="hal/nrf_cache.h" declline="328" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaa972907d2ce82a410ea13b8da0b583eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_data_miss_counter_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg, nrf_cache_region_t region)</argsstring>
        <name>nrf_cache_data_miss_counter_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref></type>
          <declname>region</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of cache misses for data fetch from the specified cache region. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Separate counters are used for flash region and XIP region. </para>
</simplesect>
<simplesect kind="note"><para>Cache profiling must be enabled first. See <ref refid="group__nrf__cache__hal_1ga5a35696d8b62a4bbadbf198f37031805" kindref="member">nrf_cache_profiling_set</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">region</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache region.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of data fetch cache misses. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="674" column="28" bodyfile="hal/nrf_cache.h" bodystart="674" bodyend="683" declfile="hal/nrf_cache.h" declline="343" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gab95b2acd2a16a1b1a4d4712fbbc2bd4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_ram_mode_set</definition>
        <argsstring>(NRF_CACHE_Type *p_reg, bool enable)</argsstring>
        <name>nrf_cache_ram_mode_set</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for setting the cache RAM mode. </para>
        </briefdescription>
        <detaileddescription>
<para>When configured in the RAM mode, the accesses to internal or external flash will not be cached. In this mode, the cache data contents can be used as the read/write RAM. Only the data content of the cache is available as RAM.</para>
<para><simplesect kind="note"><para>Enabling the RAM mode causes the RAM to be cleared. </para>
</simplesect>
<simplesect kind="note"><para>Disabling the RAM mode causes the cache to be invalidated.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the cache RAM mode is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="686" column="24" bodyfile="hal/nrf_cache.h" bodystart="686" bodyend="691" declfile="hal/nrf_cache.h" declline="360" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga59bfba4829667844633caf62c22f073e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_ram_mode_check</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg)</argsstring>
        <name>nrf_cache_ram_mode_check</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the cache is in RAM mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the cache RAM mode is enabled, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="693" column="24" bodyfile="hal/nrf_cache.h" bodystart="693" bodyend="696" declfile="hal/nrf_cache.h" declline="369" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga6f05b1ef7689b8d3316dc40e93f71461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_ramsize_set</definition>
        <argsstring>(NRF_CACHE_Type *p_reg, nrf_cache_ramsize_t ramsize)</argsstring>
        <name>nrf_cache_ramsize_set</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1ga991edeffce0e89bffec886613b9fef42" kindref="member">nrf_cache_ramsize_t</ref></type>
          <declname>ramsize</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of splitting the dedicated cache RAM. </para>
        </briefdescription>
        <detaileddescription>
<para>Dedicated cache RAM can be splitted into cache memory and generic memory. By default, all dedicated RAM is used for cache memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ramsize</parametername>
</parameternamelist>
<parameterdescription>
<para>Dedicated cache RAM split configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="700" column="24" bodyfile="hal/nrf_cache.h" bodystart="700" bodyend="703" declfile="hal/nrf_cache.h" declline="382" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gae5fc746c9dd94b53f2a14846780960db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__cache__hal_1ga991edeffce0e89bffec886613b9fef42" kindref="member">nrf_cache_ramsize_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_cache_ramsize_t nrf_cache_ramsize_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg)</argsstring>
        <name>nrf_cache_ramsize_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the configuration of splitting the dedicated cache RAM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Configuration of dedicated cache RAM split. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="705" column="39" bodyfile="hal/nrf_cache.h" bodystart="705" bodyend="708" declfile="hal/nrf_cache.h" declline="391" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga9bc9f2a59ccd951d1e2d4f087e52c43b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_read_lock_enable</definition>
        <argsstring>(NRF_CACHE_Type *p_reg)</argsstring>
        <name>nrf_cache_read_lock_enable</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for blocking the cache content access. </para>
        </briefdescription>
        <detaileddescription>
<para>To unlock the cache content access, a reset has to be performed.</para>
<para><simplesect kind="note"><para>Blocking is ignored in the RAM mode.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="711" column="24" bodyfile="hal/nrf_cache.h" bodystart="711" bodyend="714" declfile="hal/nrf_cache.h" declline="403" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga05756fe9cd2bb93b1a022dade02ede60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_update_lock_set</definition>
        <argsstring>(NRF_CACHE_Type *p_reg, bool enable)</argsstring>
        <name>nrf_cache_update_lock_set</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for blocking the cache content updates. </para>
        </briefdescription>
        <detaileddescription>
<para>Blocking of updates prevents updating of cache content on cache misses, but the peripheral will continue to check for instruction/data fetches in the content already present in the cache.</para>
<para><simplesect kind="note"><para>Blocking is ignored in the RAM mode.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if cache content update lock is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="716" column="24" bodyfile="hal/nrf_cache.h" bodystart="716" bodyend="720" declfile="hal/nrf_cache.h" declline="417" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga7a93f10d29db8e1aa8ebea5e08a944dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_data_get</definition>
        <argsstring>(NRF_CACHEDATA_Type const *p_reg, uint32_t set, uint8_t way, uint8_t word)</argsstring>
        <name>nrf_cache_data_get</name>
        <param>
          <type>NRF_CACHEDATA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>way</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>Function for getting the cache data word. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>When operating in the RAM mode, the cache data is accessible as a general purpose RAM.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set</parametername>
</parameternamelist>
<parameterdescription>
<para>Set that contains the data to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">way</parametername>
</parameternamelist>
<parameterdescription>
<para>Way that contains the data to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">word</parametername>
</parameternamelist>
<parameterdescription>
<para>Data word index to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>32-bit data word. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="723" column="28" bodyfile="hal/nrf_cache.h" bodystart="723" bodyend="750" declfile="hal/nrf_cache.h" declline="432" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gacc7d4f3ec88bc499f72c78a5d4f7d217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_tag_get</definition>
        <argsstring>(NRF_CACHEINFO_Type const *p_reg, uint32_t set, uint8_t way)</argsstring>
        <name>nrf_cache_tag_get</name>
        <param>
          <type>NRF_CACHEINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>way</declname>
        </param>
        <briefdescription>
<para>Function for getting the tag associated with the specified set and way. </para>
        </briefdescription>
        <detaileddescription>
<para>The tag is used to check if an entry in the cache matches the address that is being fetched.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set</parametername>
</parameternamelist>
<parameterdescription>
<para>Set that contains the tag to get. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">way</parametername>
</parameternamelist>
<parameterdescription>
<para>Way that contains the tag to get.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Tag value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="754" column="28" bodyfile="hal/nrf_cache.h" bodystart="754" bodyend="765" declfile="hal/nrf_cache.h" declline="450" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaaa54ee451b51ddc9a2fda2702f74db2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_line_validity_check</definition>
        <argsstring>(NRF_CACHEINFO_Type const *p_reg, uint32_t set, uint8_t way)</argsstring>
        <name>nrf_cache_line_validity_check</name>
        <param>
          <type>NRF_CACHEINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>way</declname>
        </param>
        <briefdescription>
<para>Function for checking the validity of a cache line associated with the specified set and way. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set</parametername>
</parameternamelist>
<parameterdescription>
<para>Set that contains the cache line to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">way</parametername>
</parameternamelist>
<parameterdescription>
<para>Way that contains the cache line to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache line is valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache line is invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="767" column="24" bodyfile="hal/nrf_cache.h" bodystart="767" bodyend="780" declfile="hal/nrf_cache.h" declline="464" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gabd81e14a0131c0d6cf6cebe0c681339b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_cache_mru_get</definition>
        <argsstring>(NRF_CACHEINFO_Type const *p_reg, uint32_t set)</argsstring>
        <name>nrf_cache_mru_get</name>
        <param>
          <type>NRF_CACHEINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set</declname>
        </param>
        <briefdescription>
<para>Function for getting the most recently used way in the specified set. </para>
        </briefdescription>
        <detaileddescription>
<para>The most recently used way is updated on each fetch from the cache and is used for the cache replacement policy.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified set.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The most recently used way in the specified set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="782" column="27" bodyfile="hal/nrf_cache.h" bodystart="782" bodyend="791" declfile="hal/nrf_cache.h" declline="478" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaa27dd3609dcb6f9b4c9a5a6edcefa4c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_data_unit_validity_check</definition>
        <argsstring>(NRF_CACHEINFO_Type const *p_reg, uint32_t set, uint8_t way, uint8_t word)</argsstring>
        <name>nrf_cache_data_unit_validity_check</name>
        <param>
          <type>NRF_CACHEINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>way</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>Function for checking the validity of a data unit associated with the specified set, way and word. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set</parametername>
</parameternamelist>
<parameterdescription>
<para>Set that contains the data unit to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">way</parametername>
</parameternamelist>
<parameterdescription>
<para>Way that contains the data unit to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">word</parametername>
</parameternamelist>
<parameterdescription>
<para>Data word index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Data unit is valid. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Data unit is invalid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="794" column="24" bodyfile="hal/nrf_cache.h" bodystart="794" bodyend="841" declfile="hal/nrf_cache.h" declline="493" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga7f2a4358f0d38825cfa2b51637bf81b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_is_data_unit_dirty_check</definition>
        <argsstring>(NRF_CACHEINFO_Type const *p_reg, uint32_t set, uint8_t way, uint8_t word)</argsstring>
        <name>nrf_cache_is_data_unit_dirty_check</name>
        <param>
          <type>NRF_CACHEINFO_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>set</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>way</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>Function for checking the dirtiness of a data unit associated with the specified set, way and word. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">set</parametername>
</parameternamelist>
<parameterdescription>
<para>Set that contains the data unit to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">way</parametername>
</parameternamelist>
<parameterdescription>
<para>Way that contains the data unit to check. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">word</parametername>
</parameternamelist>
<parameterdescription>
<para>Data word index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Data unit is dirty. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Data unit is clean. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="845" column="24" bodyfile="hal/nrf_cache.h" bodystart="845" bodyend="871" declfile="hal/nrf_cache.h" declline="511" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gacae4625e5f9d055c0fe52dd1d2607bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_lineaddr_set</definition>
        <argsstring>(NRF_CACHE_Type *p_reg, uint32_t addr)</argsstring>
        <name>nrf_cache_lineaddr_set</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Function to set the memory address covered by the line to be maintained. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Cache line adress. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="876" column="24" bodyfile="hal/nrf_cache.h" bodystart="876" bodyend="879" declfile="hal/nrf_cache.h" declline="524" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga7eb1bd528269b5647c4ed3a6172fd8be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_lineaddr_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg)</argsstring>
        <name>nrf_cache_lineaddr_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function to get the memory address covered by the line to be maintained. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Cache line adress. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="881" column="28" bodyfile="hal/nrf_cache.h" bodystart="881" bodyend="884" declfile="hal/nrf_cache.h" declline="533" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gaec4381cdc4063490b6fcf05ecd09289b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_cache_task_trigger</definition>
        <argsstring>(NRF_CACHE_Type *p_reg, nrf_cache_task_t task)</argsstring>
        <name>nrf_cache_task_trigger</name>
        <param>
          <type>NRF_CACHE_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1ga49ede922bdb9d9b6243a72e9a0049ecd" kindref="member">nrf_cache_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for triggering the specified CACHE task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="886" column="24" bodyfile="hal/nrf_cache.h" bodystart="886" bodyend="889" declfile="hal/nrf_cache.h" declline="541" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1ga7ded5d5db4f09095de5e83af7977a6dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_cache_task_address_get</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg, nrf_cache_task_t task)</argsstring>
        <name>nrf_cache_task_address_get</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__cache__hal_1ga49ede922bdb9d9b6243a72e9a0049ecd" kindref="member">nrf_cache_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of the specified task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Task address. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="891" column="28" bodyfile="hal/nrf_cache.h" bodystart="891" bodyend="895" declfile="hal/nrf_cache.h" declline="551" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__cache__hal_1gabee8421cea588033567777ca5a96d81f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_cache_busy_check</definition>
        <argsstring>(NRF_CACHE_Type const *p_reg)</argsstring>
        <name>nrf_cache_busy_check</name>
        <param>
          <type>NRF_CACHE_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the cache is busy or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the cache is busy, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_cache.h" line="899" column="24" bodyfile="hal/nrf_cache.h" bodystart="899" bodyend="908" declfile="hal/nrf_cache.h" declline="563" declcolumn="24"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2019<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_CACHE_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_cache_hal<sp/>CACHE<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_cache</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>The<sp/>hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>CACHE<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHEDATA_SET_WAY_DU_DATA_Data_Msk)<sp/>||<sp/>defined(CACHEDATA_SET_WAY_DATA0_Data_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>CACHEDATA<sp/>feature.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_CACHEDATA<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_CACHEDATA<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHEDATA_SET_WAY_DU_DATA_Data_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>CACHE<sp/>data<sp/>units<sp/>feature.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_CACHEDATA_DU<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_CACHEDATA_DU<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHEINFO_SET_WAY_INFO_TAG_Msk)<sp/>||<sp/>defined(CACHEINFO_SET_WAY_TAG_Msk)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">/**<sp/>@brief<sp/>Presence<sp/>of<sp/>the<sp/>CACHEINFO<sp/>feature.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_CACHEINFO<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_CACHEINFO<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_TASKS_INVALIDATECACHE_TASKS_INVALIDATECACHE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>cache<sp/>tasks<sp/>are<sp/>supported.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_TASKS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_TASKS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_TASKS_CLEANCACHE_TASKS_CLEANCACHE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>CLEAN<sp/>cache/line<sp/>tasks<sp/>are<sp/>supported.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_TASK_CLEAN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_TASK_CLEAN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_TASKS_FLUSHCACHE_TASKS_FLUSHCACHE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="88"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>FLUSH<sp/>cache/line<sp/>tasks<sp/>are<sp/>supported.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_TASK_FLUSH<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_TASK_FLUSH<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_TASKS_SAVE_TASKS_SAVE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>save<sp/>and<sp/>restore<sp/>tasks<sp/>are<sp/>supported.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_TASK_SAVE_RESTORE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_TASK_SAVE_RESTORE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_STATUS_READY_Msk)<sp/>||<sp/>defined(CACHE_STATUS_BUSY_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>status<sp/>check<sp/>is<sp/>supported.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_STATUS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_STATUS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_MODE_MODE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="109"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>splitting<sp/>the<sp/>dedicated<sp/>RAM<sp/>between<sp/>cache<sp/>and<sp/>generic<sp/>memory<sp/>is<sp/>supported.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_RAM_MODE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_RAM_MODE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_MODE_RAMSIZE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>configuration<sp/>of<sp/>split<sp/>of<sp/>dedicated<sp/>RAM<sp/>between<sp/>cache<sp/>and<sp/>generic<sp/>memory<sp/>is<sp/>supported.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_RAMSIZE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_RAMSIZE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHEINFO_SET_WAY_D0_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>dirtiness<sp/>check<sp/>functionality<sp/>for<sp/>cache<sp/>is<sp/>supported.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_CACHEINFO_DU_DIRTY<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_CACHEINFO_DU_DIRTY<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHEINFO_SET_WAY_DUV0_Msk)<sp/>||<sp/>defined(CACHEINFO_SET_WAY_INFO_DUV0_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="130"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>data<sp/>unit<sp/>validation<sp/>functionality<sp/>for<sp/>cache<sp/>is<sp/>supported.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_CACHEINFO_DU_VALIDATION<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_CACHEINFO_DU_VALIDATION<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHEINFO_SET_WAY_INFO_DUV0_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="137"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>cache<sp/>info<sp/>has<sp/>INFO<sp/>register.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_CACHEINFO_SET_WAY_INFO<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_HAS_CACHEINFO_SET_WAY_INFO<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_CACHEDATA</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="144"><highlight class="comment">/**<sp/>@brief<sp/>Max<sp/>number<sp/>of<sp/>words<sp/>in<sp/>CACHEDATA<sp/>data<sp/>units.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHEDATA_DATA_WORDS_IN_UNIT_MAX<sp/>CACHEDATA_SET_WAY_DU_DATA_MaxCount</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="146"><highlight class="comment">/**<sp/>@brief<sp/>Max<sp/>number<sp/>of<sp/>CACHEDATA<sp/>data<sp/>units.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHEDATA_DATA_UNITS_MAX<sp/>CACHEDATA_SET_WAY_DU_MaxCount</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment">/**<sp/>@brief<sp/>Max<sp/>number<sp/>of<sp/>CACHEDATA<sp/>words.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHEDATA_WORD_INDEX_MAX<sp/>\</highlight></codeline>
<codeline lineno="150"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRF_CACHEDATA_DATA_WORDS_IN_UNIT_MAX<sp/>*<sp/>NRF_CACHEDATA_DATA_UNITS_MAX)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment">/**<sp/>@brief<sp/>Max<sp/>number<sp/>of<sp/>CACHEDATA<sp/>ways.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHEDATA_WAY_INDEX_MAX<sp/><sp/>CACHEDATA_SET_WAY_MaxCount</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment">/**<sp/>@brief<sp/>Max<sp/>number<sp/>of<sp/>CACHEDATA<sp/>sets.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHEDATA_SET_INDEX_MAX<sp/><sp/>CACHEDATA_SET_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_CACHEINFO</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="158"><highlight class="comment">/**<sp/>@brief<sp/>Max<sp/>number<sp/>of<sp/>words<sp/>in<sp/>CACHEINFO<sp/>data<sp/>units.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHEINFO_DATA_WORDS_IN_UNIT_MAX<sp/>CACHEDATA_SET_WAY_DU_DATA_MaxCount</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="160"><highlight class="comment">/**<sp/>@brief<sp/>Max<sp/>number<sp/>of<sp/>CACHEINFO<sp/>data<sp/>units.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHEINFO_DATA_UNITS_MAX<sp/>CACHEDATA_SET_WAY_DU_MaxCount</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="162"><highlight class="comment">/**<sp/>@brief<sp/>Max<sp/>number<sp/>of<sp/>CACHEINFO<sp/>words.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHEINFO_WORD_INDEX_MAX<sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(NRF_CACHEINFO_DATA_WORDS_IN_UNIT_MAX<sp/>*<sp/>NRF_CACHEINFO_DATA_UNITS_MAX)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="165"><highlight class="comment">/**<sp/>@brief<sp/>Max<sp/>number<sp/>of<sp/>CACHEINFO<sp/>ways.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHEINFO_WAY_INDEX_MAX<sp/><sp/>CACHEINFO_SET_WAY_MaxCount</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="167"><highlight class="comment">/**<sp/>@brief<sp/>Max<sp/>number<sp/>of<sp/>CACHEINFO<sp/>sets.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHEINFO_SET_INDEX_MAX<sp/><sp/>CACHEINFO_SET_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_RAMSIZE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="172"><highlight class="comment">/**<sp/>@brief<sp/>Max<sp/>enumerator<sp/>value<sp/>of<sp/>RAMSIZE<sp/>field.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_CACHE_MODE_RAMSIZE_MAX<sp/>CACHE_MODE_RAMSIZE_Max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_TASKS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment">/**<sp/>@brief<sp/>CACHE<sp/>tasks.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_TASK_CLEAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda0b5faa49a8f6374e0a0d57f999052077" kindref="member">NRF_CACHE_TASK_CLEANCACHE</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CACHE_Type,<sp/>TASKS_CLEANCACHE),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Clean<sp/>the<sp/>whole<sp/>cache.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecdae63f5a05627646aa436b210a7d773767" kindref="member">NRF_CACHE_TASK_CLEANLINE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CACHE_Type,<sp/>TASKS_CLEANLINE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Clean<sp/>the<sp/>cache<sp/>line.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_TASK_FLUSH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecdac3bf75e1d727aa69ad9b74ea768838f0" kindref="member">NRF_CACHE_TASK_FLUSHCACHE</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CACHE_Type,<sp/>TASKS_FLUSHCACHE),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Flush<sp/>the<sp/>whole<sp/>cache.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda6ce7882a167236d57916c1d86034f5d0" kindref="member">NRF_CACHE_TASK_FLUSHLINE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CACHE_Type,<sp/>TASKS_FLUSHLINE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Flush<sp/>the<sp/>cache<sp/>line.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_TASK_SAVE_RESTORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda1942612fbbae087dbf498bb4b6a389ee" kindref="member">NRF_CACHE_TASK_SAVE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CACHE_Type,<sp/>TASKS_SAVE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Save<sp/>the<sp/>state<sp/>to<sp/>a<sp/>retained<sp/>memory<sp/>space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecdaffde15302587b738fa0043439a48d222" kindref="member">NRF_CACHE_TASK_RESTORE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CACHE_Type,<sp/>TASKS_RESTORE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Restore<sp/>the<sp/>state<sp/>from<sp/>a<sp/>retained<sp/>memory<sp/>space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda10f8c0acee707f39a8fa647b0b4fe990" kindref="member">NRF_CACHE_TASK_INVALIDATECACHE</ref><sp/>=<sp/>offsetof(NRF_CACHE_Type,<sp/>TASKS_INVALIDATECACHE),<sp/></highlight><highlight class="comment">/**&lt;<sp/>Invalidate<sp/>the<sp/>whole<sp/>cache.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda52b46d3dd9c9155fc291acc745b177a6" kindref="member">NRF_CACHE_TASK_INVALIDATELINE</ref><sp/><sp/>=<sp/>offsetof(NRF_CACHE_Type,<sp/>TASKS_INVALIDATELINE),<sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Invalidate<sp/>the<sp/>cache<sp/>line.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecdaa9f90eb4bba52bdbf22f089bb4b9cb52" kindref="member">NRF_CACHE_TASK_ERASE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_CACHE_Type,<sp/>TASKS_ERASE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/**&lt;<sp/>Erase<sp/>the<sp/>whole<sp/>cache.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">}<sp/><ref refid="group__nrf__cache__hal_1ga49ede922bdb9d9b6243a72e9a0049ecd" kindref="member">nrf_cache_task_t</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="198"><highlight class="comment">/**<sp/>@brief<sp/>Cache<sp/>regions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1ggaeae9f7c57f88049da165f58737bb95e9a0a431ff82f85fe3fc3e0cd97e2eb8224" kindref="member">NRF_CACHE_REGION_FLASH</ref><sp/>=<sp/>0,<sp/></highlight><highlight class="comment">///&lt;<sp/>Cache<sp/>region<sp/>related<sp/>to<sp/>Flash<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1ggaeae9f7c57f88049da165f58737bb95e9a6d77361b76ca766d78f9718c1311933f" kindref="member">NRF_CACHE_REGION_XIP</ref><sp/><sp/><sp/>=<sp/>1,<sp/></highlight><highlight class="comment">///&lt;<sp/>Cache<sp/>region<sp/>related<sp/>to<sp/>XIP<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">}<sp/><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_RAMSIZE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="206"><highlight class="comment">/**<sp/>@brief<sp/>Dedicated<sp/>RAM<sp/>size<sp/>used<sp/>for<sp/>cache<sp/>memory.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gga991edeffce0e89bffec886613b9fef42a2b6d3cc414bf77aaceddd4360b42341f" kindref="member">NRF_CACHE_RAMSIZE_ALL</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>CACHE_MODE_RAMSIZE_All,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>All<sp/>RAM<sp/>is<sp/>used<sp/>for<sp/>cache<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gga991edeffce0e89bffec886613b9fef42a426da0766c12dfb3a29361dbe3f4fb6e" kindref="member">NRF_CACHE_RAMSIZE_HALF</ref><sp/><sp/><sp/><sp/>=<sp/>CACHE_MODE_RAMSIZE_Half,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Half<sp/>of<sp/>the<sp/>RAM<sp/>is<sp/>used<sp/>for<sp/>cache<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gga991edeffce0e89bffec886613b9fef42a1336a9bc44b84dc6f05635024a7def58" kindref="member">NRF_CACHE_RAMSIZE_QUARTER</ref><sp/>=<sp/>CACHE_MODE_RAMSIZE_Quarter,<sp/></highlight><highlight class="comment">///&lt;<sp/>Quarter<sp/>of<sp/>the<sp/>RAM<sp/>is<sp/>used<sp/>for<sp/>cache<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gga991edeffce0e89bffec886613b9fef42a2446ca738264545926ecf98d2ca7d3ae" kindref="member">NRF_CACHE_RAMSIZE_NONE</ref><sp/><sp/><sp/><sp/>=<sp/>CACHE_MODE_RAMSIZE_None<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>None<sp/>of<sp/>the<sp/>RAM<sp/>is<sp/>used<sp/>for<sp/>cache<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">}<sp/><ref refid="group__nrf__cache__hal_1ga991edeffce0e89bffec886613b9fef42" kindref="member">nrf_cache_ramsize_t</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="216"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>CACHE<sp/>peripheral.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga756fd84f98cf771e67b886da7e5a4996" kindref="member">nrf_cache_enable</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="223"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>CACHE<sp/>peripheral.</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga9f96b98968845dd74610731ea62c04d9" kindref="member">nrf_cache_disable</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="230"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>CACHE<sp/>peripheral<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>CACHE<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>CACHE<sp/>is<sp/>not<sp/>enabled.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga7d2944d15b8c601cdbb497db9b6878b0" kindref="member">nrf_cache_enable_check</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>invalidating<sp/>the<sp/>cache<sp/>content.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gaefdb58b01a18348964ff64105e4e795b" kindref="member">nrf_cache_invalidate</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>erasing<sp/>the<sp/>cache<sp/>content.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga6d9ba61a07efda4785f4d13ca2216575" kindref="member">nrf_cache_erase</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="254"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>status<sp/>of<sp/>@ref<sp/>nrf_cache_erase().</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Erase<sp/>is<sp/>finished.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Erase<sp/>is<sp/>not<sp/>complete<sp/>or<sp/>has<sp/>not<sp/>started.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gaa3869bbc7a6c3585925c2d212a3810bd" kindref="member">nrf_cache_erase_status_check</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="264"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>status<sp/>of<sp/>the<sp/>cache<sp/>erase.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gaad1baeca8bd8d414090974a07b15e46d" kindref="member">nrf_cache_erase_status_clear</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="271"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>cache<sp/>profiling.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>cache<sp/>profiling<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga5a35696d8b62a4bbadbf198f37031805" kindref="member">nrf_cache_profiling_set</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="279"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>cache<sp/>profiling<sp/>counters.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gac5e7cb47f50fea87249214c524b51119" kindref="member">nrf_cache_profiling_counters_clear</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="286"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>cache<sp/>hits<sp/>for<sp/>instruction<sp/>fetch<sp/>from<sp/>the<sp/>specified</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache<sp/>region.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@note<sp/>Separate<sp/>counters<sp/>are<sp/>used<sp/>for<sp/>flash<sp/>region<sp/>and<sp/>XIP<sp/>region.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>@note<sp/>Cache<sp/>profiling<sp/>must<sp/>be<sp/>enabled<sp/>first.<sp/>See<sp/>@ref<sp/>nrf_cache_profiling_set.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>region<sp/>Cache<sp/>region.</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>instruction<sp/>fetch<sp/>cache<sp/>hits.</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1gaac6153662b901d2183c452f9ef04b076" kindref="member">nrf_cache_instruction_hit_counter_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref><sp/><sp/><sp/><sp/><sp/>region);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="301"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>cache<sp/>misses<sp/>for<sp/>instruction<sp/>fetch<sp/>from<sp/>the<sp/>specified</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache<sp/>region.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>@note<sp/>Separate<sp/>counters<sp/>are<sp/>used<sp/>for<sp/>flash<sp/>region<sp/>and<sp/>XIP<sp/>region.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>@note<sp/>Cache<sp/>profiling<sp/>must<sp/>be<sp/>enabled<sp/>first.<sp/>See<sp/>@ref<sp/>nrf_cache_profiling_set.</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>region<sp/>Cache<sp/>region.</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>instruction<sp/>fetch<sp/>cache<sp/>misses.</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1gaf20b23ae75f3d11a08d628e5b7ecd180" kindref="member">nrf_cache_instruction_miss_counter_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref><sp/><sp/><sp/><sp/><sp/>region);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="316"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>cache<sp/>hits<sp/>for<sp/>data<sp/>fetch<sp/>from<sp/>the<sp/>specified</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache<sp/>region.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*<sp/>@note<sp/>Separate<sp/>counters<sp/>are<sp/>used<sp/>for<sp/>flash<sp/>region<sp/>and<sp/>XIP<sp/>region.</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>@note<sp/>Cache<sp/>profiling<sp/>must<sp/>be<sp/>enabled<sp/>first.<sp/>See<sp/>@ref<sp/>nrf_cache_profiling_set.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>region<sp/>Cache<sp/>region.</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>data<sp/>fetch<sp/>cache<sp/>hits.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1ga26fedd2a0b6f762125b5e11451e30f34" kindref="member">nrf_cache_data_hit_counter_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref><sp/><sp/><sp/><sp/><sp/>region);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="331"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>cache<sp/>misses<sp/>for<sp/>data<sp/>fetch<sp/>from<sp/>the<sp/>specified</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache<sp/>region.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>@note<sp/>Separate<sp/>counters<sp/>are<sp/>used<sp/>for<sp/>flash<sp/>region<sp/>and<sp/>XIP<sp/>region.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>@note<sp/>Cache<sp/>profiling<sp/>must<sp/>be<sp/>enabled<sp/>first.<sp/>See<sp/>@ref<sp/>nrf_cache_profiling_set.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>region<sp/>Cache<sp/>region.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>data<sp/>fetch<sp/>cache<sp/>misses.</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1gaa972907d2ce82a410ea13b8da0b583eb" kindref="member">nrf_cache_data_miss_counter_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref><sp/><sp/><sp/><sp/><sp/>region);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_RAM_MODE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>cache<sp/>RAM<sp/>mode.</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>When<sp/>configured<sp/>in<sp/>the<sp/>RAM<sp/>mode,<sp/>the<sp/>accesses<sp/>to<sp/>internal<sp/>or<sp/>external<sp/>flash<sp/>will<sp/>not<sp/>be<sp/>cached.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>In<sp/>this<sp/>mode,<sp/>the<sp/>cache<sp/>data<sp/>contents<sp/>can<sp/>be<sp/>used<sp/>as<sp/>the<sp/>read/write<sp/>RAM.</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>Only<sp/>the<sp/>data<sp/>content<sp/>of<sp/>the<sp/>cache<sp/>is<sp/>available<sp/>as<sp/>RAM.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>@note<sp/>Enabling<sp/>the<sp/>RAM<sp/>mode<sp/>causes<sp/>the<sp/>RAM<sp/>to<sp/>be<sp/>cleared.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*<sp/>@note<sp/>Disabling<sp/>the<sp/>RAM<sp/>mode<sp/>causes<sp/>the<sp/>cache<sp/>to<sp/>be<sp/>invalidated.</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>the<sp/>cache<sp/>RAM<sp/>mode<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gab95b2acd2a16a1b1a4d4712fbbc2bd4e" kindref="member">nrf_cache_ram_mode_set</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="362"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>cache<sp/>is<sp/>in<sp/>RAM<sp/>mode.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>@return<sp/>True<sp/>if<sp/>the<sp/>cache<sp/>RAM<sp/>mode<sp/>is<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga59bfba4829667844633caf62c22f073e" kindref="member">nrf_cache_ram_mode_check</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_RAMSIZE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="373"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>configuration<sp/>of<sp/>splitting<sp/>the<sp/>dedicated<sp/>cache<sp/>RAM.</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>@details<sp/>Dedicated<sp/>cache<sp/>RAM<sp/>can<sp/>be<sp/>splitted<sp/>into<sp/>cache<sp/>memory<sp/>and<sp/>generic<sp/>memory.</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>By<sp/>default,<sp/>all<sp/>dedicated<sp/>RAM<sp/>is<sp/>used<sp/>for<sp/>cache<sp/>memory.</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>ramsize<sp/>Dedicated<sp/>cache<sp/>RAM<sp/>split<sp/>configuration.</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga6f05b1ef7689b8d3316dc40e93f71461" kindref="member">nrf_cache_ramsize_set</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__cache__hal_1ga991edeffce0e89bffec886613b9fef42" kindref="member">nrf_cache_ramsize_t</ref><sp/>ramsize);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="384"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>configuration<sp/>of<sp/>splitting<sp/>the<sp/>dedicated<sp/>cache<sp/>RAM.</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/>@return<sp/>Configuration<sp/>of<sp/>dedicated<sp/>cache<sp/>RAM<sp/>split.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__cache__hal_1ga991edeffce0e89bffec886613b9fef42" kindref="member">nrf_cache_ramsize_t</ref><sp/><ref refid="group__nrf__cache__hal_1gae5fc746c9dd94b53f2a14846780960db" kindref="member">nrf_cache_ramsize_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="394"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>blocking<sp/>the<sp/>cache<sp/>content<sp/>access.</highlight></codeline>
<codeline lineno="396"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="397"><highlight class="comment"><sp/>*<sp/>To<sp/>unlock<sp/>the<sp/>cache<sp/>content<sp/>access,<sp/>a<sp/>reset<sp/>has<sp/>to<sp/>be<sp/>performed.</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/>@note<sp/>Blocking<sp/>is<sp/>ignored<sp/>in<sp/>the<sp/>RAM<sp/>mode.</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga9bc9f2a59ccd951d1e2d4f087e52c43b" kindref="member">nrf_cache_read_lock_enable</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="405"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>blocking<sp/>the<sp/>cache<sp/>content<sp/>updates.</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="408"><highlight class="comment"><sp/>*<sp/>Blocking<sp/>of<sp/>updates<sp/>prevents<sp/>updating<sp/>of<sp/>cache<sp/>content<sp/>on<sp/>cache<sp/>misses,</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*<sp/>but<sp/>the<sp/>peripheral<sp/>will<sp/>continue<sp/>to<sp/>check<sp/>for<sp/>instruction/data<sp/>fetches</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>content<sp/>already<sp/>present<sp/>in<sp/>the<sp/>cache.</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*<sp/>@note<sp/>Blocking<sp/>is<sp/>ignored<sp/>in<sp/>the<sp/>RAM<sp/>mode.</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/>True<sp/>if<sp/>cache<sp/>content<sp/>update<sp/>lock<sp/>is<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga05756fe9cd2bb93b1a022dade02ede60" kindref="member">nrf_cache_update_lock_set</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_CACHEDATA</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="420"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>cache<sp/>data<sp/>word.</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/>@note<sp/>When<sp/>operating<sp/>in<sp/>the<sp/>RAM<sp/>mode,<sp/>the<sp/>cache<sp/>data<sp/>is<sp/>accessible<sp/>as<sp/>a<sp/>general<sp/>purpose<sp/>RAM.</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>set<sp/><sp/><sp/>Set<sp/>that<sp/>contains<sp/>the<sp/>data<sp/>to<sp/>get.</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>way<sp/><sp/><sp/>Way<sp/>that<sp/>contains<sp/>the<sp/>data<sp/>to<sp/>get.</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>word<sp/><sp/>Data<sp/>word<sp/>index<sp/>to<sp/>get.</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/>@return<sp/>32-bit<sp/>data<sp/>word.</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1ga7a93f10d29db8e1aa8ebea5e08a944dd" kindref="member">nrf_cache_data_get</ref>(NRF_CACHEDATA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>way,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_CACHEINFO</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="439"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>tag<sp/>associated<sp/>with<sp/>the<sp/>specified<sp/>set<sp/>and<sp/>way.</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*<sp/>The<sp/>tag<sp/>is<sp/>used<sp/>to<sp/>check<sp/>if<sp/>an<sp/>entry<sp/>in<sp/>the<sp/>cache<sp/>matches<sp/>the<sp/>address<sp/>that<sp/>is<sp/>being<sp/>fetched.</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>set<sp/><sp/><sp/>Set<sp/>that<sp/>contains<sp/>the<sp/>tag<sp/>to<sp/>get.</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>way<sp/><sp/><sp/>Way<sp/>that<sp/>contains<sp/>the<sp/>tag<sp/>to<sp/>get.</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/>@return<sp/>Tag<sp/>value.</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1gacc7d4f3ec88bc499f72c78a5d4f7d217" kindref="member">nrf_cache_tag_get</ref>(NRF_CACHEINFO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>way);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="454"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>validity<sp/>of<sp/>a<sp/>cache<sp/>line<sp/>associated<sp/>with<sp/>the<sp/>specified<sp/>set<sp/>and<sp/>way.</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>set<sp/><sp/><sp/>Set<sp/>that<sp/>contains<sp/>the<sp/>cache<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>way<sp/><sp/><sp/>Way<sp/>that<sp/>contains<sp/>the<sp/>cache<sp/>line<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Cache<sp/>line<sp/>is<sp/>valid.</highlight></codeline>
<codeline lineno="462"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Cache<sp/>line<sp/>is<sp/>invalid.</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gaaa54ee451b51ddc9a2fda2702f74db2d" kindref="member">nrf_cache_line_validity_check</ref>(NRF_CACHEINFO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set,</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>way);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="468"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>most<sp/>recently<sp/>used<sp/>way<sp/>in<sp/>the<sp/>specified<sp/>set.</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/>The<sp/>most<sp/>recently<sp/>used<sp/>way<sp/>is<sp/>updated<sp/>on<sp/>each<sp/>fetch<sp/>from<sp/>the<sp/>cache<sp/>and<sp/>is<sp/>used<sp/>for<sp/>the<sp/>cache<sp/>replacement<sp/>policy.</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>set<sp/><sp/><sp/>Specified<sp/>set.</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>most<sp/>recently<sp/>used<sp/>way<sp/>in<sp/>the<sp/>specified<sp/>set.</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__cache__hal_1gabd81e14a0131c0d6cf6cebe0c681339b" kindref="member">nrf_cache_mru_get</ref>(NRF_CACHEINFO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>set);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_CACHEINFO_DU_VALIDATION</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="482"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>validity<sp/>of<sp/>a<sp/>data<sp/>unit<sp/>associated<sp/>with<sp/>the<sp/>specified<sp/>set,<sp/>way<sp/>and<sp/>word.</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>set<sp/><sp/><sp/>Set<sp/>that<sp/>contains<sp/>the<sp/>data<sp/>unit<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>way<sp/><sp/><sp/>Way<sp/>that<sp/>contains<sp/>the<sp/>data<sp/>unit<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>word<sp/><sp/>Data<sp/>word<sp/>index.</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Data<sp/>unit<sp/>is<sp/>valid.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Data<sp/>unit<sp/>is<sp/>invalid.</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gaa27dd3609dcb6f9b4c9a5a6edcefa4c5" kindref="member">nrf_cache_data_unit_validity_check</ref>(NRF_CACHEINFO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>way,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_CACHEINFO_DU_DIRTY</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="500"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>dirtiness<sp/>of<sp/>a<sp/>data<sp/>unit<sp/>associated<sp/>with<sp/>the<sp/>specified<sp/>set,<sp/>way<sp/>and<sp/>word.</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>set<sp/><sp/><sp/>Set<sp/>that<sp/>contains<sp/>the<sp/>data<sp/>unit<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>way<sp/><sp/><sp/>Way<sp/>that<sp/>contains<sp/>the<sp/>data<sp/>unit<sp/>to<sp/>check.</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>word<sp/><sp/>Data<sp/>word<sp/>index.</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Data<sp/>unit<sp/>is<sp/>dirty.</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Data<sp/>unit<sp/>is<sp/>clean.</highlight></codeline>
<codeline lineno="510"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga7f2a4358f0d38825cfa2b51637bf81b5" kindref="member">nrf_cache_is_data_unit_dirty_check</ref>(NRF_CACHEINFO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>way,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_TASKS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="518"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>to<sp/>set<sp/>the<sp/>memory<sp/>address<sp/>covered<sp/>by<sp/>the<sp/>line<sp/>to<sp/>be<sp/>maintained.</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>addr<sp/><sp/>Cache<sp/>line<sp/>adress.</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gacae4625e5f9d055c0fe52dd1d2607bae" kindref="member">nrf_cache_lineaddr_set</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>addr);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="526"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>to<sp/>get<sp/>the<sp/>memory<sp/>address<sp/>covered<sp/>by<sp/>the<sp/>line<sp/>to<sp/>be<sp/>maintained.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*<sp/>@return<sp/>Cache<sp/>line<sp/>adress.</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1ga7eb1bd528269b5647c4ed3a6172fd8be" kindref="member">nrf_cache_lineaddr_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="535"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>triggering<sp/>the<sp/>specified<sp/>CACHE<sp/>task.</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task.</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gaec4381cdc4063490b6fcf05ecd09289b" kindref="member">nrf_cache_task_trigger</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__cache__hal_1ga49ede922bdb9d9b6243a72e9a0049ecd" kindref="member">nrf_cache_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="543"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="544"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>returning<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="545"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="546"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task.</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*<sp/>@return<sp/>Task<sp/>address.</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1ga7ded5d5db4f09095de5e83af7977a6dd" kindref="member">nrf_cache_task_address_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1ga49ede922bdb9d9b6243a72e9a0049ecd" kindref="member">nrf_cache_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_STATUS</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="556"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="557"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>cache<sp/>is<sp/>busy<sp/>or<sp/>not.</highlight></codeline>
<codeline lineno="558"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="559"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*<sp/>@return<sp/>True<sp/>if<sp/>the<sp/>cache<sp/>is<sp/>busy,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gabee8421cea588033567777ca5a96d81f" kindref="member">nrf_cache_busy_check</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga756fd84f98cf771e67b886da7e5a4996" kindref="member">nrf_cache_enable</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>CACHE_ENABLE_ENABLE_Enabled;</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga9f96b98968845dd74610731ea62c04d9" kindref="member">nrf_cache_disable</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>CACHE_ENABLE_ENABLE_Disabled;</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga7d2944d15b8c601cdbb497db9b6878b0" kindref="member">nrf_cache_enable_check</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;ENABLE<sp/>==<sp/>CACHE_ENABLE_ENABLE_Enabled;</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gaefdb58b01a18348964ff64105e4e795b" kindref="member">nrf_cache_invalidate</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_TASKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gaec4381cdc4063490b6fcf05ecd09289b" kindref="member">nrf_cache_task_trigger</ref>(p_reg,<sp/><ref refid="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecda10f8c0acee707f39a8fa647b0b4fe990" kindref="member">NRF_CACHE_TASK_INVALIDATECACHE</ref>);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INVALIDATE<sp/>=<sp/>CACHE_INVALIDATE_INVALIDATE_Invalidate;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga6d9ba61a07efda4785f4d13ca2216575" kindref="member">nrf_cache_erase</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_TASKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gaec4381cdc4063490b6fcf05ecd09289b" kindref="member">nrf_cache_task_trigger</ref>(p_reg,<sp/><ref refid="group__nrf__cache__hal_1gga49ede922bdb9d9b6243a72e9a0049ecdaa9f90eb4bba52bdbf22f089bb4b9cb52" kindref="member">NRF_CACHE_TASK_ERASE</ref>);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERASE<sp/>=<sp/>CACHE_ERASE_ERASE_Erase;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gaa3869bbc7a6c3585925c2d212a3810bd" kindref="member">nrf_cache_erase_status_check</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_STATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!<ref refid="group__nrf__cache__hal_1gabee8421cea588033567777ca5a96d81f" kindref="member">nrf_cache_busy_check</ref>(p_reg));</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;ERASESTATUS<sp/>&amp;<sp/>CACHE_ERASESTATUS_ERASESTATUS_Msk)<sp/>==</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHE_ERASESTATUS_ERASESTATUS_Finished<sp/>&lt;&lt;<sp/>CACHE_ERASESTATUS_ERASESTATUS_Pos);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gaad1baeca8bd8d414090974a07b15e46d" kindref="member">nrf_cache_erase_status_clear</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_TASKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>task<sp/>for<sp/>erasing<sp/>the<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)p_reg;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ERASESTATUS<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal">}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga5a35696d8b62a4bbadbf198f37031805" kindref="member">nrf_cache_profiling_set</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_PROFILINGENABLE_ENABLE_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PROFILINGENABLE<sp/>=</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enable<sp/>?<sp/>CACHE_PROFILINGENABLE_ENABLE_Enable<sp/>:<sp/>CACHE_PROFILINGENABLE_ENABLE_Disable);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CACHE_PROFILING_ENABLE_ENABLE_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PROFILING.ENABLE<sp/>=</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enable<sp/>?<sp/>CACHE_PROFILING_ENABLE_ENABLE_Enable<sp/>:<sp/>CACHE_PROFILING_ENABLE_ENABLE_Disable);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gac5e7cb47f50fea87249214c524b51119" kindref="member">nrf_cache_profiling_counters_clear</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="633"><highlight class="normal">{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_PROFILINGCLEAR_CLEAR_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PROFILINGCLEAR<sp/>=<sp/>(CACHE_PROFILINGCLEAR_CLEAR_Clear<sp/>&lt;&lt;<sp/>CACHE_PROFILINGCLEAR_CLEAR_Pos);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CACHE_PROFILING_CLEAR_CLEAR_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;PROFILING.CLEAR<sp/>=<sp/>(CACHE_PROFILING_CLEAR_CLEAR_Clear<sp/>&lt;&lt;<sp/>CACHE_PROFILING_CLEAR_CLEAR_Pos);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1gaac6153662b901d2183c452f9ef04b076" kindref="member">nrf_cache_instruction_hit_counter_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref><sp/><sp/><sp/><sp/><sp/>region)</highlight></codeline>
<codeline lineno="643"><highlight class="normal">{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_PROFILING_IHIT_HITS_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PROFILING[region].IHIT;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CACHE_PROFILING_HIT_HITS_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)region;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PROFILING.HIT;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1gaf20b23ae75f3d11a08d628e5b7ecd180" kindref="member">nrf_cache_instruction_miss_counter_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref><sp/><sp/><sp/><sp/><sp/>region)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_PROFILING_IMISS_MISSES_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PROFILING[region].IMISS;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CACHE_PROFILING_MISS_MISSES_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)region;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PROFILING.MISS;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1ga26fedd2a0b6f762125b5e11451e30f34" kindref="member">nrf_cache_data_hit_counter_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref><sp/><sp/><sp/><sp/><sp/>region)</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_PROFILING_DHIT_HITS_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PROFILING[region].DHIT;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CACHE_PROFILING_HIT_HITS_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)region;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PROFILING.HIT;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal">}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1gaa972907d2ce82a410ea13b8da0b583eb" kindref="member">nrf_cache_data_miss_counter_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1gaeae9f7c57f88049da165f58737bb95e9" kindref="member">nrf_cache_region_t</ref><sp/><sp/><sp/><sp/><sp/>region)</highlight></codeline>
<codeline lineno="676"><highlight class="normal">{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_PROFILING_DMISS_MISSES_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PROFILING[region].DMISS;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(CACHE_PROFILING_MISS_MISSES_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)region;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;PROFILING.MISS;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_RAM_MODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gab95b2acd2a16a1b1a4d4712fbbc2bd4e" kindref="member">nrf_cache_ram_mode_set</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="687"><highlight class="normal">{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODE<sp/>=<sp/>((p_reg-&gt;MODE<sp/>&amp;<sp/>~CACHE_MODE_MODE_Msk)<sp/>|</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((enable<sp/>?<sp/>CACHE_MODE_MODE_Ram<sp/>:<sp/>CACHE_MODE_MODE_Cache)</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>CACHE_MODE_MODE_Pos));</highlight></codeline>
<codeline lineno="691"><highlight class="normal">}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga59bfba4829667844633caf62c22f073e" kindref="member">nrf_cache_ram_mode_check</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="694"><highlight class="normal">{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;MODE<sp/>&amp;<sp/>CACHE_MODE_MODE_Msk)<sp/>==<sp/>(CACHE_MODE_MODE_Ram<sp/>&lt;&lt;<sp/>CACHE_MODE_MODE_Pos);</highlight></codeline>
<codeline lineno="696"><highlight class="normal">}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_RAMSIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga6f05b1ef7689b8d3316dc40e93f71461" kindref="member">nrf_cache_ramsize_set</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__cache__hal_1ga991edeffce0e89bffec886613b9fef42" kindref="member">nrf_cache_ramsize_t</ref><sp/>ramsize)</highlight></codeline>
<codeline lineno="701"><highlight class="normal">{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;MODE<sp/>=<sp/>((p_reg-&gt;MODE<sp/>&amp;<sp/>~CACHE_MODE_RAMSIZE_Msk)<sp/>|<sp/>(ramsize<sp/>&lt;&lt;<sp/>CACHE_MODE_RAMSIZE_Pos));</highlight></codeline>
<codeline lineno="703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__cache__hal_1ga991edeffce0e89bffec886613b9fef42" kindref="member">nrf_cache_ramsize_t</ref><sp/><ref refid="group__nrf__cache__hal_1gae5fc746c9dd94b53f2a14846780960db" kindref="member">nrf_cache_ramsize_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="706"><highlight class="normal">{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__cache__hal_1ga991edeffce0e89bffec886613b9fef42" kindref="member">nrf_cache_ramsize_t</ref>)((p_reg-&gt;MODE<sp/>&amp;<sp/>CACHE_MODE_RAMSIZE_Msk)<sp/>&gt;&gt;<sp/>CACHE_MODE_RAMSIZE_Pos);</highlight></codeline>
<codeline lineno="708"><highlight class="normal">}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga9bc9f2a59ccd951d1e2d4f087e52c43b" kindref="member">nrf_cache_read_lock_enable</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="712"><highlight class="normal">{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DEBUGLOCK<sp/>=<sp/>CACHE_DEBUGLOCK_DEBUGLOCK_Locked;</highlight></codeline>
<codeline lineno="714"><highlight class="normal">}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga05756fe9cd2bb93b1a022dade02ede60" kindref="member">nrf_cache_update_lock_set</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;WRITELOCK<sp/>=</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(enable<sp/>?<sp/>CACHE_WRITELOCK_WRITELOCK_Locked<sp/>:<sp/>CACHE_WRITELOCK_WRITELOCK_Unlocked);</highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_CACHEDATA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1ga7a93f10d29db8e1aa8ebea5e08a944dd" kindref="member">nrf_cache_data_get</ref>(NRF_CACHEDATA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>way,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word)</highlight></codeline>
<codeline lineno="727"><highlight class="normal">{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_CACHEDATA_DU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(word<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1gaec18b55decdc118a55febe0f73882e7f" kindref="member">NRF_CACHEDATA_WORD_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(way<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1gadf10cbe14426a052c970304d92dccba4" kindref="member">NRF_CACHEDATA_WAY_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(set<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1gac2a874e223201447fbbfd7cce6dbd2a7" kindref="member">NRF_CACHEDATA_SET_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>du<sp/><sp/><sp/>=<sp/>(word<sp/>/<sp/><ref refid="group__nrf__cache__hal_1gaba704e23dc434ea4178bf71d750e7595" kindref="member">NRF_CACHEDATA_DATA_WORDS_IN_UNIT_MAX</ref>);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>data<sp/>=<sp/>(uint8_t)(word<sp/>-<sp/>(du<sp/>*<sp/><ref refid="group__nrf__cache__hal_1gaba704e23dc434ea4178bf71d750e7595" kindref="member">NRF_CACHEDATA_DATA_WORDS_IN_UNIT_MAX</ref>));</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SET[set].WAY[way].DU[du].DATA[data];</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>CACHEDATA_SET_WAY_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>reg<sp/>=<sp/>&amp;p_reg-&gt;SET[set].WAY[way];</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(word)</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reg-&gt;DATA0;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reg-&gt;DATA1;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reg-&gt;DATA2;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reg-&gt;DATA3;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_CACHEINFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1gacc7d4f3ec88bc499f72c78a5d4f7d217" kindref="member">nrf_cache_tag_get</ref>(NRF_CACHEINFO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set,</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>way)</highlight></codeline>
<codeline lineno="757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHEINFO_SET_WAY_INFO_TAG_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(way<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1ga8adc07f29cc163b28878e389836dcd8a" kindref="member">NRF_CACHEINFO_WAY_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(set<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1ga5c9059963ea7e4e4bb0b074d06367a41" kindref="member">NRF_CACHEINFO_SET_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way].INFO<sp/>&amp;<sp/>CACHEINFO_SET_WAY_INFO_TAG_Msk);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way]<sp/>&amp;<sp/>CACHEINFO_SET_WAY_TAG_Msk);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal">}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gaaa54ee451b51ddc9a2fda2702f74db2d" kindref="member">nrf_cache_line_validity_check</ref>(NRF_CACHEINFO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set,</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>way)</highlight></codeline>
<codeline lineno="770"><highlight class="normal">{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHEINFO_SET_WAY_INFO_V_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(way<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1ga8adc07f29cc163b28878e389836dcd8a" kindref="member">NRF_CACHEINFO_WAY_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(set<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1ga5c9059963ea7e4e4bb0b074d06367a41" kindref="member">NRF_CACHEINFO_SET_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way].INFO<sp/>&amp;<sp/>CACHEINFO_SET_WAY_INFO_V_Msk)<sp/>==</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHEINFO_SET_WAY_INFO_V_Valid<sp/>&lt;&lt;<sp/>CACHEINFO_SET_WAY_INFO_V_Pos);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way]<sp/>&amp;<sp/>CACHEINFO_SET_WAY_V_Msk)<sp/>==</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHEINFO_SET_WAY_V_Valid<sp/>&lt;&lt;<sp/>CACHEINFO_SET_WAY_V_Pos);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrf__cache__hal_1gabd81e14a0131c0d6cf6cebe0c681339b" kindref="member">nrf_cache_mru_get</ref>(NRF_CACHEINFO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>set)</highlight></codeline>
<codeline lineno="783"><highlight class="normal">{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHEINFO_SET_WAY_INFO_MRU_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(set<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1ga5c9059963ea7e4e4bb0b074d06367a41" kindref="member">NRF_CACHEINFO_SET_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;SET[set].WAY[0].INFO<sp/>&amp;<sp/>CACHEINFO_SET_WAY_INFO_MRU_Msk)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CACHEINFO_SET_WAY_INFO_MRU_Pos);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((p_reg-&gt;SET[set].WAY[0]<sp/>&amp;<sp/>CACHEINFO_SET_WAY_MRU_Msk)<sp/>&gt;&gt;<sp/>CACHEINFO_SET_WAY_MRU_Pos);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal">}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_CACHEINFO_DU_VALIDATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gaa27dd3609dcb6f9b4c9a5a6edcefa4c5" kindref="member">nrf_cache_data_unit_validity_check</ref>(NRF_CACHEINFO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set,</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>way,</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word)</highlight></codeline>
<codeline lineno="798"><highlight class="normal">{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(word<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1ga279f580f4bf64462858fb253f6a20a81" kindref="member">NRF_CACHEINFO_WORD_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(way<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1ga8adc07f29cc163b28878e389836dcd8a" kindref="member">NRF_CACHEINFO_WAY_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(set<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1ga5c9059963ea7e4e4bb0b074d06367a41" kindref="member">NRF_CACHEINFO_SET_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>du<sp/>=<sp/>(word<sp/>/<sp/><ref refid="group__nrf__cache__hal_1ga47e3b11d456e175bc52f32ac36a29d88" kindref="member">NRF_CACHEINFO_DATA_WORDS_IN_UNIT_MAX</ref>);</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(du)</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_CACHEINFO_SET_WAY_INFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way].INFO<sp/>&amp;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CACHEINFO_SET_WAY_INFO_DUV0_Msk)<sp/>==</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHEINFO_SET_WAY_INFO_DUV0_Valid<sp/>&lt;&lt;<sp/>CACHEINFO_SET_WAY_INFO_DUV0_Pos);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way].INFO<sp/>&amp;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CACHEINFO_SET_WAY_INFO_DUV1_Msk)<sp/>==</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHEINFO_SET_WAY_INFO_DUV1_Valid<sp/>&lt;&lt;<sp/>CACHEINFO_SET_WAY_INFO_DUV1_Pos);</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way].INFO<sp/>&amp;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CACHEINFO_SET_WAY_INFO_DUV2_Msk)<sp/>==</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHEINFO_SET_WAY_INFO_DUV2_Valid<sp/>&lt;&lt;<sp/>CACHEINFO_SET_WAY_INFO_DUV2_Pos);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way].INFO<sp/>&amp;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CACHEINFO_SET_WAY_INFO_DUV3_Msk)<sp/>==</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHEINFO_SET_WAY_INFO_DUV3_Valid<sp/>&lt;&lt;<sp/>CACHEINFO_SET_WAY_INFO_DUV3_Pos);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way]<sp/>&amp;<sp/>CACHEINFO_SET_WAY_DUV0_Msk)<sp/>==</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHEINFO_SET_WAY_DUV0_Valid<sp/>&lt;&lt;<sp/>CACHEINFO_SET_WAY_DUV0_Pos);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way]<sp/>&amp;<sp/>CACHEINFO_SET_WAY_DUV1_Msk)<sp/>==</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHEINFO_SET_WAY_DUV1_Valid<sp/>&lt;&lt;<sp/>CACHEINFO_SET_WAY_DUV1_Pos);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way]<sp/>&amp;<sp/>CACHEINFO_SET_WAY_DUV2_Msk)<sp/>==</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHEINFO_SET_WAY_DUV2_Valid<sp/>&lt;&lt;<sp/>CACHEINFO_SET_WAY_DUV2_Pos);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way]<sp/>&amp;<sp/>CACHEINFO_SET_WAY_DUV3_Msk)<sp/>==</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHEINFO_SET_WAY_DUV3_Valid<sp/>&lt;&lt;<sp/>CACHEINFO_SET_WAY_DUV3_Pos);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CACHE_HAS_CACHEINFO_DU_VALIDATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_CACHEINFO_DU_DIRTY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1ga7f2a4358f0d38825cfa2b51637bf81b5" kindref="member">nrf_cache_is_data_unit_dirty_check</ref>(NRF_CACHEINFO_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set,</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>way,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word)</highlight></codeline>
<codeline lineno="849"><highlight class="normal">{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(word<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1ga279f580f4bf64462858fb253f6a20a81" kindref="member">NRF_CACHEINFO_WORD_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(way<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1ga8adc07f29cc163b28878e389836dcd8a" kindref="member">NRF_CACHEINFO_WAY_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(set<sp/>&lt;<sp/><ref refid="group__nrf__cache__hal_1ga5c9059963ea7e4e4bb0b074d06367a41" kindref="member">NRF_CACHEINFO_SET_INDEX_MAX</ref>);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>du<sp/>=<sp/>(word<sp/>/<sp/><ref refid="group__nrf__cache__hal_1ga47e3b11d456e175bc52f32ac36a29d88" kindref="member">NRF_CACHEINFO_DATA_WORDS_IN_UNIT_MAX</ref>);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(du)</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way]<sp/>&amp;<sp/>CACHEINFO_SET_WAY_D0_Msk)<sp/>==</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHEINFO_SET_WAY_D0_Dirty<sp/>&lt;&lt;<sp/>CACHEINFO_SET_WAY_D0_Pos);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FALLTHROUGH<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;SET[set].WAY[way]<sp/>&amp;<sp/>CACHEINFO_SET_WAY_D1_Msk)<sp/>==</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHEINFO_SET_WAY_D1_Dirty<sp/>&lt;&lt;<sp/>CACHEINFO_SET_WAY_D1_Pos);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CACHE_HAS_CACHEINFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_TASKS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gacae4625e5f9d055c0fe52dd1d2607bae" kindref="member">nrf_cache_lineaddr_set</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>addr)</highlight></codeline>
<codeline lineno="877"><highlight class="normal">{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;LINEADDR<sp/>=<sp/>addr;</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1ga7eb1bd528269b5647c4ed3a6172fd8be" kindref="member">nrf_cache_lineaddr_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;LINEADDR;</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gaec4381cdc4063490b6fcf05ecd09289b" kindref="member">nrf_cache_task_trigger</ref>(NRF_CACHE_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__cache__hal_1ga49ede922bdb9d9b6243a72e9a0049ecd" kindref="member">nrf_cache_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="887"><highlight class="normal">{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__cache__hal_1ga7ded5d5db4f09095de5e83af7977a6dd" kindref="member">nrf_cache_task_address_get</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__cache__hal_1ga49ede922bdb9d9b6243a72e9a0049ecd" kindref="member">nrf_cache_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint32_t)p_reg<sp/>+<sp/>(uint32_t)task;</highlight></codeline>
<codeline lineno="895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_CACHE_HAS_STATUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__cache__hal_1gabee8421cea588033567777ca5a96d81f" kindref="member">nrf_cache_busy_check</ref>(NRF_CACHE_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="900"><highlight class="normal">{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CACHE_STATUS_READY_Msk)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;STATUS<sp/>&amp;<sp/>CACHE_STATUS_READY_Msk)<sp/>==</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHE_STATUS_READY_Busy<sp/>&lt;&lt;<sp/>CACHE_STATUS_READY_Pos);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;STATUS<sp/>&amp;<sp/>CACHE_STATUS_BUSY_Msk)<sp/>==</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CACHE_STATUS_BUSY_Busy<sp/>&lt;&lt;<sp/>CACHE_STATUS_BUSY_Pos);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal">}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="913"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal">}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_CACHE_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_cache.h"/>
  </compounddef>
</doxygen>
