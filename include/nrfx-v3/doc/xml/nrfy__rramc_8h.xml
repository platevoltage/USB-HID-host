<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrfy__rramc_8h" kind="file" language="C++">
    <compoundname>nrfy_rramc.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes refid="nrf__rramc_8h" local="no">hal/nrf_rramc.h</includes>
    <includedby refid="nrfx__rramc_8h" local="no">drivers/include/nrfx_rramc.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>haly/nrfy_rramc.h</label>
        <link refid="nrfy__rramc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrfy__rramc__config__t" prot="public">nrfy_rramc_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrfy__rramc_1gaaae60441c517528dbd0662d8487af734" prot="public" static="no">
        <name>NRFY_RRAMC_BYTES_IN_WORD</name>
        <initializer>4</initializer>
        <briefdescription>
<para>Value representing the number of bytes in a word. </para>
        </briefdescription>
        <detaileddescription>
<para>It is used in loops iterating over bytes contained in a word or in word-alignment checks. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="83" column="9" bodyfile="haly/nrfy_rramc.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfy__rramc_1ga5d873fc61f133d0530fd4a5b87210b31" prot="public" static="no">
        <name>NRFY_RRAMC_WORDS_IN_BUFER_LINE</name>
        <initializer>4</initializer>
        <briefdescription>
<para>Value representing the number of words in a buffer line. </para>
        </briefdescription>
        <detaileddescription>
<para>It is used in loops iterating over words contained in buffer lines. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="90" column="9" bodyfile="haly/nrfy_rramc.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfy__rramc_1ga9a997c0d1c0c088358f717b9c42610cd" prot="public" static="no">
        <name>NRFY_RRAMC_RRAM_BASE_ADDRESS</name>
        <initializer>NRF_MEMORY_FLASH_BASE</initializer>
        <briefdescription>
<para>Value representing resistive random access memory (RRAM) base address. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="93" column="9" bodyfile="haly/nrfy_rramc.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrfy__rramc_1gad31f089506257d7e13a8cec5e0b78bb8" prot="public" static="no">
        <name>NRFY_RRAMC_READY_NEXT_TIMEOUT_DEFAULT</name>
        <initializer>RRAMC_READYNEXTTIMEOUT_ResetValue</initializer>
        <briefdescription>
<para>Default value for waiting for a next write. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="96" column="9" bodyfile="haly/nrfy_rramc.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="nrfy__rramc_8h_1ac42436dd18a66592bd413d835cbd175e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void __nrfy_internal_rramc_event_enabled_clear</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t mask, nrf_rramc_event_t event)</argsstring>
        <name>__nrfy_internal_rramc_event_enabled_clear</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="625" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="625" bodyend="633" declfile="haly/nrfy_rramc.h" declline="44" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="nrfy__rramc_8h_1a4d44bb3bcb981a07db69f1eced004065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t __nrfy_internal_rramc_event_handle</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t mask, nrf_rramc_event_t event)</argsstring>
        <name>__nrfy_internal_rramc_event_handle</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="635" column="29" bodyfile="haly/nrfy_rramc.h" bodystart="635" bodyend="645" declfile="haly/nrfy_rramc.h" declline="48" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="nrfy__rramc_8h_1a97b9baa1e6ec1af08f731741367f8fed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t __nrfy_internal_rramc_events_process</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t mask)</argsstring>
        <name>__nrfy_internal_rramc_events_process</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="647" column="29" bodyfile="haly/nrfy_rramc.h" bodystart="647" bodyend="660" declfile="haly/nrfy_rramc.h" declline="52" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="nrfy__rramc_8h_1a767183ffa6f5eed319572ce5ef37b8db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void __nrfy_internal_rramc_config_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_config_t *p_config)</argsstring>
        <name>__nrfy_internal_rramc_config_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref> *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="662" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="662" bodyend="668" declfile="haly/nrfy_rramc.h" declline="55" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="nrfy__rramc_8h_1aeb512ea9f9e5161d9a3bcc968167d5b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void __nrfy_internal_rramc_config_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_config_t const *p_config)</argsstring>
        <name>__nrfy_internal_rramc_config_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="670" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="670" bodyend="679" declfile="haly/nrfy_rramc.h" declline="58" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="nrfy__rramc_8h_1ad3a2a18cabcd1129aecb6d2c31ace34f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void __nrfy_internal_rramc_byte_write</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t addr, uint8_t value)</argsstring>
        <name>__nrfy_internal_rramc_byte_write</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="681" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="681" bodyend="692" declfile="haly/nrfy_rramc.h" declline="61" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="nrfy__rramc_8h_1a13aa2302d3c025ecbb3acd6d439d0de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void __nrfy_internal_rramc_word_write</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t addr, uint32_t value)</argsstring>
        <name>__nrfy_internal_rramc_word_write</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="694" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="694" bodyend="705" declfile="haly/nrfy_rramc.h" declline="65" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="nrfy__rramc_8h_1aaeeaee85ca81a9d69d5d040f519f653e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool __nrfy_internal_rramc_is_otp_word_writable</definition>
        <argsstring>(uint32_t index)</argsstring>
        <name>__nrfy_internal_rramc_is_otp_word_writable</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="707" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="707" bodyend="717" declfile="haly/nrfy_rramc.h" declline="69" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga19c06143888395071f6c0933ded38de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_configure</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrfy_rramc_config_t const *p_config)</argsstring>
        <name>nrfy_rramc_configure</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrfy__rramc__config__t" kindref="compound">nrfy_rramc_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for configuring the RRAMC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of configuration of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="112" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="112" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga9167e32a8276595d32b3e9438ae9ad3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_int_init</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t mask, uint8_t irq_priority, bool enable)</argsstring>
        <name>nrfy_rramc_int_init</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>irq_priority</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Function for initializing the specified RRAMC interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be initialized. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">irq_priority</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt priority. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>True if interrupts associated with the event mask are to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="133" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="133" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga0cda186bb4b891aad89cbf058dc2629e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_int_uninit</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg)</argsstring>
        <name>nrfy_rramc_int_uninit</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for uninitializing the RRAMC interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="158" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="158" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga5b11c7ea48e5ee65a18242dd8e7c4ff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_rramc_events_process</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_rramc_events_process</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for processing the specified RRAMC events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of events to be processed, created by <ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of events that were generated and processed. To be checked against the result of <ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK()</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="173" column="29" bodyfile="haly/nrfy_rramc.h" bodystart="173" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga66bd5e7add685e6dbc0db2cae4c6e055" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_byte_write</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t address, uint8_t value)</argsstring>
        <name>nrfy_rramc_byte_write</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for writing a single byte to RRAM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Depending on the source of the code being executed, the CPU may be halted during the operation. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to where data is to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="192" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="192" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga2b778e799f5d223a1b5d743bd612863d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_bytes_write</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t address, void const *src, uint32_t num_bytes)</argsstring>
        <name>nrfy_rramc_bytes_write</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>void const *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Function for writing consecutive bytes to RRAM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Depending on the source of the code being executed, the CPU may be halted during the operation. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to where data is to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to be copied. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="220" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="220" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1gaa1eda0611bb72612d4bd6659e26be124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint8_t</type>
        <definition>NRFY_STATIC_INLINE uint8_t nrfy_rramc_byte_read</definition>
        <argsstring>(uint32_t address)</argsstring>
        <name>nrfy_rramc_byte_read</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for reading a byte from the RRAM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the byte to be read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value read from RRAM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="247" column="28" bodyfile="haly/nrfy_rramc.h" bodystart="247" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1gaa2abdd3d326c98f9c8d518652cc266b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_word_write</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t address, uint32_t value)</argsstring>
        <name>nrfy_rramc_word_write</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for writing a 32-bit word to RRAM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Depending on the source of the code being executed, the CPU may be halted during the operation. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to where data is to be written. Must be word-aligned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="266" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="266" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1gaff9ec5df1eddd8319decca185d55f99f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_words_write</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t address, void const *src, uint32_t num_words)</argsstring>
        <name>nrfy_rramc_words_write</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>void const *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_words</declname>
        </param>
        <briefdescription>
<para>Function for writing consecutive 32-bit words to RRAM. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Depending on the source of the code being executed, the CPU may be halted during the operation. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address to where data is to be written. Must be word-aligned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to data to be copied. Must be word-aligned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_words</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of words to be written. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="294" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="294" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga149407b06fe990d30edc1279b3de7ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_rramc_word_read</definition>
        <argsstring>(uint32_t address)</argsstring>
        <name>nrfy_rramc_word_read</name>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Function for reading a 32-bit word from the RRAM. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the word to be read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value read from RRAM. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="323" column="29" bodyfile="haly/nrfy_rramc.h" bodystart="323" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga185185cedabee28fd39c576b7fb0b98d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_buffer_read</definition>
        <argsstring>(void *dst, uint32_t address, uint32_t num_bytes)</argsstring>
        <name>nrfy_rramc_buffer_read</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>address</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Function for reading a given number of bytes from the RRAM into the specified buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to store the data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the first byte to be read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be read. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="338" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="338" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1gafc58ecc87cb385a47158bd0a90382fb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_rramc_otp_word_read</definition>
        <argsstring>(uint32_t index)</argsstring>
        <name>nrfy_rramc_otp_word_read</name>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for reading a word from the OTP in UICR. </para>
        </briefdescription>
        <detaileddescription>
<para>OTP is a region of the UICR present in some chips. This function must be used to read word data from this region since unaligned accesses are not available on the OTP RRAM area.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Address (index) in OTP table from which a word is to be read.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>contents at <computeroutput>index</computeroutput>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="358" column="29" bodyfile="haly/nrfy_rramc.h" bodystart="358" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga48c084c490fac5b38b9d2743452e81bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool nrfy_rramc_otp_word_write</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t index, uint32_t value)</argsstring>
        <name>nrfy_rramc_otp_word_write</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Function for writing a 32-bit word at index position to OTP region in UICR. </para>
        </briefdescription>
        <detaileddescription>
<para>The OTP is only able to write &apos;0&apos; to bits in the UICR that are erased (set to &apos;1&apos;). It cannot rewrite a bit back to &apos;1&apos;. This function checks if the value currently residing at the specified index can be transformed to the desired value without any &apos;0&apos; to &apos;1&apos; transitions. If yes, then perform the write operation.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Address (index) in OTP table to which a word it to be written. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to be written.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Word can be written into the specified OTP index address. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Word cannot be written into the specified OTP index address. Erase UICR or change index address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="387" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="387" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga2cc909a13bf9f39c150887953de11d0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_task_trigger</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_task_t task)</argsstring>
        <name>nrfy_rramc_task_trigger</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga489e48359c21e9aeab721abf8110252f" kindref="member">nrf_rramc_task_trigger</ref>  Function for activating the specified RRAMC task.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="420" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="420" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga4f51679fde6eaa07d36380397e33ffea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_rramc_task_address_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_task_t task)</argsstring>
        <name>nrfy_rramc_task_address_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1gabca757c359aa7a33adfcc6556f8c0fb0" kindref="member">nrf_rramc_task_address_get</ref>  Function for getting the address of the specified RRAMC task register.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>RRAMC task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="427" column="29" bodyfile="haly/nrfy_rramc.h" bodystart="427" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1gafe77eb5524dab3baddb6c95bf666196e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_event_clear</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_event_t event)</argsstring>
        <name>nrfy_rramc_event_clear</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga6a5a2e22bbd6b8d5af4c27fa64f1a9d8" kindref="member">nrf_rramc_event_clear</ref>  Function for clearing the specified RRAMC event.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral register structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="434" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="434" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga27b224a7c23ec00b20a5ffa694418022" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool nrfy_rramc_event_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_event_t event)</argsstring>
        <name>nrfy_rramc_event_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga1f57b36da161e1cf21c82aa3876efb77" kindref="member">nrf_rramc_event_check</ref>  Function for retrieving the state of the RRAMC event.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="441" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="441" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1gac565e284dec238c420da2500f1337ade" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_rramc_event_address_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_event_t event)</argsstring>
        <name>nrfy_rramc_event_address_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga3eb129f51c08e58c4cc381768eb60dc5" kindref="member">nrf_rramc_event_address_get</ref>  Function for getting the address of the specified RRAMC event register.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral register structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="451" column="29" bodyfile="haly/nrfy_rramc.h" bodystart="451" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga51695e35aff5ddc63cba1f42ddafa6a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_int_enable</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_rramc_int_enable</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga3f7f69bc71658a8215e67943284662f7" kindref="member">nrf_rramc_int_enable</ref>  Function for enabling the specified interrupts.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral register structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" kindref="member">nrf_rramc_int_mask_t</ref> values for bit masking.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="458" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="458" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga36eee26b3abb37c8afe4f39ff2ba6123" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_int_disable</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_rramc_int_disable</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga02dcfb8913610a45e1f11db523e921d8" kindref="member">nrf_rramc_int_disable</ref>  Function for disabling the specified interrupts.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the peripheral register structure. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" kindref="member">nrf_rramc_int_mask_t</ref> values for bit masking.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="465" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="465" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1gab0a4a38d509722c7936b4b7f1a67ab65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_rramc_int_enable_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrfy_rramc_int_enable_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga5c5b504644d49c61de9703237c6d25ee" kindref="member">nrf_rramc_int_enable_check</ref>  Function for checking if the specified interrupts are enabled.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__rramc__hal_1ga95ceba960c4e94ed070157dee96947cb" kindref="member">nrf_rramc_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="472" column="29" bodyfile="haly/nrfy_rramc.h" bodystart="472" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1gad00e3c2620e742d73011c7483e252dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_subscribe_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_task_t task, uint8_t channel)</argsstring>
        <name>nrfy_rramc_subscribe_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga7ae9f5e904859c825e76cd71a1bdccf9" kindref="member">nrf_rramc_subscribe_set</ref>  Function for setting the subscribe configuration for a wakeup RRAMC task.  </para>
</simplesect>
</para>
<para><simplesect kind="note"><para>Not every task has its corresponding subscribe register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="482" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="482" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga083503310d11fef38501bf26ac669d3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_subscribe_clear</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_task_t task)</argsstring>
        <name>nrfy_rramc_subscribe_clear</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga572ef364bcf9cb3953a045a5b58fb749" kindref="member">nrf_rramc_subscribe_clear</ref>  Function for clearing the subscribe configuration for a wakeup RRAMC task.  </para>
</simplesect>
</para>
<para><simplesect kind="note"><para>Not every task has its corresponding subscribe register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="491" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="491" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga574f5472f1aa9660d2d1c43f43a650be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_publish_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_event_t event, uint8_t channel)</argsstring>
        <name>nrfy_rramc_publish_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1gacc11dfa1e7e8921b6e21a1bb9f7cf1d9" kindref="member">nrf_rramc_publish_set</ref>  Function for setting the publish configuration for a wokenup RRAMC event.  </para>
</simplesect>
</para>
<para><simplesect kind="note"><para>Not every event has its corresponding publish register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="498" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="498" bodyend="504"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1gab885047cdee855783027cb053749a784" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_publish_clear</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_event_t event)</argsstring>
        <name>nrfy_rramc_publish_clear</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga2aca81a5db0d6d818307cd50f825bbf1" kindref="member">nrf_rramc_publish_clear</ref>  Function for clearing the publish configuration for a wokenup RRAMC event.  </para>
</simplesect>
</para>
<para><simplesect kind="note"><para>Not every event has its corresponding publish register. Refer to the Product Specification for more information.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="507" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="507" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga417e2945722e3f32594432c53378047f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool nrfy_rramc_ready_check</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg)</argsstring>
        <name>nrfy_rramc_ready_check</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1gae3dd53c1f48d343e31268ab9fe3102d5" kindref="member">nrf_rramc_ready_check</ref>  Function for checking current RRAMC operation status.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Current operation is completed, and RRAMC is ready. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>RRAMC is busy.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="515" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="515" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1gac634ab6f6fa10e7e0f1a051f0c7436f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool nrfy_rramc_write_ready_check</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg)</argsstring>
        <name>nrfy_rramc_write_ready_check</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga3334d9ee37c8e0f156f1cddc9aa8f438" kindref="member">nrf_rramc_write_ready_check</ref>  Function for checking whether RRAMC is ready to accept a new write operation.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>RRAMC is ready to accept a new write operation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>RRAMC cannot accept any write operation now.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="524" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="524" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga3bed8dedd9da88b44c989bf8b790aac0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE uint32_t</type>
        <definition>NRFY_STATIC_INLINE uint32_t nrfy_rramc_error_access_addr_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrfy_rramc_error_access_addr_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga7b3734fcb2edf3e513d48328718fe5fe" kindref="member">nrf_rramc_error_access_addr_get</ref>  Fuction for checking the address of the first access error.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Access error address.   </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="533" column="29" bodyfile="haly/nrfy_rramc.h" bodystart="533" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga747a3316d85d8a56693be88314afcf85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool nrfy_rramc_empty_buffer_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrfy_rramc_empty_buffer_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1gafad2c8c47ca125eec3724f54c62b891f" kindref="member">nrf_rramc_empty_buffer_check</ref>  Function for checking whether the internal write-buffer has been committed to RRAM and is now empty.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal write-buffer is empty and has no content that needs to be commited. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The internal write-buffer has data that needs to be committed.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="542" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="542" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1gaa9da502ddb63209cf1bb7f67368f92a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_config_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_config_t *p_config)</argsstring>
        <name>nrfy_rramc_config_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref> *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga600344f5d63d15447e2a49bd1bc87b91" kindref="member">nrf_rramc_config_get</ref>  Function for getting the RRAMC peripheral configuration.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with RRAMC configuration data.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="551" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="551" bodyend="555"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1gab392a12b6967d3941df3da97563e7b6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_config_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_config_t const *p_config)</argsstring>
        <name>nrfy_rramc_config_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga4aa89554145d84b6df4178a36bc46e99" kindref="member">nrf_rramc_config_set</ref>  Function for setting the RRAMC peripheral configuration.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure with configuration to be set.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="558" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="558" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga850f0dda759800de54d93ae5c08eadcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_ready_next_timeout_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_ready_next_timeout_t *p_config)</argsstring>
        <name>nrfy_rramc_ready_next_timeout_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref> *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga04efa9e62632c8b8dff3d62382d448d6" kindref="member">nrf_rramc_ready_next_timeout_get</ref>  Function for getting preload timeout value for waiting for a next write.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with information about preload timeout value.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="565" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="565" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga03cde39cd9e261db8809c94eedb5c167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_ready_next_timeout_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_ready_next_timeout_t const *p_config)</argsstring>
        <name>nrfy_rramc_ready_next_timeout_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga66be625abc1ee4292bd40e299dbe4ac7" kindref="member">nrf_rramc_ready_next_timeout_set</ref>  Function for setting preload timeout value for waiting for a next write.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure filled with information about$ preload timeout value.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="575" column="1" bodyfile="haly/nrfy_rramc.h" bodystart="575" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1gaa0c37843b5ac4166bf3ab282f5279b31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_power_config_get</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg, nrf_rramc_power_t *p_config)</argsstring>
        <name>nrfy_rramc_power_config_get</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref> *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga0d04aaa18a1463ca07cdc2292a7d38f2" kindref="member">nrf_rramc_power_config_get</ref>  Function for getting the RRAMC power configuration.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure to be filled with information about power configuration.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="583" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="583" bodyend="589"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga07232ed7ebf9e34f839700d505c4dc61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_power_config_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg, nrf_rramc_power_t const *p_config)</argsstring>
        <name>nrfy_rramc_power_config_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1ga5aa5b43d22070041f92b7396758ed8a9" kindref="member">nrf_rramc_power_config_set</ref>  Function for setting the RRAMC power configuration.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure filled with information about power configuration.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="592" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="592" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga7f2a25496830677514bd8c4bbe7ce04a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE bool</type>
        <definition>NRFY_STATIC_INLINE bool nrfy_rramc_erase_all_check</definition>
        <argsstring>(NRF_RRAMC_Type const *p_reg)</argsstring>
        <name>nrfy_rramc_erase_all_check</name>
        <param>
          <type>NRF_RRAMC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1gaad0e37d917d80c370ffbc37d22dfe6c8" kindref="member">nrf_rramc_erase_all_check</ref>  Function for checking if the erasing operation of the whole RRAM main block has been started.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Erase of chip started. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>No operation.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="600" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="600" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="group__nrfy__rramc_1ga0bb5185bd0839a14a7022f985664387b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRFY_STATIC_INLINE void</type>
        <definition>NRFY_STATIC_INLINE void nrfy_rramc_erase_all_set</definition>
        <argsstring>(NRF_RRAMC_Type *p_reg)</argsstring>
        <name>nrfy_rramc_erase_all_set</name>
        <param>
          <type>NRF_RRAMC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__nrf__rramc__hal_1gabd91f162fa4e8bb5800e5ad46a10ac2d" kindref="member">nrf_rramc_erase_all_set</ref>  Function for erasing whole RRAM main block, that includes the SICR and the UICR.  </para>
</simplesect>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.   </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="haly/nrfy_rramc.h" line="609" column="25" bodyfile="haly/nrfy_rramc.h" bodystart="609" bodyend="621"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRFY_RRAMC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFY_RRAMC_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hal/nrf_rramc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__nrfy_internal_rramc_event_enabled_clear(NRF_RRAMC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/>__nrfy_internal_rramc_event_handle(NRF_RRAMC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/>__nrfy_internal_rramc_events_process(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__nrfy_internal_rramc_config_get(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>*<sp/><sp/><sp/>p_config);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__nrfy_internal_rramc_config_set(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__nrfy_internal_rramc_byte_write(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__nrfy_internal_rramc_word_write(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__nrfy_internal_rramc_is_otp_word_writable(uint32_t<sp/>index);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrfy_rramc<sp/>RRAMC<sp/>HALY</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_rramc</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>with<sp/>cache<sp/>and<sp/>barrier<sp/>support<sp/>for<sp/>managing<sp/>the<sp/>RRAMC<sp/>peripheral.</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="78"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Value<sp/>representing<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>in<sp/>a<sp/>word.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>It<sp/>is<sp/>used<sp/>in<sp/>loops<sp/>iterating<sp/>over<sp/>bytes<sp/>contained<sp/>in<sp/>a<sp/>word<sp/>or<sp/>in<sp/>word-alignment<sp/>checks.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFY_RRAMC_BYTES_IN_WORD<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Value<sp/>representing<sp/>the<sp/>number<sp/>of<sp/>words<sp/>in<sp/>a<sp/>buffer<sp/>line.</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>It<sp/>is<sp/>used<sp/>in<sp/>loops<sp/>iterating<sp/>over<sp/>words<sp/>contained<sp/>in<sp/>buffer<sp/>lines.</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFY_RRAMC_WORDS_IN_BUFER_LINE<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">/**<sp/>@brief<sp/>Value<sp/>representing<sp/>resistive<sp/>random<sp/>access<sp/>memory<sp/>(RRAM)<sp/>base<sp/>address.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFY_RRAMC_RRAM_BASE_ADDRESS<sp/>NRF_MEMORY_FLASH_BASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="95"><highlight class="comment">/**<sp/>@brief<sp/>Default<sp/>value<sp/>for<sp/>waiting<sp/>for<sp/>a<sp/>next<sp/>write.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRFY_RRAMC_READY_NEXT_TIMEOUT_DEFAULT<sp/>RRAMC_READYNEXTTIMEOUT_ResetValue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="98"><highlight class="comment">/**<sp/>@brief<sp/>RRAMC<sp/>configuration<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="structnrfy__rramc__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Mode<sp/>and<sp/>buffer<sp/>size<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref><sp/>preload_timeout;<sp/></highlight><highlight class="comment">///&lt;<sp/>Preload<sp/>timeout<sp/>value<sp/>for<sp/>waiting<sp/>for<sp/>a<sp/>next<sp/>write.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>RRAMC<sp/>power<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal">}<sp/><ref refid="structnrfy__rramc__config__t" kindref="compound">nrfy_rramc_config_t</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="106"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>RRAMC.</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_config<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>configuration<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga19c06143888395071f6c0933ded38de6" kindref="member">nrfy_rramc_configure</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrfy__rramc__config__t" kindref="compound">nrfy_rramc_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga4aa89554145d84b6df4178a36bc46e99" kindref="member">nrf_rramc_config_set</ref>(p_reg,<sp/>&amp;p_config-&gt;<ref refid="structnrfy__rramc__config__t_1a0b7ed0323a1c9e182a4cb043637c02f1" kindref="member">config</ref>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga66be625abc1ee4292bd40e299dbe4ac7" kindref="member">nrf_rramc_ready_next_timeout_set</ref>(p_reg,<sp/>&amp;p_config-&gt;<ref refid="structnrfy__rramc__config__t_1a8c977fbc8e286e5c8f64bb60ef7cd3ae" kindref="member">preload_timeout</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga5aa5b43d22070041f92b7396758ed8a9" kindref="member">nrf_rramc_power_config_set</ref>(p_reg,<sp/>&amp;p_config-&gt;<ref refid="structnrfy__rramc__config__t_1a4f1c454f02155658476be11b73d942db" kindref="member">power</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="group__nrf__rramc__hal_1ga3334d9ee37c8e0f156f1cddc9aa8f438" kindref="member">nrf_rramc_write_ready_check</ref>(p_reg))</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="125"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>the<sp/>specified<sp/>RRAMC<sp/>interrupts.</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>initialized.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>irq_priority<sp/>Interrupt<sp/>priority.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>enable<sp/><sp/><sp/><sp/><sp/><sp/><sp/>True<sp/>if<sp/>interrupts<sp/>associated<sp/>with<sp/>the<sp/>event<sp/>mask<sp/>are<sp/>to<sp/>be<sp/>enabled,<sp/>false<sp/>otherwise.</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga9167e32a8276595d32b3e9438ae9ad3a" kindref="member">nrfy_rramc_int_init</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>irq_priority,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enable)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_event_enabled_clear(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45dda0ab2fc8a267c9cacfd4d4ef9a31fe968" kindref="member">NRF_RRAMC_EVENT_ERROR_ACCESS</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_event_enabled_clear(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45ddaa50022ae45e9aeccf043e9c25b0dc510" kindref="member">NRF_RRAMC_EVENT_READY</ref>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_event_enabled_clear(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45dda883352a74d9ebfc2a1868e7ffa080875" kindref="member">NRF_RRAMC_EVENT_READY_NEXT</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_event_enabled_clear(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45ddadb6b5788f971630e4599e9e0ff366a36" kindref="member">NRF_RRAMC_EVENT_WOKENUP</ref>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga4182ca2864cca23d945b728e3dddfd7b" kindref="member">NRFX_IRQ_PRIORITY_SET</ref>(<ref refid="group__nrfx__common_1ga99320a533545d814f480ee108a6b61ce" kindref="member">nrfx_get_irq_number</ref>(p_reg),<sp/>irq_priority);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1gab330b41ecdcfb8b13a929b0c74084293" kindref="member">NRFX_IRQ_ENABLE</ref>(<ref refid="group__nrfx__common_1ga99320a533545d814f480ee108a6b61ce" kindref="member">nrfx_get_irq_number</ref>(p_reg));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga3f7f69bc71658a8215e67943284662f7" kindref="member">nrf_rramc_int_enable</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="153"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>uninitializing<sp/>the<sp/>RRAMC<sp/>interrupts.</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga0cda186bb4b891aad89cbf058dc2629e" kindref="member">nrfy_rramc_int_uninit</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga5837b0b0518c6e7a2c6ce86bd96d2148" kindref="member">NRFX_IRQ_DISABLE</ref>(<ref refid="group__nrfx__common_1ga99320a533545d814f480ee108a6b61ce" kindref="member">nrfx_get_irq_number</ref>(p_reg));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>processing<sp/>the<sp/>specified<sp/>RRAMC<sp/>events.</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>events<sp/>to<sp/>be<sp/>processed,<sp/>created<sp/>by<sp/>@ref<sp/>NRFY_EVENT_TO_INT_BITMASK().</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>events<sp/>that<sp/>were<sp/>generated<sp/>and<sp/>processed.</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>To<sp/>be<sp/>checked<sp/>against<sp/>the<sp/>result<sp/>of<sp/>@ref<sp/>NRFY_EVENT_TO_INT_BITMASK().</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__rramc_1ga5b11c7ea48e5ee65a18242dd8e7c4ff5" kindref="member">nrfy_rramc_events_process</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>evt_mask<sp/>=<sp/>__nrfy_internal_rramc_events_process(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evt_mask;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="181"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>writing<sp/>a<sp/>single<sp/>byte<sp/>to<sp/>RRAM.</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>@note<sp/>Depending<sp/>on<sp/>the<sp/>source<sp/>of<sp/>the<sp/>code<sp/>being<sp/>executed,</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>CPU<sp/>may<sp/>be<sp/>halted<sp/>during<sp/>the<sp/>operation.</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Refer<sp/>to<sp/>the<sp/>Product<sp/>Specification<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Address<sp/>to<sp/>where<sp/>data<sp/>is<sp/>to<sp/>be<sp/>written.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/><sp/>Value<sp/>to<sp/>be<sp/>written.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga66bd5e7add685e6dbc0db2cae4c6e055" kindref="member">nrfy_rramc_byte_write</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>rramc_config;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>prev_rramc_config;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_get(p_reg,<sp/>&amp;rramc_config);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_rramc_config<sp/>=<sp/>rramc_config;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>rramc_config.<ref refid="structnrf__rramc__config__t_1a1a787a1227f6582185a26877cee0fa43" kindref="member">mode_write</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_set(p_reg,<sp/>&amp;rramc_config);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_byte_write(p_reg,<sp/>address,<sp/>value);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_set(p_reg,<sp/>&amp;prev_rramc_config);</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="208"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>writing<sp/>consecutive<sp/>bytes<sp/>to<sp/>RRAM.</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>@note<sp/>Depending<sp/>on<sp/>the<sp/>source<sp/>of<sp/>the<sp/>code<sp/>being<sp/>executed,</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>CPU<sp/>may<sp/>be<sp/>halted<sp/>during<sp/>the<sp/>operation.</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Refer<sp/>to<sp/>the<sp/>Product<sp/>Specification<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/><sp/><sp/>Address<sp/>to<sp/>where<sp/>data<sp/>is<sp/>to<sp/>be<sp/>written.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>src<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>data<sp/>to<sp/>be<sp/>copied.</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>num_bytes<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>be<sp/>written.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga2b778e799f5d223a1b5d743bd612863d" kindref="member">nrfy_rramc_bytes_write</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/>src,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_bytes)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>rramc_config;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>prev_rramc_config;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_get(p_reg,<sp/>&amp;rramc_config);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_rramc_config<sp/>=<sp/>rramc_config;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>rramc_config.<ref refid="structnrf__rramc__config__t_1a1a787a1227f6582185a26877cee0fa43" kindref="member">mode_write</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_set(p_reg,<sp/>&amp;rramc_config);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_bytes;<sp/>i++)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_byte_write(p_reg,<sp/>address<sp/>+<sp/>i,<sp/>((uint8_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)src)[i]);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_set(p_reg,<sp/>&amp;prev_rramc_config);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="240"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>a<sp/>byte<sp/>from<sp/>the<sp/>RRAM.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Address<sp/>of<sp/>the<sp/>byte<sp/>to<sp/>be<sp/>read.</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>@return<sp/>Value<sp/>read<sp/>from<sp/>RRAM.</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint8_t<sp/><ref refid="group__nrfy__rramc_1gaa1eda0611bb72612d4bd6659e26be124" kindref="member">nrfy_rramc_byte_read</ref>(uint32_t<sp/>address)</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>=<sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*)address;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>byte;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="255"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>writing<sp/>a<sp/>32-bit<sp/>word<sp/>to<sp/>RRAM.</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>*<sp/>@note<sp/>Depending<sp/>on<sp/>the<sp/>source<sp/>of<sp/>the<sp/>code<sp/>being<sp/>executed,</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>CPU<sp/>may<sp/>be<sp/>halted<sp/>during<sp/>the<sp/>operation.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Refer<sp/>to<sp/>the<sp/>Product<sp/>Specification<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Address<sp/>to<sp/>where<sp/>data<sp/>is<sp/>to<sp/>be<sp/>written.<sp/>Must<sp/>be<sp/>word-aligned.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/><sp/><sp/>Value<sp/>to<sp/>be<sp/>written.</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1gaa2abdd3d326c98f9c8d518652cc266b8" kindref="member">nrfy_rramc_word_write</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address,</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>rramc_config;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>prev_rramc_config;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_get(p_reg,<sp/>&amp;rramc_config);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_rramc_config<sp/>=<sp/>rramc_config;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>rramc_config.<ref refid="structnrf__rramc__config__t_1a1a787a1227f6582185a26877cee0fa43" kindref="member">mode_write</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_set(p_reg,<sp/>&amp;rramc_config);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_word_write(p_reg,<sp/>address,<sp/>value);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_set(p_reg,<sp/>&amp;prev_rramc_config);</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="282"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>writing<sp/>consecutive<sp/>32-bit<sp/>words<sp/>to<sp/>RRAM.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="285"><highlight class="comment"><sp/>*<sp/>@note<sp/>Depending<sp/>on<sp/>the<sp/>source<sp/>of<sp/>the<sp/>code<sp/>being<sp/>executed,</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>CPU<sp/>may<sp/>be<sp/>halted<sp/>during<sp/>the<sp/>operation.</highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Refer<sp/>to<sp/>the<sp/>Product<sp/>Specification<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/><sp/><sp/>Address<sp/>to<sp/>where<sp/>data<sp/>is<sp/>to<sp/>be<sp/>written.<sp/>Must<sp/>be<sp/>word-aligned.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>src<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>data<sp/>to<sp/>be<sp/>copied.<sp/>Must<sp/>be<sp/>word-aligned.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>num_words<sp/>Number<sp/>of<sp/>words<sp/>to<sp/>be<sp/>written.</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1gaff9ec5df1eddd8319decca185d55f99f" kindref="member">nrfy_rramc_words_write</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/>src,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_words)</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>rramc_config;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>prev_rramc_config;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_get(p_reg,<sp/>&amp;rramc_config);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_rramc_config<sp/>=<sp/>rramc_config;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>rramc_config.<ref refid="structnrf__rramc__config__t_1a1a787a1227f6582185a26877cee0fa43" kindref="member">mode_write</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_set(p_reg,<sp/>&amp;rramc_config);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_words;<sp/>i++)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_word_write(p_reg,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>address<sp/>+<sp/>(<ref refid="group__nrfy__rramc_1gaaae60441c517528dbd0662d8487af734" kindref="member">NRFY_RRAMC_BYTES_IN_WORD</ref><sp/>*<sp/>i),</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*)src)[i]);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_set(p_reg,<sp/>&amp;prev_rramc_config);</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="316"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>a<sp/>32-bit<sp/>word<sp/>from<sp/>the<sp/>RRAM.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>address<sp/>Address<sp/>of<sp/>the<sp/>word<sp/>to<sp/>be<sp/>read.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>@return<sp/>Value<sp/>read<sp/>from<sp/>RRAM.</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__rramc_1ga149407b06fe990d30edc1279b3de7ede" kindref="member">nrfy_rramc_word_read</ref>(uint32_t<sp/>address)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>word<sp/>=<sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)address;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>word;</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="331"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>a<sp/>given<sp/>number<sp/>of<sp/>bytes<sp/>from<sp/>the<sp/>RRAM<sp/>into<sp/>the<sp/>specified<sp/>buffer.</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>@param[out]<sp/>dst<sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>buffer<sp/>to<sp/>store<sp/>the<sp/>data.</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>address<sp/><sp/><sp/>Address<sp/>of<sp/>the<sp/>first<sp/>byte<sp/>to<sp/>be<sp/>read.</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/><sp/>num_bytes<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>be<sp/>read.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga185185cedabee28fd39c576b7fb0b98d" kindref="member">nrfy_rramc_buffer_read</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/>dst,</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>address,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bytes)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dst,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)address,<sp/>num_bytes);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="347"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>reading<sp/>a<sp/>word<sp/>from<sp/>the<sp/>OTP<sp/>in<sp/>UICR.</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>OTP<sp/>is<sp/>a<sp/>region<sp/>of<sp/>the<sp/>UICR<sp/>present<sp/>in<sp/>some<sp/>chips.<sp/>This<sp/>function<sp/>must<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>to<sp/>read<sp/>word<sp/>data<sp/>from<sp/>this<sp/>region<sp/>since<sp/>unaligned<sp/>accesses<sp/>are<sp/>not</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>available<sp/>on<sp/>the<sp/>OTP<sp/>RRAM<sp/>area.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Address<sp/>(index)<sp/>in<sp/>OTP<sp/>table<sp/>from<sp/>which<sp/>a<sp/>word<sp/>is<sp/>to<sp/>be<sp/>read.</highlight></codeline>
<codeline lineno="355"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>@retval<sp/>The<sp/>contents<sp/>at<sp/>@p<sp/>index.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__rramc_1gafc58ecc87cb385a47158bd0a90382fb3" kindref="member">nrfy_rramc_otp_word_read</ref>(uint32_t<sp/>index)</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/>UICR_OTP_MaxCount);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_TRUSTZONE_NONSECURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>val32<sp/>=<sp/>NRF_UICR-&gt;OTP[index];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val32;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0xFFFFFFFF;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="371"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>writing<sp/>a<sp/>32-bit<sp/>word<sp/>at<sp/>index<sp/>position<sp/>to<sp/>OTP<sp/>region<sp/>in<sp/>UICR.</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*<sp/>The<sp/>OTP<sp/>is<sp/>only<sp/>able<sp/>to<sp/>write<sp/>&apos;0&apos;<sp/>to<sp/>bits<sp/>in<sp/>the<sp/>UICR<sp/>that<sp/>are<sp/>erased<sp/>(set<sp/>to<sp/>&apos;1&apos;).</highlight></codeline>
<codeline lineno="375"><highlight class="comment"><sp/>*<sp/>It<sp/>cannot<sp/>rewrite<sp/>a<sp/>bit<sp/>back<sp/>to<sp/>&apos;1&apos;.<sp/>This<sp/>function<sp/>checks<sp/>if<sp/>the<sp/>value<sp/>currently</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>residing<sp/>at<sp/>the<sp/>specified<sp/>index<sp/>can<sp/>be<sp/>transformed<sp/>to<sp/>the<sp/>desired<sp/>value</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/>without<sp/>any<sp/>&apos;0&apos;<sp/>to<sp/>&apos;1&apos;<sp/>transitions.<sp/>If<sp/>yes,<sp/>then<sp/>perform<sp/>the<sp/>write<sp/>operation.</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Address<sp/>(index)<sp/>in<sp/>OTP<sp/>table<sp/>to<sp/>which<sp/>a<sp/>word<sp/>it<sp/>to<sp/>be<sp/>written.</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>value<sp/>Value<sp/>to<sp/>be<sp/>written.</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>Word<sp/>can<sp/>be<sp/>written<sp/>into<sp/>the<sp/>specified<sp/>OTP<sp/>index<sp/>address.</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>Word<sp/>cannot<sp/>be<sp/>written<sp/>into<sp/>the<sp/>specified<sp/>OTP<sp/>index<sp/>address.</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Erase<sp/>UICR<sp/>or<sp/>change<sp/>index<sp/>address.</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga48c084c490fac5b38b9d2743452e81bf" kindref="member">nrfy_rramc_otp_word_write</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/>UICR_OTP_MaxCount);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_TRUSTZONE_NONSECURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!__nrfy_internal_rramc_is_otp_word_writable(index))</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>rramc_config;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>prev_rramc_config;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_get(p_reg,<sp/>&amp;rramc_config);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_rramc_config<sp/>=<sp/>rramc_config;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>rramc_config.<ref refid="structnrf__rramc__config__t_1a1a787a1227f6582185a26877cee0fa43" kindref="member">mode_write</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_set(p_reg,<sp/>&amp;rramc_config);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_UICR-&gt;OTP[index]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_set(p_reg,<sp/>&amp;prev_rramc_config);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)index;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)value;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="419"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_task_trigger}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga2cc909a13bf9f39c150887953de11d0e" kindref="member">nrfy_rramc_task_trigger</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="421"><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga489e48359c21e9aeab721abf8110252f" kindref="member">nrf_rramc_task_trigger</ref>(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="426"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_task_address_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__rramc_1ga4f51679fde6eaa07d36380397e33ffea" kindref="member">nrfy_rramc_task_address_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1gabca757c359aa7a33adfcc6556f8c0fb0" kindref="member">nrf_rramc_task_address_get</ref>(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="433"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_event_clear}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1gafe77eb5524dab3baddb6c95bf666196e" kindref="member">nrfy_rramc_event_clear</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga6a5a2e22bbd6b8d5af4c27fa64f1a9d8" kindref="member">nrf_rramc_event_clear</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="440"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_event_check}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga27b224a7c23ec00b20a5ffa694418022" kindref="member">nrfy_rramc_event_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check<sp/>=<sp/><ref refid="group__nrf__rramc__hal_1ga1f57b36da161e1cf21c82aa3876efb77" kindref="member">nrf_rramc_event_check</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>check;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="450"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_event_address_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__rramc_1gac565e284dec238c420da2500f1337ade" kindref="member">nrfy_rramc_event_address_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrf__rramc__hal_1ga3eb129f51c08e58c4cc381768eb60dc5" kindref="member">nrf_rramc_event_address_get</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="457"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_int_enable}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga51695e35aff5ddc63cba1f42ddafa6a9" kindref="member">nrfy_rramc_int_enable</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="459"><highlight class="normal">{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga3f7f69bc71658a8215e67943284662f7" kindref="member">nrf_rramc_int_enable</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="464"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_int_disable}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga36eee26b3abb37c8afe4f39ff2ba6123" kindref="member">nrfy_rramc_int_disable</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga02dcfb8913610a45e1f11db523e921d8" kindref="member">nrf_rramc_int_disable</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="471"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_int_enable_check}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__rramc_1gab0a4a38d509722c7936b4b7f1a67ab65" kindref="member">nrfy_rramc_int_enable_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="473"><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_rw();</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>check<sp/>=<sp/><ref refid="group__nrf__rramc__hal_1ga5c5b504644d49c61de9703237c6d25ee" kindref="member">nrf_rramc_int_enable_check</ref>(p_reg,<sp/>mask);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>check;</highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="481"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_subscribe_set}<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1gad00e3c2620e742d73011c7483e252dcc" kindref="member">nrfy_rramc_subscribe_set</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga7ae9f5e904859c825e76cd71a1bdccf9" kindref="member">nrf_rramc_subscribe_set</ref>(p_reg,<sp/>task,<sp/>channel);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="490"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_subscribe_clear}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga083503310d11fef38501bf26ac669d3f" kindref="member">nrfy_rramc_subscribe_clear</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1gadf80c0390d89b481d76b4f348b147cc7" kindref="member">nrf_rramc_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga572ef364bcf9cb3953a045a5b58fb749" kindref="member">nrf_rramc_subscribe_clear</ref>(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="497"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_publish_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga574f5472f1aa9660d2d1c43f43a650be" kindref="member">nrfy_rramc_publish_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="501"><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gacc11dfa1e7e8921b6e21a1bb9f7cf1d9" kindref="member">nrf_rramc_publish_set</ref>(p_reg,<sp/>event,<sp/>channel);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="506"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_publish_clear}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1gab885047cdee855783027cb053749a784" kindref="member">nrfy_rramc_publish_clear</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/>p_reg,<sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga2aca81a5db0d6d818307cd50f825bbf1" kindref="member">nrf_rramc_publish_clear</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="514"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_ready_check}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga417e2945722e3f32594432c53378047f" kindref="member">nrfy_rramc_ready_check</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check<sp/>=<sp/><ref refid="group__nrf__rramc__hal_1gae3dd53c1f48d343e31268ab9fe3102d5" kindref="member">nrf_rramc_ready_check</ref>(p_reg);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>check;</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="523"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_write_ready_check}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1gac634ab6f6fa10e7e0f1a051f0c7436f1" kindref="member">nrfy_rramc_write_ready_check</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check<sp/>=<sp/><ref refid="group__nrf__rramc__hal_1ga3334d9ee37c8e0f156f1cddc9aa8f438" kindref="member">nrf_rramc_write_ready_check</ref>(p_reg);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>check;</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="532"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_error_access_addr_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrfy__rramc_1ga3bed8dedd9da88b44c989bf8b790aac0" kindref="member">nrfy_rramc_error_access_addr_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="534"><highlight class="normal">{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>error_addr<sp/>=<sp/><ref refid="group__nrf__rramc__hal_1ga7b3734fcb2edf3e513d48328718fe5fe" kindref="member">nrf_rramc_error_access_addr_get</ref>(p_reg);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error_addr;</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="541"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_empty_buffer_check}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga747a3316d85d8a56693be88314afcf85" kindref="member">nrfy_rramc_empty_buffer_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check<sp/>=<sp/><ref refid="group__nrf__rramc__hal_1gafad2c8c47ca125eec3724f54c62b891f" kindref="member">nrf_rramc_empty_buffer_check</ref>(p_reg);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>check;</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="550"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_config_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1gaa9da502ddb63209cf1bb7f67368f92a0" kindref="member">nrfy_rramc_config_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>*<sp/><sp/><sp/>p_config)</highlight></codeline>
<codeline lineno="553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_get(p_reg,<sp/>p_config);</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="557"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_config_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1gab392a12b6967d3941df3da97563e7b6a" kindref="member">nrfy_rramc_config_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_set(p_reg,<sp/>p_config);</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="564"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_ready_next_timeout_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga850f0dda759800de54d93ae5c08eadcb" kindref="member">nrfy_rramc_ready_next_timeout_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="567"><highlight class="normal">{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga04efa9e62632c8b8dff3d62382d448d6" kindref="member">nrf_rramc_ready_next_timeout_get</ref>(p_reg,<sp/>p_config);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="573"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_ready_next_timeout_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><ref refid="group__nrfy__rramc_1ga03cde39cd9e261db8809c94eedb5c167" kindref="member">nrfy_rramc_ready_next_timeout_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__ready__next__timeout__t" kindref="compound">nrf_rramc_ready_next_timeout_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga66be625abc1ee4292bd40e299dbe4ac7" kindref="member">nrf_rramc_ready_next_timeout_set</ref>(p_reg,<sp/>p_config);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="582"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_power_config_get}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1gaa0c37843b5ac4166bf3ab282f5279b31" kindref="member">nrfy_rramc_power_config_get</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref><sp/>*<sp/><sp/><sp/><sp/>p_config)</highlight></codeline>
<codeline lineno="585"><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga0d04aaa18a1463ca07cdc2292a7d38f2" kindref="member">nrf_rramc_power_config_get</ref>(p_reg,<sp/>p_config);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="591"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_power_config_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga07232ed7ebf9e34f839700d505c4dc61" kindref="member">nrfy_rramc_power_config_set</ref>(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__power__t" kindref="compound">nrf_rramc_power_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="594"><highlight class="normal">{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga5aa5b43d22070041f92b7396758ed8a9" kindref="member">nrf_rramc_power_config_set</ref>(p_reg,<sp/>p_config);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="599"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_erase_all_check}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga7f2a25496830677514bd8c4bbe7ce04a" kindref="member">nrfy_rramc_erase_all_check</ref>(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check<sp/>=<sp/><ref refid="group__nrf__rramc__hal_1gaad0e37d917d80c370ffbc37d22dfe6c8" kindref="member">nrf_rramc_erase_all_check</ref>(p_reg);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>check;</highlight></codeline>
<codeline lineno="606"><highlight class="normal">}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="608"><highlight class="comment">/**<sp/>@refhal{nrf_rramc_erase_all_set}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__rramc_1ga0bb5185bd0839a14a7022f985664387b" kindref="member">nrfy_rramc_erase_all_set</ref>(NRF_RRAMC_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="610"><highlight class="normal">{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>rramc_config;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>prev_rramc_config;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_get(p_reg,<sp/>&amp;rramc_config);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>prev_rramc_config<sp/>=<sp/>rramc_config;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>rramc_config.<ref refid="structnrf__rramc__config__t_1a1a787a1227f6582185a26877cee0fa43" kindref="member">mode_write</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_set(p_reg,<sp/>&amp;rramc_config);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1gabd91f162fa4e8bb5800e5ad46a10ac2d" kindref="member">nrf_rramc_erase_all_set</ref>(p_reg);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>__nrfy_internal_rramc_config_set(p_reg,<sp/>&amp;prev_rramc_config);</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="623"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__nrfy_internal_rramc_event_enabled_clear(NRF_RRAMC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask,</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="628"><highlight class="normal">{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mask<sp/>&amp;<sp/><ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK</ref>(event))</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga6a5a2e22bbd6b8d5af4c27fa64f1a9d8" kindref="member">nrf_rramc_event_clear</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/>__nrfy_internal_rramc_event_handle(NRF_RRAMC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask,</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga12273d5b8ed1f0e2c15d4eb6b2bb45dd" kindref="member">nrf_rramc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mask<sp/>&amp;<sp/><ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK</ref>(event))<sp/>&amp;&amp;<sp/><ref refid="group__nrf__rramc__hal_1ga1f57b36da161e1cf21c82aa3876efb77" kindref="member">nrf_rramc_event_check</ref>(p_reg,<sp/>event))</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga6a5a2e22bbd6b8d5af4c27fa64f1a9d8" kindref="member">nrf_rramc_event_clear</ref>(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__nrfy__common_1ga0c6f93867e58ecfb266f70393b408c03" kindref="member">NRFY_EVENT_TO_INT_BITMASK</ref>(event);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">NRFY_STATIC_INLINE<sp/>uint32_t<sp/>__nrfy_internal_rramc_events_process(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask)</highlight></codeline>
<codeline lineno="649"><highlight class="normal">{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>evt_mask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>evt_mask<sp/>=<sp/><sp/>__nrfy_internal_rramc_event_handle(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45dda0ab2fc8a267c9cacfd4d4ef9a31fe968" kindref="member">NRF_RRAMC_EVENT_ERROR_ACCESS</ref>);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>evt_mask<sp/>|=<sp/>__nrfy_internal_rramc_event_handle(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45ddaa50022ae45e9aeccf043e9c25b0dc510" kindref="member">NRF_RRAMC_EVENT_READY</ref>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>evt_mask<sp/>|=<sp/>__nrfy_internal_rramc_event_handle(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45dda883352a74d9ebfc2a1868e7ffa080875" kindref="member">NRF_RRAMC_EVENT_READY_NEXT</ref>);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>evt_mask<sp/>|=<sp/>__nrfy_internal_rramc_event_handle(p_reg,<sp/>mask,<sp/><ref refid="group__nrf__rramc__hal_1gga12273d5b8ed1f0e2c15d4eb6b2bb45ddadb6b5788f971630e4599e9e0ff366a36" kindref="member">NRF_RRAMC_EVENT_WOKENUP</ref>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>evt_mask;</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__nrfy_internal_rramc_config_get(NRF_RRAMC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/>*<sp/><sp/><sp/>p_config)</highlight></codeline>
<codeline lineno="664"><highlight class="normal">{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga600344f5d63d15447e2a49bd1bc87b91" kindref="member">nrf_rramc_config_get</ref>(p_reg,<sp/>p_config);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__nrfy_internal_rramc_config_set(NRF_RRAMC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__rramc__config__t" kindref="compound">nrf_rramc_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_config)</highlight></codeline>
<codeline lineno="672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__rramc__hal_1ga4aa89554145d84b6df4178a36bc46e99" kindref="member">nrf_rramc_config_set</ref>(p_reg,<sp/>p_config);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="group__nrf__rramc__hal_1gae3dd53c1f48d343e31268ab9fe3102d5" kindref="member">nrf_rramc_ready_check</ref>(p_reg))</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__nrfy_internal_rramc_byte_write(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="684"><highlight class="normal">{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="group__nrf__rramc__hal_1ga3334d9ee37c8e0f156f1cddc9aa8f438" kindref="member">nrf_rramc_write_ready_check</ref>(p_reg))</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*)addr<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="692"><highlight class="normal">}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__nrfy_internal_rramc_word_write(NRF_RRAMC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr,</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value)</highlight></codeline>
<codeline lineno="697"><highlight class="normal">{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="group__nrf__rramc__hal_1ga3334d9ee37c8e0f156f1cddc9aa8f438" kindref="member">nrf_rramc_write_ready_check</ref>(p_reg))</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>*(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)addr<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_w();</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal">NRFY_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>__nrfy_internal_rramc_is_otp_word_writable(uint32_t<sp/>index)</highlight></codeline>
<codeline lineno="708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(NRF_TRUSTZONE_NONSECURE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>val_on_addr<sp/>=<sp/>NRF_UICR-&gt;OTP[index];</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_barrier_r();</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(val_on_addr<sp/>==<sp/>0xFFFFFFFF);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRFY_RRAMC_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="haly/nrfy_rramc.h"/>
  </compounddef>
</doxygen>
