<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__fpu__hal" kind="group">
    <compoundname>nrf_fpu_hal</compoundname>
    <title>FPU HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__fpu__hal_1ga2f0e61d90e1fe52b1a28a3b1d9e9c7e3" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_fpu_event_t</name>
        <enumvalue id="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3a0c6c10a1197a55e193e3c3118fca0924" prot="public">
          <name>NRF_FPU_EVENT_INVALIDOPERATION</name>
          <initializer>= offsetof(NRF_FPU_Type, EVENTS_INVALIDOPERATION)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An FPUIOC exception triggered by an invalid operation has occurred in the FPU. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3a1f6107774979347fc8286bd27996e4d2" prot="public">
          <name>NRF_FPU_EVENT_DIVIDEBYZERO</name>
          <initializer>= offsetof(NRF_FPU_Type, EVENTS_DIVIDEBYZERO)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An FPUDZC exception triggered by a floating-point divide-by-zero operation has occurred in the FPU. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3abe9e3dc6327b1ebdec018dc64ade7aae" prot="public">
          <name>NRF_FPU_EVENT_OVERFLOW</name>
          <initializer>= offsetof(NRF_FPU_Type, EVENTS_OVERFLOW)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An FPUOFC exception triggered by a floating-point overflow has occurred in the FPU. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3ab525aa5c4536251d6dab823829c313ed" prot="public">
          <name>NRF_FPU_EVENT_UNDERFLOW</name>
          <initializer>= offsetof(NRF_FPU_Type, EVENTS_UNDERFLOW)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An FPUUFC exception triggered by a floating-point underflow has occurred in the FPU. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3a8bd4d8d5d703ffdc8115d8167b78876b" prot="public">
          <name>NRF_FPU_EVENT_INEXACT</name>
          <initializer>= offsetof(NRF_FPU_Type, EVENTS_INEXACT)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An FPUIXC exception triggered by an inexact floating-point operation has occurred in the FPU. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1gga2f0e61d90e1fe52b1a28a3b1d9e9c7e3accdbe5ffe1a3170e9e6f6e3f41e7cf14" prot="public">
          <name>NRF_FPU_EVENT_DENORMALINPUT</name>
          <initializer>= offsetof(NRF_FPU_Type, EVENTS_DENORMALINPUT)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An FPUIDC exception triggered by a denormal floating-point input has occurred in the FPU. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>FPU events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="51" column="1" bodyfile="hal/nrf_fpu.h" bodystart="52" bodyend="59"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__fpu__hal_1gabf82051d6ebdf534a8516e0ba16e7516" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_fpu_int_mask_t</name>
        <enumvalue id="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516a8f23cc5ace94731a305b2e585d76f64f" prot="public">
          <name>NRF_FPU_INT_INVALIDOPERATION</name>
          <initializer>= FPU_INTEN_INVALIDOPERATION_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on event INVALIDOPERATION. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516abf02125aa90f11de0f25fd4c1304cf2b" prot="public">
          <name>NRF_FPU_INT_DIVIDEBYZERO</name>
          <initializer>= FPU_INTEN_DIVIDEBYZERO_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on event DIVIDEBYZERO. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516a3af2ab39b41b0235893f54915c27567e" prot="public">
          <name>NRF_FPU_INT_OVERFLOW</name>
          <initializer>= FPU_INTEN_OVERFLOW_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on event OVERFLOW. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516a2973ef83a445ad1044a6cb912fa7ae80" prot="public">
          <name>NRF_FPU_INT_UNDERFLOW</name>
          <initializer>= FPU_INTEN_UNDERFLOW_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on event UNDERFLOW. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516aaf18197e5130e69c295dac2ea8851124" prot="public">
          <name>NRF_FPU_INT_INEXACT</name>
          <initializer>= FPU_INTEN_INEXACT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on event INEXACT. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__fpu__hal_1ggabf82051d6ebdf534a8516e0ba16e7516aac9612839f6d0f03fc17c92f748aeb94" prot="public">
          <name>NRF_FPU_INT_DENORMALINPUT</name>
          <initializer>= FPU_INTEN_DENORMALINPUT_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on event DENORMALINPUT. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>FPU interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="62" column="1" bodyfile="hal/nrf_fpu.h" bodystart="63" bodyend="70"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__fpu__hal_1ga0ae99e8b39e3c16c2a7aa3c16c87ba6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_fpu_event_clear</definition>
        <argsstring>(NRF_FPU_Type *p_reg, nrf_fpu_event_t event)</argsstring>
        <name>nrf_fpu_event_clear</name>
        <param>
          <type>NRF_FPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__fpu__hal_1ga2f0e61d90e1fe52b1a28a3b1d9e9c7e3" kindref="member">nrf_fpu_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified FPU event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="124" column="24" bodyfile="hal/nrf_fpu.h" bodystart="124" bodyend="128" declfile="hal/nrf_fpu.h" declline="78" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__fpu__hal_1ga2f290e0f6525484170b7fc80ff5fc062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_fpu_event_check</definition>
        <argsstring>(NRF_FPU_Type const *p_reg, nrf_fpu_event_t event)</argsstring>
        <name>nrf_fpu_event_check</name>
        <param>
          <type>NRF_FPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__fpu__hal_1ga2f0e61d90e1fe52b1a28a3b1d9e9c7e3" kindref="member">nrf_fpu_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the FPU event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="130" column="24" bodyfile="hal/nrf_fpu.h" bodystart="130" bodyend="134" declfile="hal/nrf_fpu.h" declline="90" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__fpu__hal_1gad550267efd9371c59fdc2cb61b755ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_fpu_int_enable</definition>
        <argsstring>(NRF_FPU_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_fpu_int_enable</name>
        <param>
          <type>NRF_FPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__fpu__hal_1gabf82051d6ebdf534a8516e0ba16e7516" kindref="member">nrf_fpu_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="136" column="24" bodyfile="hal/nrf_fpu.h" bodystart="136" bodyend="139" declfile="hal/nrf_fpu.h" declline="100" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__fpu__hal_1ga1d244580ab66ec4df4e68fad0bfea587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_fpu_int_disable</definition>
        <argsstring>(NRF_FPU_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_fpu_int_disable</name>
        <param>
          <type>NRF_FPU_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__fpu__hal_1gabf82051d6ebdf534a8516e0ba16e7516" kindref="member">nrf_fpu_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="141" column="24" bodyfile="hal/nrf_fpu.h" bodystart="141" bodyend="144" declfile="hal/nrf_fpu.h" declline="109" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__fpu__hal_1ga0e148106be3c9f25a6696acf8f8d3926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_fpu_int_enable_check</definition>
        <argsstring>(NRF_FPU_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_fpu_int_enable_check</name>
        <param>
          <type>NRF_FPU_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__fpu__hal_1gabf82051d6ebdf534a8516e0ba16e7516" kindref="member">nrf_fpu_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_fpu.h" line="146" column="28" bodyfile="hal/nrf_fpu.h" bodystart="146" bodyend="149" declfile="hal/nrf_fpu.h" declline="120" declcolumn="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer (HAL) for managing the Floating Point Unit configuration. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
