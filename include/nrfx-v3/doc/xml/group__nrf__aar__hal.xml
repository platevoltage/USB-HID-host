<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__aar__hal" kind="group">
    <compoundname>nrf_aar_hal</compoundname>
    <title>AAR HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_aar_event_t</name>
        <enumvalue id="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca0e2231f6d0a859130c04e7f2b76c7d7e" prot="public">
          <name>NRF_AAR_EVENT_END</name>
          <initializer>= offsetof(NRF_AAR_Type, EVENTS_END)</initializer>
          <briefdescription>
<para>Address resolution procedure complete. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca379c6777cca6702bbc827ab22fdab76f" prot="public">
          <name>NRF_AAR_EVENT_RESOLVED</name>
          <initializer>= offsetof(NRF_AAR_Type, EVENTS_RESOLVED)</initializer>
          <briefdescription>
<para>Address resolved. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca675d8a43b78697afe41e2f7c73ed6ebb" prot="public">
          <name>NRF_AAR_EVENT_NOTRESOLVED</name>
          <initializer>= offsetof(NRF_AAR_Type, EVENTS_NOTRESOLVED)</initializer>
          <briefdescription>
<para>Address not resolved. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca6a254513062c852b324a9679b1e26955" prot="public">
          <name>NRF_AAR_EVENT_ERROR</name>
          <initializer>= offsetof(NRF_AAR_Type, EVENTS_ERROR)</initializer>
          <briefdescription>
<para>Address resolution procedure aborted due to STOP task or error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AAR events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="125" column="1" bodyfile="hal/nrf_aar.h" bodystart="126" bodyend="133"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__aar__hal_1gaa08e4573c93fb1cb5931737b86cbedec" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_aar_int_mask_t</name>
        <enumvalue id="group__nrf__aar__hal_1ggaa08e4573c93fb1cb5931737b86cbedeca2ade652a1cbe1fcd12a730ec221a6761" prot="public">
          <name>NRF_AAR_INT_END_MASK</name>
          <initializer>= AAR_INTENSET_END_Msk</initializer>
          <briefdescription>
<para>Interrupt on END event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1ggaa08e4573c93fb1cb5931737b86cbedeca448a400112ea26f6a85e2be874f35821" prot="public">
          <name>NRF_AAR_INT_RESOLVED_MASK</name>
          <initializer>= AAR_INTENSET_RESOLVED_Msk</initializer>
          <briefdescription>
<para>Interrupt on RESOLVED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1ggaa08e4573c93fb1cb5931737b86cbedeca903d2e0b632846dbf65f7cc84bf94c3b" prot="public">
          <name>NRF_AAR_INT_NOTRESOLVED_MASK</name>
          <initializer>= AAR_INTENSET_NOTRESOLVED_Msk</initializer>
          <briefdescription>
<para>Interrupt on NOTRESOLVED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1ggaa08e4573c93fb1cb5931737b86cbedecac6ff4d52d9c4ee20a00603f07a6f1715" prot="public">
          <name>NRF_AAR_INT_ERROR_MASK</name>
          <initializer>= AAR_INTENSET_ERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on NOTRESOLVED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AAR interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="136" column="1" bodyfile="hal/nrf_aar.h" bodystart="137" bodyend="144"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__aar__hal_1ga73565be5f5b07fec07c83af843e8935c" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_aar_error_t</name>
        <enumvalue id="group__nrf__aar__hal_1gga73565be5f5b07fec07c83af843e8935ca3060e11746f2d02975e0af4b5c682552" prot="public">
          <name>NRF_AAR_ERROR_NO_ERROR</name>
          <initializer>= AAR_ERRORSTATUS_ERRORSTATUS_NoError</initializer>
          <briefdescription>
<para>No errors have occurred. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1gga73565be5f5b07fec07c83af843e8935ca8528804de3c4afa169b7c7acb49f8746" prot="public">
          <name>NRF_AAR_ERROR_PREMATURE_INPTR_END</name>
          <initializer>= AAR_ERRORSTATUS_ERRORSTATUS_PrematureInptrEnd</initializer>
          <briefdescription>
<para>End of INPTR job list before data structure was read. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1gga73565be5f5b07fec07c83af843e8935ca3f069a050f2590eb500cb8669bcba795" prot="public">
          <name>NRF_AAR_ERROR_PREMATURE_OUTPTR_END</name>
          <initializer>= AAR_ERRORSTATUS_ERRORSTATUS_PrematureOutptrEnd</initializer>
          <briefdescription>
<para>End of OUTPTR job list before data structure was read. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1gga73565be5f5b07fec07c83af843e8935ca27ac2446c1c4bb77d5652c7d2a81623e" prot="public">
          <name>NRF_AAR_ERROR_DMA_ERROR</name>
          <initializer>= AAR_ERRORSTATUS_ERRORSTATUS_DmaError</initializer>
          <briefdescription>
<para>Bus error during DMA access. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AAR error status when ERROR event is generated. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="148" column="1" bodyfile="hal/nrf_aar.h" bodystart="149" bodyend="154"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_aar_task_t</name>
        <enumvalue id="group__nrf__aar__hal_1ggace9552a8a9e5cd9853dc1f9a812926ccaeb82da7f2387762e820b3a147290fcd3" prot="public">
          <name>NRF_AAR_TASK_START</name>
          <initializer>= offsetof(NRF_AAR_Type, TASKS_START)</initializer>
          <briefdescription>
<para>Start address resolution procedure. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__aar__hal_1ggace9552a8a9e5cd9853dc1f9a812926cca494d5c0047ec7e3edb43463943289f23" prot="public">
          <name>NRF_AAR_TASK_STOP</name>
          <initializer>= offsetof(NRF_AAR_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>Stop address resolution procedure. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AAR tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="158" column="1" bodyfile="hal/nrf_aar.h" bodystart="159" bodyend="162"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__aar__hal_1ga5dc9b2b7fb4504cea33740bb0e8e917c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_aar_event_check</definition>
        <argsstring>(NRF_AAR_Type const *p_reg, nrf_aar_event_t event)</argsstring>
        <name>nrf_aar_event_check</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the AAR event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Event is set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Event is not set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="504" column="24" bodyfile="hal/nrf_aar.h" bodystart="504" bodyend="508" declfile="hal/nrf_aar.h" declline="173" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gafba8d400db7ac564766c6ed2f9f074c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_event_clear</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_aar_event_t event)</argsstring>
        <name>nrf_aar_event_clear</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified AAR event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="510" column="24" bodyfile="hal/nrf_aar.h" bodystart="510" bodyend="515" declfile="hal/nrf_aar.h" declline="182" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga4557d62c32944dd45f7e2306dc61b336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_aar_event_address_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg, nrf_aar_event_t event)</argsstring>
        <name>nrf_aar_event_address_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified AAR event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to get the address of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="517" column="28" bodyfile="hal/nrf_aar.h" bodystart="517" bodyend="521" declfile="hal/nrf_aar.h" declline="193" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gafcfd45b54e0e162e21b753b378ea5134" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_int_enable</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_aar_int_enable</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__aar__hal_1gaa08e4573c93fb1cb5931737b86cbedec" kindref="member">nrf_aar_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="523" column="24" bodyfile="hal/nrf_aar.h" bodystart="523" bodyend="526" declfile="hal/nrf_aar.h" declline="203" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga9bf9334598fa260004b2f2081b2c60c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_aar_int_enable_check</definition>
        <argsstring>(NRF_AAR_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_aar_int_enable_check</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__aar__hal_1gaa08e4573c93fb1cb5931737b86cbedec" kindref="member">nrf_aar_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="528" column="28" bodyfile="hal/nrf_aar.h" bodystart="528" bodyend="531" declfile="hal/nrf_aar.h" declline="214" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga5cd5bdde6b43bcf58cc4f74f24161b06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_int_disable</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_aar_int_disable</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling the specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__aar__hal_1gaa08e4573c93fb1cb5931737b86cbedec" kindref="member">nrf_aar_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="533" column="24" bodyfile="hal/nrf_aar.h" bodystart="533" bodyend="536" declfile="hal/nrf_aar.h" declline="223" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga8152c8424b3de78734910a501130739a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_task_trigger</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_aar_task_t task)</argsstring>
        <name>nrf_aar_task_trigger</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for starting an AAR task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="538" column="24" bodyfile="hal/nrf_aar.h" bodystart="538" bodyend="541" declfile="hal/nrf_aar.h" declline="231" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaf01f522277a44a52833e7c3b26046380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_aar_task_address_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg, nrf_aar_task_t task)</argsstring>
        <name>nrf_aar_task_address_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of a specific AAR task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested AAR task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="543" column="28" bodyfile="hal/nrf_aar.h" bodystart="543" bodyend="547" declfile="hal/nrf_aar.h" declline="241" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga66f5c0b8a07c6657ac35cbe9199e0c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_enable</definition>
        <argsstring>(NRF_AAR_Type *p_reg)</argsstring>
        <name>nrf_aar_enable</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling AAR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="549" column="24" bodyfile="hal/nrf_aar.h" bodystart="549" bodyend="552" declfile="hal/nrf_aar.h" declline="249" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gabb95489d544efb64c12d7fac5fdacdd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_disable</definition>
        <argsstring>(NRF_AAR_Type *p_reg)</argsstring>
        <name>nrf_aar_disable</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling AAR. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="554" column="24" bodyfile="hal/nrf_aar.h" bodystart="554" bodyend="557" declfile="hal/nrf_aar.h" declline="256" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga9e011e3c4e540cf571bf908416ac6b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__aar__hal_1ga73565be5f5b07fec07c83af843e8935c" kindref="member">nrf_aar_error_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_aar_error_t nrf_aar_error_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_error_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the error status when ERROR event is generated. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Error</parametername>
</parameternamelist>
<parameterdescription>
<para>status when the ERROR event is generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="615" column="35" bodyfile="hal/nrf_aar.h" bodystart="615" bodyend="618" declfile="hal/nrf_aar.h" declline="266" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaf8e565588af75d32c5d339d3d6812801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_irk_pointer_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint8_t const *irk_ptr)</argsstring>
        <name>nrf_aar_irk_pointer_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>irk_ptr</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to the Identity Resolving Keys (IRK) data structure. </para>
        </briefdescription>
        <detaileddescription>
<para>The size of the provided data structure must correspond to the number of keys available. Each key occupies 16 bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">irk_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the IRK data structure. Must point to the Data RAM region.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__aar__hal_1gac0099d874679a6cddd8304a28852391b" kindref="member">nrf_aar_irk_number_set</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="560" column="24" bodyfile="hal/nrf_aar.h" bodystart="560" bodyend="563" declfile="hal/nrf_aar.h" declline="281" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga36a92e5ba9e029bf2e3e2331cf99ff99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t const *</type>
        <definition>NRF_STATIC_INLINE uint8_t const  * nrf_aar_irk_pointer_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_irk_pointer_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the Identity Resolving Keys data structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the IRK data structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="565" column="34" bodyfile="hal/nrf_aar.h" bodystart="565" bodyend="568" declfile="hal/nrf_aar.h" declline="291" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gac0099d874679a6cddd8304a28852391b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_irk_number_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint8_t irk_num)</argsstring>
        <name>nrf_aar_irk_number_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>irk_num</declname>
        </param>
        <briefdescription>
<para>Function for setting the number of keys available in the Identity Resolving Keys data structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">irk_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of keys available in the IRK data structure. Maximum is 16. Must correspond to the size of the provided IRK data structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__aar__hal_1gaf8e565588af75d32c5d339d3d6812801" kindref="member">nrf_aar_irk_pointer_set</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="572" column="24" bodyfile="hal/nrf_aar.h" bodystart="572" bodyend="575" declfile="hal/nrf_aar.h" declline="305" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga0e2860ce4079237a304d095b5eb5db31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_aar_irk_number_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_irk_number_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of keys available in the Identity Resolving Keys data structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of keys in the IRK data structure. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="577" column="27" bodyfile="hal/nrf_aar.h" bodystart="577" bodyend="580" declfile="hal/nrf_aar.h" declline="315" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gabab7b798632a61578d9782aa2bd8d761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_maxresolved_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint16_t maxresolved)</argsstring>
        <name>nrf_aar_maxresolved_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>maxresolved</declname>
        </param>
        <briefdescription>
<para>Function for setting maximum number of Identity Resolving Keys to resolve. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">maxresolved</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum number of Identity Resolving Keys to resolve.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__aar__hal_1gaf8e565588af75d32c5d339d3d6812801" kindref="member">nrf_aar_irk_pointer_set</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="622" column="24" bodyfile="hal/nrf_aar.h" bodystart="622" bodyend="625" declfile="hal/nrf_aar.h" declline="327" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gab83173f5dc636802e1a13b62b2fe22c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_aar_maxresolved_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_maxresolved_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting maximum number of Identity Resolving Keys to resolve. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum number of Identity Resolving Keys to resolve. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="627" column="28" bodyfile="hal/nrf_aar.h" bodystart="627" bodyend="630" declfile="hal/nrf_aar.h" declline="336" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gad809805df5a951cb32fb417e8a322328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_addr_pointer_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint8_t const *addr_ptr)</argsstring>
        <name>nrf_aar_addr_pointer_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t const *</type>
          <declname>addr_ptr</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to the resolvable address. </para>
        </briefdescription>
        <detaileddescription>
<para>The resolvable address must consist of 6 bytes.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the address to resolve using the available IRK keys. Must point to the Data RAM region. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="584" column="24" bodyfile="hal/nrf_aar.h" bodystart="584" bodyend="587" declfile="hal/nrf_aar.h" declline="349" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gabc02cea551747babb2c8237a9151adb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t const *</type>
        <definition>NRF_STATIC_INLINE uint8_t const  * nrf_aar_addr_pointer_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_addr_pointer_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the resolvable address. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the address to resolve. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="589" column="34" bodyfile="hal/nrf_aar.h" bodystart="589" bodyend="592" declfile="hal/nrf_aar.h" declline="358" declcolumn="34"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gabb40485b0656ab175de43a53fffdf19c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_out_ptr_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_vdma_job_t const *p_job)</argsstring>
        <name>nrf_aar_out_ptr_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> const *</type>
          <declname>p_job</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to a job list containing description to store resolved addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_job</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a job list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="647" column="24" bodyfile="hal/nrf_aar.h" bodystart="647" bodyend="651" declfile="hal/nrf_aar.h" declline="369" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaa91491ea81c0ba19b80da0ac5c6873e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_vdma_job_t * nrf_aar_out_ptr_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_out_ptr_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to a job list containing description to store resolved addresses. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the job list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="653" column="35" bodyfile="hal/nrf_aar.h" bodystart="653" bodyend="656" declfile="hal/nrf_aar.h" declline="380" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga05f842e5a390c892a661becfa305423f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_in_ptr_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_vdma_job_t const *p_job)</argsstring>
        <name>nrf_aar_in_ptr_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> const *</type>
          <declname>p_job</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to a job list containing both the Hash and Prand parts of the private resolvable address (DEVICEADDR) field from the Bluetooth packet, and a number of Identity Resolving Keys (IRK). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_job</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a job list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="634" column="24" bodyfile="hal/nrf_aar.h" bodystart="634" bodyend="638" declfile="hal/nrf_aar.h" declline="392" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaf2db45a7d81712eedb4d884146edc0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_vdma_job_t * nrf_aar_in_ptr_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_in_ptr_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to a job list containing both the Hash and Prand parts of the private resolvable address (DEVICEADDR) field from the Bluetooth packet, and a number of Identity Resolving Keys (IRK). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the job list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="640" column="35" bodyfile="hal/nrf_aar.h" bodystart="640" bodyend="643" declfile="hal/nrf_aar.h" declline="404" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga56141db149988fbee43b694d7001b826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_aar_out_amount_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_out_amount_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting number of bytes available in the output data, not including the job list structure. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of bytes available in the output data. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="660" column="28" bodyfile="hal/nrf_aar.h" bodystart="660" bodyend="663" declfile="hal/nrf_aar.h" declline="416" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaa8422987f69cc49148b03120e6453bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_scratch_pointer_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, uint8_t *scratch_ptr)</argsstring>
        <name>nrf_aar_scratch_pointer_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>scratch_ptr</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to the scratch data area. </para>
        </briefdescription>
        <detaileddescription>
<para>The scratch data area is used for temporary storage during the address resolution procedure. A space of minimum 3 bytes must be reserved for the scratch data area.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">scratch_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the scratch data area. Must point to the Data RAM region. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="596" column="24" bodyfile="hal/nrf_aar.h" bodystart="596" bodyend="599" declfile="hal/nrf_aar.h" declline="429" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaec8e079caf49e764291fc438ce1d35f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t *</type>
        <definition>NRF_STATIC_INLINE uint8_t * nrf_aar_scratch_pointer_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_scratch_pointer_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the scratch data area. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the scratch data area. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="601" column="28" bodyfile="hal/nrf_aar.h" bodystart="601" bodyend="604" declfile="hal/nrf_aar.h" declline="438" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga418c1cb662b244e4a325394de935b1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_aar_resolution_status_get</definition>
        <argsstring>(NRF_AAR_Type const *p_reg)</argsstring>
        <name>nrf_aar_resolution_status_get</name>
        <param>
          <type>NRF_AAR_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the index of the Identity Resolving Key that was used the last time an address was resolved. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to get the IRK index that matched the resolvable address, provided that <ref refid="group__nrf__aar__hal_1gga2b54270a6027e295674d60c738609b8ca379c6777cca6702bbc827ab22fdab76f" kindref="member">NRF_AAR_EVENT_RESOLVED</ref> occured. Otherwise, it will return the index of the last IRK stored in the IRK data structure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The index of the IRK that was used the last time an address was resolved. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="608" column="27" bodyfile="hal/nrf_aar.h" bodystart="608" bodyend="611" declfile="hal/nrf_aar.h" declline="454" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga781416b1fa504ba1b2dd52b1c7852208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_subscribe_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_aar_task_t task, uint8_t channel)</argsstring>
        <name>nrf_aar_subscribe_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given AAR task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="466" column="24" declfile="hal/nrf_aar.h" declline="466" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gad11996805d9487a5daf5822987b926eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_subscribe_clear</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_aar_task_t task)</argsstring>
        <name>nrf_aar_subscribe_clear</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1gace9552a8a9e5cd9853dc1f9a812926cc" kindref="member">nrf_aar_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given AAR task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="477" column="24" declfile="hal/nrf_aar.h" declline="477" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1gaeab128354f4b38f8b1faedf7aaa97f44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_publish_set</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_aar_event_t event, uint8_t channel)</argsstring>
        <name>nrf_aar_publish_set</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given AAR event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="488" column="24" declfile="hal/nrf_aar.h" declline="488" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__aar__hal_1ga08deaa821f25ff3f015473c70235c2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_aar_publish_clear</definition>
        <argsstring>(NRF_AAR_Type *p_reg, nrf_aar_event_t event)</argsstring>
        <name>nrf_aar_publish_clear</name>
        <param>
          <type>NRF_AAR_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__aar__hal_1ga2b54270a6027e295674d60c738609b8c" kindref="member">nrf_aar_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given AAR event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="499" column="24" declfile="hal/nrf_aar.h" declline="499" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__aar__hal_1ga5175eca6ff261ad2ae2fb379e156a726" prot="public" static="no">
        <name>NRF_AAR_HAS_ERROR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ERROR event and ERRORSTATUS register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="56" column="9" bodyfile="hal/nrf_aar.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1ga9f386917359e9ba7ba75beeab01c6c4e" prot="public" static="no">
        <name>NRF_AAR_HAS_OUT_AMOUNT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the OUT.AMOUNT register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="63" column="9" bodyfile="hal/nrf_aar.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1ga23eb4f8760495d6e41c36811f6eef78d" prot="public" static="no">
        <name>NRF_AAR_HAS_NIRK</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the NIRK register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="70" column="9" bodyfile="hal/nrf_aar.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1gab062fb25cdfe935d4af2b2f9eaac2be7" prot="public" static="no">
        <name>NRF_AAR_HAS_IRKPTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the IRKPTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="77" column="9" bodyfile="hal/nrf_aar.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1gac66d5bc051b9f5aed375effe6be32bdb" prot="public" static="no">
        <name>NRF_AAR_HAS_IN_PTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the IN.PTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="84" column="9" bodyfile="hal/nrf_aar.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1gab1690bfc510121cf80aee7894f9bd0b0" prot="public" static="no">
        <name>NRF_AAR_HAS_OUT_PTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the OUT.PTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="91" column="9" bodyfile="hal/nrf_aar.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1gaf7d9d00edadfeed10d305ce652519d58" prot="public" static="no">
        <name>NRF_AAR_HAS_ADDRPTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the ADDRPTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="98" column="9" bodyfile="hal/nrf_aar.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1gac4dd74c9360d954ae4b2809fce4f0230" prot="public" static="no">
        <name>NRF_AAR_HAS_SCRATCHPTR</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the SCRATCHPTR register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="105" column="9" bodyfile="hal/nrf_aar.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1gab2b0f58c6547b20786574c24f8aef575" prot="public" static="no">
        <name>NRF_AAR_HAS_STATUS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the STATUS register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="112" column="9" bodyfile="hal/nrf_aar.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__aar__hal_1ga52bc239969a37281f49a63b1aa35b60a" prot="public" static="no">
        <name>NRF_AAR_HAS_MAXRESOLVED</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Presence of the MAXRESOLVED register. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_aar.h" line="119" column="9" bodyfile="hal/nrf_aar.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Accelerated Address Resolver (AAR) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
