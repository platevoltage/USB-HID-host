<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__mvdma_8h" kind="file" language="C++">
    <compoundname>nrf_mvdma.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includes refid="nrf__vdma_8h" local="no">helpers/nrf_vdma.h</includes>
    <includedby refid="nrfy__mvdma_8h" local="no">haly/nrfy_mvdma.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_mvdma.h</label>
        <link refid="nrf__mvdma_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__mvdma__hal_1gae2a46e84fd2c194d6d687f760e5b563b" prot="public" static="no">
        <name>NRF_MVDMA_HAS_NEW_VER</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether MVDMA uses new or old version. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="53" column="9" bodyfile="hal/nrf_mvdma.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__mvdma__hal_1ga3136a8d34e086cd5984556a0d4c28203" prot="public" static="no">
        <name>NRF_MVDMA_HAS_AXIMODE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether AXIMODE configuration is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="60" column="9" bodyfile="hal/nrf_mvdma.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__mvdma__hal_1gacdd297f6e4e4803856edb402ce6dfd29" prot="public" static="no">
        <name>NRF_MVDMA_HAS_MULTIMODE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Macro for checking if multi-mode operation is available. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="67" column="9" bodyfile="hal/nrf_mvdma.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_mvdma_task_t</name>
        <enumvalue id="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea8d93caf32970ead40bb7991d191ada8a" prot="public">
          <name>NRF_MVDMA_TASK_PAUSE</name>
          <initializer>= offsetof(NRF_MVDMA_Type, TASKS_PAUSE)</initializer>
          <briefdescription>
<para>Pause DMA transaction at next idle stage on memory bus. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eeab1c2e0da085f0f0657f178da17be5f34" prot="public">
          <name>NRF_MVDMA_TASK_RESET</name>
          <initializer>= offsetof(NRF_MVDMA_Type, TASKS_RESET)</initializer>
          <briefdescription>
<para>Return all registers to default state and FSMs to IDLE. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea4148010af285f4346a78bf058387e661" prot="public">
          <name>NRF_MVDMA_TASK_START0</name>
          <initializer>= offsetof(NRF_MVDMA_Type, TASKS_START[0])</initializer>
          <briefdescription>
<para>Start or continue processing of descriptor list 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea94490cc7e4f8df4a77de196f000017c5" prot="public">
          <name>NRF_MVDMA_TASK_START1</name>
          <initializer>= offsetof(NRF_MVDMA_Type, TASKS_START[1])</initializer>
          <briefdescription>
<para>Start or continue processing of descriptor list 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea30a2e2301c0737476fc3bc351441e7b3" prot="public">
          <name>NRF_MVDMA_TASK_START2</name>
          <initializer>= offsetof(NRF_MVDMA_Type, TASKS_START[2])</initializer>
          <briefdescription>
<para>Start or continue processing of descriptor list 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea15d1a042da8dd5c050b9a30456e3c23e" prot="public">
          <name>NRF_MVDMA_TASK_START3</name>
          <initializer>= offsetof(NRF_MVDMA_Type, TASKS_START[3])</initializer>
          <briefdescription>
<para>Start or continue processing of descriptor list 3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea3bcc5e0f52e9dfc4791905d2e6d132d8" prot="public">
          <name>NRF_MVDMA_TASK_START4</name>
          <initializer>= offsetof(NRF_MVDMA_Type, TASKS_START[4])</initializer>
          <briefdescription>
<para>Start or continue processing of descriptor list 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea4f2950563085d427cab7836915f1b577" prot="public">
          <name>NRF_MVDMA_TASK_START5</name>
          <initializer>= offsetof(NRF_MVDMA_Type, TASKS_START[5])</initializer>
          <briefdescription>
<para>Start or continue processing of descriptor list 5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea8ce83fb0c6772416e41762250d3a1ae3" prot="public">
          <name>NRF_MVDMA_TASK_START6</name>
          <initializer>= offsetof(NRF_MVDMA_Type, TASKS_START[6])</initializer>
          <briefdescription>
<para>Start or continue processing of descriptor list 6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea1c2e2be600f394f67910e9252bcf2431" prot="public">
          <name>NRF_MVDMA_TASK_START7</name>
          <initializer>= offsetof(NRF_MVDMA_Type, TASKS_START[7])</initializer>
          <briefdescription>
<para>Start or continue processing of descriptor list 7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MVDMA tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="73" column="1" bodyfile="hal/nrf_mvdma.h" bodystart="74" bodyend="89"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_mvdma_event_t</name>
        <enumvalue id="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fad39f02c6e66781fdb74dd359507034ce" prot="public">
          <name>NRF_MVDMA_EVENT_END</name>
          <initializer>= offsetof(NRF_MVDMA_Type, EVENTS_END)</initializer>
          <briefdescription>
<para>Sink data descriptor list has been completed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fac50a517bbd48467bb55a2ac017ba6777" prot="public">
          <name>NRF_MVDMA_EVENT_STARTED</name>
          <initializer>= offsetof(NRF_MVDMA_Type, EVENTS_STARTED)</initializer>
          <briefdescription>
<para>Data descriptor list processing has been started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fa59980a449a84dbb08da5dce4ab2f1a99" prot="public">
          <name>NRF_MVDMA_EVENT_PAUSED</name>
          <initializer>= offsetof(NRF_MVDMA_Type, EVENTS_PAUSED)</initializer>
          <briefdescription>
<para>Data transfer has been paused. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fac4e8ebd0e07363938099f074f2825e0a" prot="public">
          <name>NRF_MVDMA_EVENT_RESET</name>
          <initializer>= offsetof(NRF_MVDMA_Type, EVENTS_RESET)</initializer>
          <briefdescription>
<para>MVDMA has been reset. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fa125898a4bae1add7fdf040f74b541cd6" prot="public">
          <name>NRF_MVDMA_EVENT_SOURCEBUSERROR</name>
          <initializer>= offsetof(NRF_MVDMA_Type, EVENTS_SOURCE.BUSERROR)</initializer>
          <briefdescription>
<para>Bus error has been received on the source channel. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fa63d43fee3a4bffbcd5c70d153177a4bf" prot="public">
          <name>NRF_MVDMA_EVENT_SOURCESELECTJOBDONE</name>
          <initializer>= offsetof(NRF_MVDMA_Type, EVENTS_SOURCE.SELECTJOBDONE)</initializer>
          <briefdescription>
<para>Job on the source channel with event enable attribute bit active has been processed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5faa8c96f13ef51ad9e896e0cbe57405f7f" prot="public">
          <name>NRF_MVDMA_EVENT_SINKBUSERROR</name>
          <initializer>= offsetof(NRF_MVDMA_Type, EVENTS_SINK.BUSERROR)</initializer>
          <briefdescription>
<para>Bus error has been received on the sink channel. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fadd433afccebae42c2d0d7de3eaac4871" prot="public">
          <name>NRF_MVDMA_EVENT_SINKSELECTJOBDONE</name>
          <initializer>= offsetof(NRF_MVDMA_Type, EVENTS_SINK.SELECTJOBDONE)</initializer>
          <briefdescription>
<para>Job on the sink channel with event enable attribute bit active has been processed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MVDMA events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="92" column="1" bodyfile="hal/nrf_mvdma.h" bodystart="93" bodyend="114"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__mvdma__hal_1ga2fc7541ce6835a58a26f9ba3794f3118" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_mvdma_int_mask_t</name>
        <enumvalue id="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118affe923eb0be9c30897dbaabd5f39bf6e" prot="public">
          <name>NRF_MVDMA_INT_END_MASK</name>
          <initializer>= MVDMA_INTENSET_END_Msk</initializer>
          <briefdescription>
<para>Interrupt on END event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118a1e63156ea82b9e69f933d41cbe3d2fef" prot="public">
          <name>NRF_MVDMA_INT_STARTED_MASK</name>
          <initializer>= MVDMA_INTENSET_STARTED_Msk</initializer>
          <briefdescription>
<para>Interrupt on STARTED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118a0174f813042616ed2d01d83d56b7cbd7" prot="public">
          <name>NRF_MVDMA_INT_PAUSED_MASK</name>
          <initializer>= MVDMA_INTENSET_PAUSED_Msk</initializer>
          <briefdescription>
<para>Interrupt on PAUSED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118a030611bf56d898b647e528f2d00947ee" prot="public">
          <name>NRF_MVDMA_INT_RESET_MASK</name>
          <initializer>= MVDMA_INTENSET_RESET_Msk</initializer>
          <briefdescription>
<para>Interrupt on RESET event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118a4d7df2105f1d4c36acaadc561961e175" prot="public">
          <name>NRF_MVDMA_INT_SOURCEBUSERROR_MASK</name>
          <initializer>= MVDMA_INTENSET_SOURCEBUSERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on SOURCEBUSERROR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118ad7f55b60ba24d68894cc4e05a0e8f1b7" prot="public">
          <name>NRF_MVDMA_INT_SINKBUSERROR_MASK</name>
          <initializer>= MVDMA_INTENSET_SINKBUSERROR_Msk</initializer>
          <briefdescription>
<para>Interrupt on SINKBUSERROR event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118ac46aa7a8cc404fcd046b66e7814189fc" prot="public">
          <name>NRF_MVDMA_INT_SOURCESELECTJOBDONE_MASK</name>
          <initializer>= MVDMA_INTENSET_SOURCESELECTJOBDONE_Msk</initializer>
          <briefdescription>
<para>Interrupt on SOURCESELECTJOBDONE event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118a38dd7c7691e7400d4b56dbc86e287c70" prot="public">
          <name>NRF_MVDMA_INT_SINKSELECTJOBDONE_MASK</name>
          <initializer>= MVDMA_INTENSET_SINKSELECTJOBDONE_Msk</initializer>
          <briefdescription>
<para>Interrupt on SINKSELECTJOBDONE event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MVDMA interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="117" column="1" bodyfile="hal/nrf_mvdma.h" bodystart="118" bodyend="133"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__mvdma__hal_1ga611db7934e2236bfe69148e89823a3a3" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_mvdma_mode_t</name>
        <enumvalue id="group__nrf__mvdma__hal_1gga611db7934e2236bfe69148e89823a3a3a4c1401a19a7d56f3df8673f45ec820c3" prot="public">
          <name>NRF_MVDMA_MODE_SINGLE</name>
          <initializer>= MVDMA_CONFIG_MODE_MODE_SingleMode</initializer>
          <briefdescription>
<para>Descriptor list pointers are stored in SOURCELISTPTR and SINKLISTPTR registers. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga611db7934e2236bfe69148e89823a3a3a2e74b11949b60934564bbb3b708fec39" prot="public">
          <name>NRF_MVDMA_MODE_MULTI</name>
          <initializer>= MVDMA_CONFIG_MODE_MODE_MultiMode</initializer>
          <briefdescription>
<para>Descriptor list pointers are stored in a list in the memory. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MVDMA modes of operation. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="136" column="1" bodyfile="hal/nrf_mvdma.h" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__mvdma__hal_1ga064227e6f56210dfaaecbef20ada7377" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_mvdma_aximode_t</name>
        <enumvalue id="group__nrf__mvdma__hal_1gga064227e6f56210dfaaecbef20ada7377a9bf466b3bcc69a72e90032f4d62a4071" prot="public">
          <name>NRF_MVDMA_AXIMODE_AXI</name>
          <initializer>= MVDMA_CONFIG_AXIMODE_AXIMODE_AXI</initializer>
          <briefdescription>
<para>AXI burst transactions may be longer than one beat. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga064227e6f56210dfaaecbef20ada7377a2e11e5def1f02f70d6fcc68da0602eec" prot="public">
          <name>NRF_MVDMA_AXIMODE_AXILITE</name>
          <initializer>= MVDMA_CONFIG_AXIMODE_AXIMODE_AXILITE</initializer>
          <briefdescription>
<para>All AXI transactions are one-beat accesses. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MVDMA AXI modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="144" column="1" bodyfile="hal/nrf_mvdma.h" bodystart="145" bodyend="148"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__mvdma__hal_1gae569c468089413c6e25a5108060e8cb1" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_mvdma_fifo_status_t</name>
        <enumvalue id="group__nrf__mvdma__hal_1ggae569c468089413c6e25a5108060e8cb1a5cdd6b960f67c71fd0572ab548b39e15" prot="public">
          <name>NRF_MVDMA_FIFO_STATUS_EMPTY</name>
          <initializer>= MVDMA_STATUS_FIFO_FIFOSTATUS_Empty</initializer>
          <briefdescription>
<para>No data in intermediate FIFO. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1ggae569c468089413c6e25a5108060e8cb1aacd8c10ee2deb2eaa4f9f25b4aad4a47" prot="public">
          <name>NRF_MVDMA_FIFO_STATUS_NOT_EMPTY</name>
          <initializer>= MVDMA_STATUS_FIFO_FIFOSTATUS_NotEmpty</initializer>
          <briefdescription>
<para>Intermediate FIFO contains data. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1ggae569c468089413c6e25a5108060e8cb1ab6f8c8b599317a38a7623f7a3b4667dd" prot="public">
          <name>NRF_MVDMA_FIFO_STATUS_FULL</name>
          <initializer>= MVDMA_STATUS_FIFO_FIFOSTATUS_Full</initializer>
          <briefdescription>
<para>Intermediate FIFO is full. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MVDMA FIFO status. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="152" column="1" bodyfile="hal/nrf_mvdma.h" bodystart="153" bodyend="161"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__mvdma__hal_1ga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_mvdma_source_error_t</name>
        <enumvalue id="group__nrf__mvdma__hal_1gga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2adf74833a0e7246da1bc9580e9b715d4a" prot="public">
          <name>NRF_MVDMA_SOURCE_ERROR_NONE</name>
          <initializer>= MVDMA_SOURCE_BUSERROR_BUSERROR_NoError</initializer>
          <briefdescription>
<para>No error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2aa25d0ae7aa6b817f7feba44a6e2d20f0" prot="public">
          <name>NRF_MVDMA_SOURCE_ERROR_READ</name>
          <initializer>= MVDMA_SOURCE_BUSERROR_BUSERROR_ReadError</initializer>
          <briefdescription>
<para>Error related to memory when reading joblist or memory/register when reading data. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2aac6767a699a33b6c09cedab003cb16b5" prot="public">
          <name>NRF_MVDMA_SOURCE_ERROR_READ_DECODE</name>
          <initializer>= MVDMA_SOURCE_BUSERROR_BUSERROR_ReadDecodeError</initializer>
          <briefdescription>
<para>Error related to the joblist address or address when reading memory/register. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MVDMA data source errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="164" column="1" bodyfile="hal/nrf_mvdma.h" bodystart="165" bodyend="175"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__mvdma__hal_1ga98f9129dba13ac35d89a1cfc60c2e4e9" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_mvdma_sink_error_t</name>
        <enumvalue id="group__nrf__mvdma__hal_1gga98f9129dba13ac35d89a1cfc60c2e4e9ae502dfe703c1e1285c397502718ca0e0" prot="public">
          <name>NRF_MVDMA_SINK_ERROR_NONE</name>
          <initializer>= MVDMA_SINK_BUSERROR_BUSERROR_NoError</initializer>
          <briefdescription>
<para>No error. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga98f9129dba13ac35d89a1cfc60c2e4e9a3f43fe8ee11e981cba89b6d3d51896c1" prot="public">
          <name>NRF_MVDMA_SINK_ERROR_READ</name>
          <initializer>= MVDMA_SINK_BUSERROR_BUSERROR_ReadError</initializer>
          <briefdescription>
<para>Error related to memory when reading joblist. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga98f9129dba13ac35d89a1cfc60c2e4e9ad30bebc074b9a784a656df0d3d58f27f" prot="public">
          <name>NRF_MVDMA_SINK_ERROR_WRITE</name>
          <initializer>= MVDMA_SINK_BUSERROR_BUSERROR_WriteError</initializer>
          <briefdescription>
<para>Error related to memory/register when writing data. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga98f9129dba13ac35d89a1cfc60c2e4e9a3b1bc48232265a979a5f7818861e6793" prot="public">
          <name>NRF_MVDMA_SINK_ERROR_DECODE_READ</name>
          <initializer>= MVDMA_SINK_BUSERROR_BUSERROR_ReadDecodeError</initializer>
          <briefdescription>
<para>Error related to the joblist address when reading joblist. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__mvdma__hal_1gga98f9129dba13ac35d89a1cfc60c2e4e9a13852bfce127855c75243cf1f4a52f6f" prot="public">
          <name>NRF_MVDMA_SINK_ERROR_DECODE_WRITE</name>
          <initializer>= MVDMA_SINK_BUSERROR_BUSERROR_WriteDecodeError</initializer>
          <briefdescription>
<para>Error related to the memory/register address when writing data. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MVDMA data sink errors. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="178" column="1" bodyfile="hal/nrf_mvdma.h" bodystart="179" bodyend="193"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga8ff4dd7798c2e64bc78ae3fe6f662532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mvdma_task_trigger</definition>
        <argsstring>(NRF_MVDMA_Type *p_reg, nrf_mvdma_task_t task)</argsstring>
        <name>nrf_mvdma_task_trigger</name>
        <param>
          <type>NRF_MVDMA_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified MVDMA task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="492" column="24" bodyfile="hal/nrf_mvdma.h" bodystart="492" bodyend="496" declfile="hal/nrf_mvdma.h" declline="201" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1gafcbc21aa3b202cea94a75170ea2c8d79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mvdma_task_address_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg, nrf_mvdma_task_t task)</argsstring>
        <name>nrf_mvdma_task_address_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified MVDMA task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="498" column="28" bodyfile="hal/nrf_mvdma.h" bodystart="498" bodyend="502" declfile="hal/nrf_mvdma.h" declline="212" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga770ec8d1849122f7bf50341e0bceb7a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_mvdma_task_t nrf_mvdma_start_task_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_mvdma_start_task_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting START task by its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the START task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>START task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="504" column="36" bodyfile="hal/nrf_mvdma.h" bodystart="504" bodyend="509" declfile="hal/nrf_mvdma.h" declline="223" declcolumn="36"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga74a7b2e9a23a8eeaa82bdce6b9575374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mvdma_event_clear</definition>
        <argsstring>(NRF_MVDMA_Type *p_reg, nrf_mvdma_event_t event)</argsstring>
        <name>nrf_mvdma_event_clear</name>
        <param>
          <type>NRF_MVDMA_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified MVDMA event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="511" column="24" bodyfile="hal/nrf_mvdma.h" bodystart="511" bodyend="515" declfile="hal/nrf_mvdma.h" declline="232" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga367b9509c93895cb50689d31ac284c01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_mvdma_event_check</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg, nrf_mvdma_event_t event)</argsstring>
        <name>nrf_mvdma_event_check</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the MVDMA event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="517" column="24" bodyfile="hal/nrf_mvdma.h" bodystart="517" bodyend="521" declfile="hal/nrf_mvdma.h" declline="244" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga7d44269c67a65e59a4a9606593782002" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mvdma_event_address_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg, nrf_mvdma_event_t event)</argsstring>
        <name>nrf_mvdma_event_address_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified MVDMA event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Specified event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="523" column="28" bodyfile="hal/nrf_mvdma.h" bodystart="523" bodyend="527" declfile="hal/nrf_mvdma.h" declline="255" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga519024a15bce6aa1ce1c25ca32e9a5a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mvdma_int_enable</definition>
        <argsstring>(NRF_MVDMA_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_mvdma_int_enable</name>
        <param>
          <type>NRF_MVDMA_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__mvdma__hal_1ga2fc7541ce6835a58a26f9ba3794f3118" kindref="member">nrf_mvdma_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="529" column="24" bodyfile="hal/nrf_mvdma.h" bodystart="529" bodyend="532" declfile="hal/nrf_mvdma.h" declline="265" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga18e7178bdf80b95ac9d531fcbeb0d7c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mvdma_int_disable</definition>
        <argsstring>(NRF_MVDMA_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_mvdma_int_disable</name>
        <param>
          <type>NRF_MVDMA_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__mvdma__hal_1ga2fc7541ce6835a58a26f9ba3794f3118" kindref="member">nrf_mvdma_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="534" column="24" bodyfile="hal/nrf_mvdma.h" bodystart="534" bodyend="537" declfile="hal/nrf_mvdma.h" declline="274" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga773770b5370b2f21403fffa5bb532598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mvdma_int_enable_check</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_mvdma_int_enable_check</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__mvdma__hal_1ga2fc7541ce6835a58a26f9ba3794f3118" kindref="member">nrf_mvdma_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="539" column="28" bodyfile="hal/nrf_mvdma.h" bodystart="539" bodyend="542" declfile="hal/nrf_mvdma.h" declline="285" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga88407231c53c6d9d92ab20ab6c81110d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mvdma_int_pending_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg)</argsstring>
        <name>nrf_mvdma_int_pending_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of pending interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>States of pending interrupt are saved as a bitmask. One set at particular position means that interrupt for event is pending.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bitmask with information about pending interrupts. Use <ref refid="group__nrf__mvdma__hal_1ga2fc7541ce6835a58a26f9ba3794f3118" kindref="member">nrf_mvdma_int_mask_t</ref> values for bit masking. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="544" column="28" bodyfile="hal/nrf_mvdma.h" bodystart="544" bodyend="547" declfile="hal/nrf_mvdma.h" declline="298" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga855b2fdd44b7e7a4bce7659b5190f54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mvdma_subscribe_set</definition>
        <argsstring>(NRF_MVDMA_Type *p_reg, nrf_mvdma_task_t task, uint8_t channel)</argsstring>
        <name>nrf_mvdma_subscribe_set</name>
        <param>
          <type>NRF_MVDMA_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given MVDMA task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="309" column="24" declfile="hal/nrf_mvdma.h" declline="309" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga962201d7a29f3b10c4a520248efa4057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mvdma_subscribe_clear</definition>
        <argsstring>(NRF_MVDMA_Type *p_reg, nrf_mvdma_task_t task)</argsstring>
        <name>nrf_mvdma_subscribe_clear</name>
        <param>
          <type>NRF_MVDMA_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given MVDMA task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="320" column="24" declfile="hal/nrf_mvdma.h" declline="320" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1gaa9370f101858358a70af0964ca7a056a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mvdma_publish_set</definition>
        <argsstring>(NRF_MVDMA_Type *p_reg, nrf_mvdma_event_t event, uint8_t channel)</argsstring>
        <name>nrf_mvdma_publish_set</name>
        <param>
          <type>NRF_MVDMA_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given MVDMA event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="331" column="24" declfile="hal/nrf_mvdma.h" declline="331" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1gadc4859cd77da19bb928f0a477e5c3c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mvdma_publish_clear</definition>
        <argsstring>(NRF_MVDMA_Type *p_reg, nrf_mvdma_event_t event)</argsstring>
        <name>nrf_mvdma_publish_clear</name>
        <param>
          <type>NRF_MVDMA_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given MVDMA event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="342" column="24" declfile="hal/nrf_mvdma.h" declline="342" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga0efe65b3bb929a13864bb29e0b570428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mvdma_mode_set</definition>
        <argsstring>(NRF_MVDMA_Type *p_reg, nrf_mvdma_mode_t mode)</argsstring>
        <name>nrf_mvdma_mode_set</name>
        <param>
          <type>NRF_MVDMA_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mvdma__hal_1ga611db7934e2236bfe69148e89823a3a3" kindref="member">nrf_mvdma_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Function for setting the MVDMA mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired operating mode for MVDMA. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="579" column="24" bodyfile="hal/nrf_mvdma.h" bodystart="579" bodyend="582" declfile="hal/nrf_mvdma.h" declline="352" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga313afb53dca74554c3b4356b7246f517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mvdma_aximode_set</definition>
        <argsstring>(NRF_MVDMA_Type *p_reg, nrf_mvdma_aximode_t aximode)</argsstring>
        <name>nrf_mvdma_aximode_set</name>
        <param>
          <type>NRF_MVDMA_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__mvdma__hal_1ga064227e6f56210dfaaecbef20ada7377" kindref="member">nrf_mvdma_aximode_t</ref></type>
          <declname>aximode</declname>
        </param>
        <briefdescription>
<para>Function for setting the AXI mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">aximode</parametername>
</parameternamelist>
<parameterdescription>
<para>Desired AXI mode for MVDMA. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="585" column="24" bodyfile="hal/nrf_mvdma.h" bodystart="585" bodyend="588" declfile="hal/nrf_mvdma.h" declline="361" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga6ee1a92116337e8fc4c1f5cdba571778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mvdma_source_list_ptr_set</definition>
        <argsstring>(NRF_MVDMA_Type *p_reg, nrf_vdma_job_t const *p_job)</argsstring>
        <name>nrf_mvdma_source_list_ptr_set</name>
        <param>
          <type>NRF_MVDMA_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> const *</type>
          <declname>p_job</declname>
        </param>
        <briefdescription>
<para>Function for setting the pointer to the source descriptor list or pointer to the list of descriptor list pointers, depending on configured <ref refid="group__nrf__mvdma__hal_1ga611db7934e2236bfe69148e89823a3a3" kindref="member">nrf_mvdma_mode_t</ref> mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_job</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a job list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="591" column="24" bodyfile="hal/nrf_mvdma.h" bodystart="591" bodyend="599" declfile="hal/nrf_mvdma.h" declline="372" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga600ce66bf59c367d736c20a9cad42a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_vdma_job_t * nrf_mvdma_source_list_ptr_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg)</argsstring>
        <name>nrf_mvdma_source_list_ptr_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the source descriptor list or pointer to the list of descriptor list pointers, depending on configured <ref refid="group__nrf__mvdma__hal_1ga611db7934e2236bfe69148e89823a3a3" kindref="member">nrf_mvdma_mode_t</ref> mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a job list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="601" column="35" bodyfile="hal/nrf_mvdma.h" bodystart="601" bodyend="608" declfile="hal/nrf_mvdma.h" declline="384" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1gab120702d8cc46932695bcfa1b8b700a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_mvdma_sink_list_ptr_set</definition>
        <argsstring>(NRF_MVDMA_Type *p_reg, nrf_vdma_job_t const *p_job)</argsstring>
        <name>nrf_mvdma_sink_list_ptr_set</name>
        <param>
          <type>NRF_MVDMA_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> const *</type>
          <declname>p_job</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the sink descriptor list or pointer to the list of descriptor list pointers, depending on configured <ref refid="group__nrf__mvdma__hal_1ga611db7934e2236bfe69148e89823a3a3" kindref="member">nrf_mvdma_mode_t</ref> mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_job</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a job list. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="610" column="24" bodyfile="hal/nrf_mvdma.h" bodystart="610" bodyend="618" declfile="hal/nrf_mvdma.h" declline="394" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1gaf012e8c81fd1e2735b818a36f4e5cab7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_vdma_job_t * nrf_mvdma_sink_list_ptr_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg)</argsstring>
        <name>nrf_mvdma_sink_list_ptr_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the pointer to the sink descriptor list or pointer to the list of descriptor list pointers, depending on configured <ref refid="group__nrf__mvdma__hal_1ga611db7934e2236bfe69148e89823a3a3" kindref="member">nrf_mvdma_mode_t</ref> mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to a job list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="620" column="35" bodyfile="hal/nrf_mvdma.h" bodystart="620" bodyend="627" declfile="hal/nrf_mvdma.h" declline="406" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga8fbb296c6cb2888e3186bfeba3de4678" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mvdma_crc_result_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg)</argsstring>
        <name>nrf_mvdma_crc_result_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the result of CRC checksum calculation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Result of CRC checksum calculation. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="629" column="28" bodyfile="hal/nrf_mvdma.h" bodystart="629" bodyend="632" declfile="hal/nrf_mvdma.h" declline="415" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1gaa604217304e34b65605fb1cdc7160689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__mvdma__hal_1gae569c468089413c6e25a5108060e8cb1" kindref="member">nrf_mvdma_fifo_status_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_mvdma_fifo_status_t nrf_mvdma_fifo_status_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg)</argsstring>
        <name>nrf_mvdma_fifo_status_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the status of intermediate FIFO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Intermediate FIFO status. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="634" column="43" bodyfile="hal/nrf_mvdma.h" bodystart="634" bodyend="637" declfile="hal/nrf_mvdma.h" declline="424" declcolumn="43"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga048d320f31fc4f79927e69ba28b97f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_mvdma_activity_check</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg)</argsstring>
        <name>nrf_mvdma_activity_check</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking the MVDMA activity. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>MVDMA is processing data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>MVDMA is idle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="639" column="24" bodyfile="hal/nrf_mvdma.h" bodystart="639" bodyend="643" declfile="hal/nrf_mvdma.h" declline="434" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1gab11530bca70704fa00c6605fc5df11f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__mvdma__hal_1ga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2" kindref="member">nrf_mvdma_source_error_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_mvdma_source_error_t nrf_mvdma_source_error_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg)</argsstring>
        <name>nrf_mvdma_source_error_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the bus error of MVDMA data source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bus error of data source. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="645" column="44" bodyfile="hal/nrf_mvdma.h" bodystart="645" bodyend="652" declfile="hal/nrf_mvdma.h" declline="443" declcolumn="44"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga0a4df038da3b5e328413aed798212d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__mvdma__hal_1ga98f9129dba13ac35d89a1cfc60c2e4e9" kindref="member">nrf_mvdma_sink_error_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_mvdma_sink_error_t nrf_mvdma_sink_error_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg)</argsstring>
        <name>nrf_mvdma_sink_error_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the bus error of MVDMA data source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Bus error of data sink. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="654" column="42" bodyfile="hal/nrf_mvdma.h" bodystart="654" bodyend="661" declfile="hal/nrf_mvdma.h" declline="452" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga27ce2352bcae4bec021641c662e88a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mvdma_last_source_address_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg)</argsstring>
        <name>nrf_mvdma_last_source_address_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the latest address being accessed on the source AXI channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Latest address being accessed on the source AXI channel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="663" column="28" bodyfile="hal/nrf_mvdma.h" bodystart="663" bodyend="670" declfile="hal/nrf_mvdma.h" declline="461" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1gac83dac3081b964c22bc05821f0f485fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mvdma_last_sink_address_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg)</argsstring>
        <name>nrf_mvdma_last_sink_address_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the latest address being accessed on the sink AXI channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Latest address being accessed on the sink AXI channel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="672" column="28" bodyfile="hal/nrf_mvdma.h" bodystart="672" bodyend="679" declfile="hal/nrf_mvdma.h" declline="470" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1gaaa85c9f87d1afa300b35d39675fdf11a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mvdma_source_job_count_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg)</argsstring>
        <name>nrf_mvdma_source_job_count_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of completed jobs in the current source descriptor list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of completed jobs in the current source descriptor list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="681" column="28" bodyfile="hal/nrf_mvdma.h" bodystart="681" bodyend="688" declfile="hal/nrf_mvdma.h" declline="479" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__mvdma__hal_1ga6eaf1d2c50551a0a955650036486b7dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_mvdma_sink_job_count_get</definition>
        <argsstring>(NRF_MVDMA_Type const *p_reg)</argsstring>
        <name>nrf_mvdma_sink_job_count_get</name>
        <param>
          <type>NRF_MVDMA_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of completed jobs in the current sink descriptor list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of completed jobs in the current sink descriptor list. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_mvdma.h" line="690" column="28" bodyfile="hal/nrf_mvdma.h" bodystart="690" bodyend="697" declfile="hal/nrf_mvdma.h" declline="488" declcolumn="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_MVDMA_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MVDMA_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;helpers/nrf_vdma.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="44"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_mvdma_hal<sp/>MVDMA<sp/>HAL</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_mvdma</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>Memory-to-Memory<sp/>Vector<sp/>DMA<sp/>(MVDMA)<sp/>peripheral.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MVDMA_TASKS_PAUSE_TASKS_PAUSE_Pos)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="52"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>MVDMA<sp/>uses<sp/>new<sp/>or<sp/>old<sp/>version.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MVDMA_HAS_NEW_VER<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MVDMA_HAS_NEW_VER<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(MVDMA_CONFIG_AXIMODE_AXIMODE_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>AXIMODE<sp/>configuration<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MVDMA_HAS_AXIMODE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MVDMA_HAS_AXIMODE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(MVDMA_JOBLISTCOUNT<sp/>&gt;<sp/>1)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment">/**<sp/>@brief<sp/>Macro<sp/>for<sp/>checking<sp/>if<sp/>multi-mode<sp/>operation<sp/>is<sp/>available.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MVDMA_HAS_MULTIMODE<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_MVDMA_HAS_MULTIMODE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="72"><highlight class="comment">/**<sp/>@brief<sp/>MVDMA<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea8d93caf32970ead40bb7991d191ada8a" kindref="member">NRF_MVDMA_TASK_PAUSE</ref><sp/><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>TASKS_PAUSE),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pause<sp/>DMA<sp/>transaction<sp/>at<sp/>next<sp/>idle<sp/>stage<sp/>on<sp/>memory<sp/>bus.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MVDMA_TASK_STOP<sp/><sp/><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>TASKS_STOP),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Stop<sp/>DMA<sp/>transaction<sp/>immediately,<sp/>or<sp/>after<sp/>an<sp/>ongoing<sp/>AXI<sp/>burst.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eeab1c2e0da085f0f0657f178da17be5f34" kindref="member">NRF_MVDMA_TASK_RESET</ref><sp/><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>TASKS_RESET),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Return<sp/>all<sp/>registers<sp/>to<sp/>default<sp/>state<sp/>and<sp/>FSMs<sp/>to<sp/>IDLE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea4148010af285f4346a78bf058387e661" kindref="member">NRF_MVDMA_TASK_START0</ref><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>TASKS_START[0]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>or<sp/>continue<sp/>processing<sp/>of<sp/>descriptor<sp/>list<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea94490cc7e4f8df4a77de196f000017c5" kindref="member">NRF_MVDMA_TASK_START1</ref><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>TASKS_START[1]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>or<sp/>continue<sp/>processing<sp/>of<sp/>descriptor<sp/>list<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea30a2e2301c0737476fc3bc351441e7b3" kindref="member">NRF_MVDMA_TASK_START2</ref><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>TASKS_START[2]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>or<sp/>continue<sp/>processing<sp/>of<sp/>descriptor<sp/>list<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea15d1a042da8dd5c050b9a30456e3c23e" kindref="member">NRF_MVDMA_TASK_START3</ref><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>TASKS_START[3]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>or<sp/>continue<sp/>processing<sp/>of<sp/>descriptor<sp/>list<sp/>3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea3bcc5e0f52e9dfc4791905d2e6d132d8" kindref="member">NRF_MVDMA_TASK_START4</ref><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>TASKS_START[4]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>or<sp/>continue<sp/>processing<sp/>of<sp/>descriptor<sp/>list<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea4f2950563085d427cab7836915f1b577" kindref="member">NRF_MVDMA_TASK_START5</ref><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>TASKS_START[5]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>or<sp/>continue<sp/>processing<sp/>of<sp/>descriptor<sp/>list<sp/>5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea8ce83fb0c6772416e41762250d3a1ae3" kindref="member">NRF_MVDMA_TASK_START6</ref><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>TASKS_START[6]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>or<sp/>continue<sp/>processing<sp/>of<sp/>descriptor<sp/>list<sp/>6.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ggae8bc5cb67530b3f15c89775ca88116eea1c2e2be600f394f67910e9252bcf2431" kindref="member">NRF_MVDMA_TASK_START7</ref><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>TASKS_START[7]),<sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>or<sp/>continue<sp/>processing<sp/>of<sp/>descriptor<sp/>list<sp/>7.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">}<sp/><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="91"><highlight class="comment">/**<sp/>@brief<sp/>MVDMA<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fad39f02c6e66781fdb74dd359507034ce" kindref="member">NRF_MVDMA_EVENT_END</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>EVENTS_END),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Sink<sp/>data<sp/>descriptor<sp/>list<sp/>has<sp/>been<sp/>completed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fac50a517bbd48467bb55a2ac017ba6777" kindref="member">NRF_MVDMA_EVENT_STARTED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>EVENTS_STARTED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Data<sp/>descriptor<sp/>list<sp/>processing<sp/>has<sp/>been<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fa59980a449a84dbb08da5dce4ab2f1a99" kindref="member">NRF_MVDMA_EVENT_PAUSED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>EVENTS_PAUSED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Data<sp/>transfer<sp/>has<sp/>been<sp/>paused.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MVDMA_EVENT_STOPPED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>EVENTS_STOPPED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Data<sp/>descriptor<sp/>list<sp/>processing<sp/>has<sp/>been<sp/>stopped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fac4e8ebd0e07363938099f074f2825e0a" kindref="member">NRF_MVDMA_EVENT_RESET</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>EVENTS_RESET),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>MVDMA<sp/>has<sp/>been<sp/>reset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fa125898a4bae1add7fdf040f74b541cd6" kindref="member">NRF_MVDMA_EVENT_SOURCEBUSERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>EVENTS_SOURCE.BUSERROR),<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bus<sp/>error<sp/>has<sp/>been<sp/>received<sp/>on<sp/>the<sp/>source<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fa63d43fee3a4bffbcd5c70d153177a4bf" kindref="member">NRF_MVDMA_EVENT_SOURCESELECTJOBDONE</ref><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>EVENTS_SOURCE.SELECTJOBDONE),<sp/></highlight><highlight class="comment">///&lt;<sp/>Job<sp/>on<sp/>the<sp/>source<sp/>channel<sp/>with<sp/>event<sp/>enable<sp/>attribute<sp/>bit<sp/>active<sp/>has<sp/>been<sp/>processed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fa125898a4bae1add7fdf040f74b541cd6" kindref="member">NRF_MVDMA_EVENT_SOURCEBUSERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>EVENTS_SOURCEBUSERROR),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bus<sp/>error<sp/>has<sp/>been<sp/>received<sp/>on<sp/>the<sp/>source<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5faa8c96f13ef51ad9e896e0cbe57405f7f" kindref="member">NRF_MVDMA_EVENT_SINKBUSERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>EVENTS_SINK.BUSERROR),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bus<sp/>error<sp/>has<sp/>been<sp/>received<sp/>on<sp/>the<sp/>sink<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5fadd433afccebae42c2d0d7de3eaac4871" kindref="member">NRF_MVDMA_EVENT_SINKSELECTJOBDONE</ref><sp/><sp/><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>EVENTS_SINK.SELECTJOBDONE),<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Job<sp/>on<sp/>the<sp/>sink<sp/>channel<sp/>with<sp/>event<sp/>enable<sp/>attribute<sp/>bit<sp/>active<sp/>has<sp/>been<sp/>processed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga10d2949383a7405b41eeed35d9a02a5faa8c96f13ef51ad9e896e0cbe57405f7f" kindref="member">NRF_MVDMA_EVENT_SINKBUSERROR</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_MVDMA_Type,<sp/>EVENTS_SINKBUSERROR),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bus<sp/>error<sp/>has<sp/>been<sp/>received<sp/>on<sp/>the<sp/>sink<sp/>channel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal">}<sp/><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment">/**<sp/>@brief<sp/>MVDMA<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118affe923eb0be9c30897dbaabd5f39bf6e" kindref="member">NRF_MVDMA_INT_END_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_INTENSET_END_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>END<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118a1e63156ea82b9e69f933d41cbe3d2fef" kindref="member">NRF_MVDMA_INT_STARTED_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_INTENSET_STARTED_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>STARTED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118a0174f813042616ed2d01d83d56b7cbd7" kindref="member">NRF_MVDMA_INT_PAUSED_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_INTENSET_PAUSED_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>PAUSED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MVDMA_INT_STOPPED_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_INTENSET_STOPPED_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>STOPPED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118a030611bf56d898b647e528f2d00947ee" kindref="member">NRF_MVDMA_INT_RESET_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_INTENSET_RESET_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>RESET<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118a4d7df2105f1d4c36acaadc561961e175" kindref="member">NRF_MVDMA_INT_SOURCEBUSERROR_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_INTENSET_SOURCEBUSERROR_Msk,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>SOURCEBUSERROR<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118ad7f55b60ba24d68894cc4e05a0e8f1b7" kindref="member">NRF_MVDMA_INT_SINKBUSERROR_MASK</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_INTENSET_SINKBUSERROR_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>SINKBUSERROR<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118ac46aa7a8cc404fcd046b66e7814189fc" kindref="member">NRF_MVDMA_INT_SOURCESELECTJOBDONE_MASK</ref><sp/>=<sp/>MVDMA_INTENSET_SOURCESELECTJOBDONE_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>SOURCESELECTJOBDONE<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga2fc7541ce6835a58a26f9ba3794f3118a38dd7c7691e7400d4b56dbc86e287c70" kindref="member">NRF_MVDMA_INT_SINKSELECTJOBDONE_MASK</ref><sp/><sp/><sp/>=<sp/>MVDMA_INTENSET_SINKSELECTJOBDONE_Msk,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>SINKSELECTJOBDONE<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">}<sp/><ref refid="group__nrf__mvdma__hal_1ga2fc7541ce6835a58a26f9ba3794f3118" kindref="member">nrf_mvdma_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="135"><highlight class="comment">/**<sp/>@brief<sp/>MVDMA<sp/>modes<sp/>of<sp/>operation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga611db7934e2236bfe69148e89823a3a3a4c1401a19a7d56f3df8673f45ec820c3" kindref="member">NRF_MVDMA_MODE_SINGLE</ref><sp/>=<sp/>MVDMA_CONFIG_MODE_MODE_SingleMode,<sp/></highlight><highlight class="comment">///&lt;<sp/>Descriptor<sp/>list<sp/>pointers<sp/>are<sp/>stored<sp/>in<sp/>SOURCELISTPTR<sp/>and<sp/>SINKLISTPTR<sp/>registers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga611db7934e2236bfe69148e89823a3a3a2e74b11949b60934564bbb3b708fec39" kindref="member">NRF_MVDMA_MODE_MULTI</ref><sp/><sp/>=<sp/>MVDMA_CONFIG_MODE_MODE_MultiMode,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Descriptor<sp/>list<sp/>pointers<sp/>are<sp/>stored<sp/>in<sp/>a<sp/>list<sp/>in<sp/>the<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">}<sp/><ref refid="group__nrf__mvdma__hal_1ga611db7934e2236bfe69148e89823a3a3" kindref="member">nrf_mvdma_mode_t</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_AXIMODE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment">/**<sp/>@brief<sp/>MVDMA<sp/>AXI<sp/>modes.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga064227e6f56210dfaaecbef20ada7377a9bf466b3bcc69a72e90032f4d62a4071" kindref="member">NRF_MVDMA_AXIMODE_AXI</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_CONFIG_AXIMODE_AXIMODE_AXI,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>AXI<sp/>burst<sp/>transactions<sp/>may<sp/>be<sp/>longer<sp/>than<sp/>one<sp/>beat.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga064227e6f56210dfaaecbef20ada7377a2e11e5def1f02f70d6fcc68da0602eec" kindref="member">NRF_MVDMA_AXIMODE_AXILITE</ref><sp/>=<sp/>MVDMA_CONFIG_AXIMODE_AXIMODE_AXILITE,<sp/></highlight><highlight class="comment">///&lt;<sp/>All<sp/>AXI<sp/>transactions<sp/>are<sp/>one-beat<sp/>accesses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">}<sp/><ref refid="group__nrf__mvdma__hal_1ga064227e6f56210dfaaecbef20ada7377" kindref="member">nrf_mvdma_aximode_t</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment">/**<sp/>@brief<sp/>MVDMA<sp/>FIFO<sp/>status.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ggae569c468089413c6e25a5108060e8cb1a5cdd6b960f67c71fd0572ab548b39e15" kindref="member">NRF_MVDMA_FIFO_STATUS_EMPTY</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_STATUS_FIFO_FIFOSTATUS_Empty,<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>No<sp/>data<sp/>in<sp/>intermediate<sp/>FIFO.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ggae569c468089413c6e25a5108060e8cb1aacd8c10ee2deb2eaa4f9f25b4aad4a47" kindref="member">NRF_MVDMA_FIFO_STATUS_NOT_EMPTY</ref><sp/><sp/><sp/>=<sp/>MVDMA_STATUS_FIFO_FIFOSTATUS_NotEmpty,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Intermediate<sp/>FIFO<sp/>contains<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MVDMA_FIFO_STATUS_ALMOST_FULL<sp/>=<sp/>MVDMA_STATUS_FIFO_FIFOSTATUS_AlmostFull,<sp/></highlight><highlight class="comment">///&lt;<sp/>Intermediate<sp/>FIFO<sp/>is<sp/>almost<sp/>full.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ggae569c468089413c6e25a5108060e8cb1ab6f8c8b599317a38a7623f7a3b4667dd" kindref="member">NRF_MVDMA_FIFO_STATUS_FULL</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_STATUS_FIFO_FIFOSTATUS_Full,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Intermediate<sp/>FIFO<sp/>is<sp/>full.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">}<sp/><ref refid="group__nrf__mvdma__hal_1gae569c468089413c6e25a5108060e8cb1" kindref="member">nrf_mvdma_fifo_status_t</ref>;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="163"><highlight class="comment">/**<sp/>@brief<sp/>MVDMA<sp/>data<sp/>source<sp/>errors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2adf74833a0e7246da1bc9580e9b715d4a" kindref="member">NRF_MVDMA_SOURCE_ERROR_NONE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_SOURCE_BUSERROR_BUSERROR_NoError,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>No<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2aa25d0ae7aa6b817f7feba44a6e2d20f0" kindref="member">NRF_MVDMA_SOURCE_ERROR_READ</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_SOURCE_BUSERROR_BUSERROR_ReadError,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>related<sp/>to<sp/>memory<sp/>when<sp/>reading<sp/>joblist<sp/>or<sp/>memory/register<sp/>when<sp/>reading<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2aac6767a699a33b6c09cedab003cb16b5" kindref="member">NRF_MVDMA_SOURCE_ERROR_READ_DECODE</ref><sp/>=<sp/>MVDMA_SOURCE_BUSERROR_BUSERROR_ReadDecodeError,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>related<sp/>to<sp/>the<sp/>joblist<sp/>address<sp/>or<sp/>address<sp/>when<sp/>reading<sp/>memory/register.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2adf74833a0e7246da1bc9580e9b715d4a" kindref="member">NRF_MVDMA_SOURCE_ERROR_NONE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_STATUS_SOURCEBUSERROR_BUSERROR_NoError,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>No<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MVDMA_SOURCE_ERROR_SLAVE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_STATUS_SOURCEBUSERROR_BUSERROR_SlaveError,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>generated<sp/>by<sp/>AXI<sp/>slave.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MVDMA_SOURCE_ERROR_DECODE<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_STATUS_SOURCEBUSERROR_BUSERROR_DecodeError,<sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>generated<sp/>by<sp/>interconnect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">}<sp/><ref refid="group__nrf__mvdma__hal_1ga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2" kindref="member">nrf_mvdma_source_error_t</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="177"><highlight class="comment">/**<sp/>@brief<sp/>MVDMA<sp/>data<sp/>sink<sp/>errors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga98f9129dba13ac35d89a1cfc60c2e4e9ae502dfe703c1e1285c397502718ca0e0" kindref="member">NRF_MVDMA_SINK_ERROR_NONE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_SINK_BUSERROR_BUSERROR_NoError,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>No<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga98f9129dba13ac35d89a1cfc60c2e4e9a3f43fe8ee11e981cba89b6d3d51896c1" kindref="member">NRF_MVDMA_SINK_ERROR_READ</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_SINK_BUSERROR_BUSERROR_ReadError,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>related<sp/>to<sp/>memory<sp/>when<sp/>reading<sp/>joblist.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga98f9129dba13ac35d89a1cfc60c2e4e9ad30bebc074b9a784a656df0d3d58f27f" kindref="member">NRF_MVDMA_SINK_ERROR_WRITE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_SINK_BUSERROR_BUSERROR_WriteError,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>related<sp/>to<sp/>memory/register<sp/>when<sp/>writing<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga98f9129dba13ac35d89a1cfc60c2e4e9a3b1bc48232265a979a5f7818861e6793" kindref="member">NRF_MVDMA_SINK_ERROR_DECODE_READ</ref><sp/><sp/>=<sp/>MVDMA_SINK_BUSERROR_BUSERROR_ReadDecodeError,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>related<sp/>to<sp/>the<sp/>joblist<sp/>address<sp/>when<sp/>reading<sp/>joblist.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga98f9129dba13ac35d89a1cfc60c2e4e9a13852bfce127855c75243cf1f4a52f6f" kindref="member">NRF_MVDMA_SINK_ERROR_DECODE_WRITE</ref><sp/>=<sp/>MVDMA_SINK_BUSERROR_BUSERROR_WriteDecodeError,<sp/></highlight><highlight class="comment">///&lt;<sp/>Error<sp/>related<sp/>to<sp/>the<sp/>memory/register<sp/>address<sp/>when<sp/>writing<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga98f9129dba13ac35d89a1cfc60c2e4e9ae502dfe703c1e1285c397502718ca0e0" kindref="member">NRF_MVDMA_SINK_ERROR_NONE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>MVDMA_STATUS_SINKBUSERROR_BUSERROR_NoError,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>No<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MVDMA_SINK_ERROR_SLAVE_READ<sp/><sp/><sp/>=<sp/>MVDMA_STATUS_SINKBUSERROR_BUSERROR_ReadSlaveError,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Read<sp/>error<sp/>generated<sp/>by<sp/>AXI<sp/>slave.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_MVDMA_SINK_ERROR_SLAVE_WRITE<sp/><sp/>=<sp/>MVDMA_STATUS_SINKBUSERROR_BUSERROR_WriteSlaveError,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>error<sp/>generated<sp/>by<sp/>AXI<sp/>slave.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga98f9129dba13ac35d89a1cfc60c2e4e9a3b1bc48232265a979a5f7818861e6793" kindref="member">NRF_MVDMA_SINK_ERROR_DECODE_READ</ref><sp/><sp/>=<sp/>MVDMA_STATUS_SINKBUSERROR_BUSERROR_ReadDecodeError,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Read<sp/>error<sp/>generated<sp/>by<sp/>interconnect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gga98f9129dba13ac35d89a1cfc60c2e4e9a13852bfce127855c75243cf1f4a52f6f" kindref="member">NRF_MVDMA_SINK_ERROR_DECODE_WRITE</ref><sp/>=<sp/>MVDMA_STATUS_SINKBUSERROR_BUSERROR_WriteDecodeError,<sp/></highlight><highlight class="comment">///&lt;<sp/>Write<sp/>error<sp/>generated<sp/>by<sp/>interconnect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal">}<sp/><ref refid="group__nrf__mvdma__hal_1ga98f9129dba13ac35d89a1cfc60c2e4e9" kindref="member">nrf_mvdma_sink_error_t</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="195"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>activating<sp/>the<sp/>specified<sp/>MVDMA<sp/>task.</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>to<sp/>be<sp/>activated.</highlight></codeline>
<codeline lineno="200"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga8ff4dd7798c2e64bc78ae3fe6f662532" kindref="member">nrf_mvdma_task_trigger</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="204"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>MVDMA<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Specified<sp/>task.</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1gafcbc21aa3b202cea94a75170ea2c8d79" kindref="member">nrf_mvdma_task_address_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="215"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>START<sp/>task<sp/>by<sp/>its<sp/>index.</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Index<sp/>of<sp/>the<sp/>START<sp/>task.</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/>*<sp/>@return<sp/>START<sp/>task.</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref><sp/><ref refid="group__nrf__mvdma__hal_1ga770ec8d1849122f7bf50341e0bceb7a6" kindref="member">nrf_mvdma_start_task_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="226"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specified<sp/>MVDMA<sp/>event.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>clear.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga74a7b2e9a23a8eeaa82bdce6b9575374" kindref="member">nrf_mvdma_event_clear</ref>(NRF_MVDMA_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="235"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>MVDMA<sp/>event.</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga367b9509c93895cb50689d31ac284c01" kindref="member">nrf_mvdma_event_check</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="247"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>MVDMA<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Specified<sp/>event.</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1ga7d44269c67a65e59a4a9606593782002" kindref="member">nrf_mvdma_event_address_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="258"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_mvdma_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga519024a15bce6aa1ce1c25ca32e9a5a3" kindref="member">nrf_mvdma_int_enable</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="267"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_mvdma_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga18e7178bdf80b95ac9d531fcbeb0d7c6" kindref="member">nrf_mvdma_int_disable</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="276"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="279"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="280"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="281"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_mvdma_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="284"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1ga773770b5370b2f21403fffa5bb532598" kindref="member">nrf_mvdma_int_enable_check</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="287"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>pending<sp/>interrupts.</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>@note<sp/>States<sp/>of<sp/>pending<sp/>interrupt<sp/>are<sp/>saved<sp/>as<sp/>a<sp/>bitmask.</highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>One<sp/>set<sp/>at<sp/>particular<sp/>position<sp/>means<sp/>that<sp/>interrupt<sp/>for<sp/>event<sp/>is<sp/>pending.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="293"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="294"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="295"><highlight class="comment"><sp/>*<sp/>@return<sp/>Bitmask<sp/>with<sp/>information<sp/>about<sp/>pending<sp/>interrupts.</highlight></codeline>
<codeline lineno="296"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_mvdma_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="297"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1ga88407231c53c6d9d92ab20ab6c81110d" kindref="member">nrf_mvdma_int_pending_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="301"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MVDMA<sp/>task.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga855b2fdd44b7e7a4bce7659b5190f54e" kindref="member">nrf_mvdma_subscribe_set</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="313"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MVDMA<sp/>task.</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga962201d7a29f3b10c4a520248efa4057" kindref="member">nrf_mvdma_subscribe_clear</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="323"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MVDMA<sp/>event.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1gaa9370f101858358a70af0964ca7a056a" kindref="member">nrf_mvdma_publish_set</ref>(NRF_MVDMA_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="335"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MVDMA<sp/>event.</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1gadc4859cd77da19bb928f0a477e5c3c39" kindref="member">nrf_mvdma_publish_clear</ref>(NRF_MVDMA_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="346"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>MVDMA<sp/>mode.</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="349"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="350"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mode<sp/><sp/>Desired<sp/>operating<sp/>mode<sp/>for<sp/>MVDMA.</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga0efe65b3bb929a13864bb29e0b570428" kindref="member">nrf_mvdma_mode_set</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__mvdma__hal_1ga611db7934e2236bfe69148e89823a3a3" kindref="member">nrf_mvdma_mode_t</ref><sp/>mode);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_AXIMODE</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="355"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>AXI<sp/>mode.</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>aximode<sp/>Desired<sp/>AXI<sp/>mode<sp/>for<sp/>MVDMA.</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga313afb53dca74554c3b4356b7246f517" kindref="member">nrf_mvdma_aximode_set</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__mvdma__hal_1ga064227e6f56210dfaaecbef20ada7377" kindref="member">nrf_mvdma_aximode_t</ref><sp/>aximode);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="364"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>source<sp/>descriptor<sp/>list</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>pointer<sp/>to<sp/>the<sp/>list<sp/>of<sp/>descriptor<sp/>list<sp/>pointers,</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depending<sp/>on<sp/>configured<sp/>@ref<sp/>nrf_mvdma_mode_t<sp/>mode.</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_job<sp/>Pointer<sp/>to<sp/>a<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="371"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga6ee1a92116337e8fc4c1f5cdba571778" kindref="member">nrf_mvdma_source_list_ptr_set</ref>(NRF_MVDMA_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="375"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="376"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>source<sp/>descriptor<sp/>list</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>pointer<sp/>to<sp/>the<sp/>list<sp/>of<sp/>descriptor<sp/>list<sp/>pointers,</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depending<sp/>on<sp/>configured<sp/>@ref<sp/>nrf_mvdma_mode_t<sp/>mode.</highlight></codeline>
<codeline lineno="379"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>a<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__mvdma__hal_1ga600ce66bf59c367d736c20a9cad42a4b" kindref="member">nrf_mvdma_source_list_ptr_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="386"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>sink<sp/>descriptor<sp/>list</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>pointer<sp/>to<sp/>the<sp/>list<sp/>of<sp/>descriptor<sp/>list<sp/>pointers,</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depending<sp/>on<sp/>configured<sp/>@ref<sp/>nrf_mvdma_mode_t<sp/>mode.</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="392"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_job<sp/>Pointer<sp/>to<sp/>a<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="393"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1gab120702d8cc46932695bcfa1b8b700a0" kindref="member">nrf_mvdma_sink_list_ptr_set</ref>(NRF_MVDMA_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="397"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="398"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>sink<sp/>descriptor<sp/>list</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>or<sp/>pointer<sp/>to<sp/>the<sp/>list<sp/>of<sp/>descriptor<sp/>list<sp/>pointers,</highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>depending<sp/>on<sp/>configured<sp/>@ref<sp/>nrf_mvdma_mode_t<sp/>mode.</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="404"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>a<sp/>job<sp/>list.</highlight></codeline>
<codeline lineno="405"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__mvdma__hal_1gaf012e8c81fd1e2735b818a36f4e5cab7" kindref="member">nrf_mvdma_sink_list_ptr_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="408"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="409"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>result<sp/>of<sp/>CRC<sp/>checksum<sp/>calculation.</highlight></codeline>
<codeline lineno="410"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/>*<sp/>@return<sp/>Result<sp/>of<sp/>CRC<sp/>checksum<sp/>calculation.</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1ga8fbb296c6cb2888e3186bfeba3de4678" kindref="member">nrf_mvdma_crc_result_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="417"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>status<sp/>of<sp/>intermediate<sp/>FIFO.</highlight></codeline>
<codeline lineno="419"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="420"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="421"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/>*<sp/>@return<sp/>Intermediate<sp/>FIFO<sp/>status.</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__mvdma__hal_1gae569c468089413c6e25a5108060e8cb1" kindref="member">nrf_mvdma_fifo_status_t</ref><sp/><ref refid="group__nrf__mvdma__hal_1gaa604217304e34b65605fb1cdc7160689" kindref="member">nrf_mvdma_fifo_status_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="426"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>the<sp/>MVDMA<sp/>activity.</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>MVDMA<sp/>is<sp/>processing<sp/>data.</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>MVDMA<sp/>is<sp/>idle.</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga048d320f31fc4f79927e69ba28b97f3a" kindref="member">nrf_mvdma_activity_check</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="436"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>bus<sp/>error<sp/>of<sp/>MVDMA<sp/>data<sp/>source.</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*<sp/>@return<sp/>Bus<sp/>error<sp/>of<sp/>data<sp/>source.</highlight></codeline>
<codeline lineno="442"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__mvdma__hal_1ga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2" kindref="member">nrf_mvdma_source_error_t</ref><sp/><ref refid="group__nrf__mvdma__hal_1gab11530bca70704fa00c6605fc5df11f0" kindref="member">nrf_mvdma_source_error_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="445"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>bus<sp/>error<sp/>of<sp/>MVDMA<sp/>data<sp/>source.</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/>@return<sp/>Bus<sp/>error<sp/>of<sp/>data<sp/>sink.</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__mvdma__hal_1ga98f9129dba13ac35d89a1cfc60c2e4e9" kindref="member">nrf_mvdma_sink_error_t</ref><sp/><ref refid="group__nrf__mvdma__hal_1ga0a4df038da3b5e328413aed798212d73" kindref="member">nrf_mvdma_sink_error_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="454"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>latest<sp/>address<sp/>being<sp/>accessed<sp/>on<sp/>the<sp/>source<sp/>AXI<sp/>channel.</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/>@return<sp/>Latest<sp/>address<sp/>being<sp/>accessed<sp/>on<sp/>the<sp/>source<sp/>AXI<sp/>channel.</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1ga27ce2352bcae4bec021641c662e88a71" kindref="member">nrf_mvdma_last_source_address_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="463"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="464"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>latest<sp/>address<sp/>being<sp/>accessed<sp/>on<sp/>the<sp/>sink<sp/>AXI<sp/>channel.</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*<sp/>@return<sp/>Latest<sp/>address<sp/>being<sp/>accessed<sp/>on<sp/>the<sp/>sink<sp/>AXI<sp/>channel.</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1gac83dac3081b964c22bc05821f0f485fb" kindref="member">nrf_mvdma_last_sink_address_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="472"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>completed<sp/>jobs<sp/>in<sp/>the<sp/>current<sp/>source<sp/>descriptor<sp/>list.</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>completed<sp/>jobs<sp/>in<sp/>the<sp/>current<sp/>source<sp/>descriptor<sp/>list.</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1gaaa85c9f87d1afa300b35d39675fdf11a" kindref="member">nrf_mvdma_source_job_count_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="481"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>completed<sp/>jobs<sp/>in<sp/>the<sp/>current<sp/>sink<sp/>descriptor<sp/>list.</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>completed<sp/>jobs<sp/>in<sp/>the<sp/>current<sp/>sink<sp/>descriptor<sp/>list.</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1ga6eaf1d2c50551a0a955650036486b7dc" kindref="member">nrf_mvdma_sink_job_count_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga8ff4dd7798c2e64bc78ae3fe6f662532" kindref="member">nrf_mvdma_task_trigger</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="494"><highlight class="normal">{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1uL;</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1gafcbc21aa3b202cea94a75170ea2c8d79" kindref="member">nrf_mvdma_task_address_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="500"><highlight class="normal">{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)task);</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref><sp/><ref refid="group__nrf__mvdma__hal_1ga770ec8d1849122f7bf50341e0bceb7a6" kindref="member">nrf_mvdma_start_task_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)p_reg;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref>)(<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_MVDMA_Type,<sp/>TASKS_START[index]));</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga74a7b2e9a23a8eeaa82bdce6b9575374" kindref="member">nrf_mvdma_event_clear</ref>(NRF_MVDMA_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0uL;</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga367b9509c93895cb50689d31ac284c01" kindref="member">nrf_mvdma_event_check</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1ga7d44269c67a65e59a4a9606593782002" kindref="member">nrf_mvdma_event_address_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint32_t)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga519024a15bce6aa1ce1c25ca32e9a5a3" kindref="member">nrf_mvdma_int_enable</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga18e7178bdf80b95ac9d531fcbeb0d7c6" kindref="member">nrf_mvdma_int_disable</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="535"><highlight class="normal">{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="537"><highlight class="normal">}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1ga773770b5370b2f21403fffa5bb532598" kindref="member">nrf_mvdma_int_enable_check</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask);</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1ga88407231c53c6d9d92ab20ab6c81110d" kindref="member">nrf_mvdma_int_pending_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="545"><highlight class="normal">{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTPEND;</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga855b2fdd44b7e7a4bce7659b5190f54e" kindref="member">nrf_mvdma_subscribe_set</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga962201d7a29f3b10c4a520248efa4057" kindref="member">nrf_mvdma_subscribe_clear</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1gae8bc5cb67530b3f15c89775ca88116ee" kindref="member">nrf_mvdma_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1gaa9370f101858358a70af0964ca7a056a" kindref="member">nrf_mvdma_publish_set</ref>(NRF_MVDMA_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="567"><highlight class="normal">{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="570"><highlight class="normal">}</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1gadc4859cd77da19bb928f0a477e5c3c39" kindref="member">nrf_mvdma_publish_clear</ref>(NRF_MVDMA_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__mvdma__hal_1ga10d2949383a7405b41eeed35d9a02a5f" kindref="member">nrf_mvdma_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga0efe65b3bb929a13864bb29e0b570428" kindref="member">nrf_mvdma_mode_set</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__mvdma__hal_1ga611db7934e2236bfe69148e89823a3a3" kindref="member">nrf_mvdma_mode_t</ref><sp/>mode)</highlight></codeline>
<codeline lineno="580"><highlight class="normal">{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CONFIG.MODE<sp/>=<sp/>((uint32_t)mode<sp/>&lt;&lt;<sp/>MVDMA_CONFIG_MODE_MODE_Pos);</highlight></codeline>
<codeline lineno="582"><highlight class="normal">}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_AXIMODE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga313afb53dca74554c3b4356b7246f517" kindref="member">nrf_mvdma_aximode_set</ref>(NRF_MVDMA_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__mvdma__hal_1ga064227e6f56210dfaaecbef20ada7377" kindref="member">nrf_mvdma_aximode_t</ref><sp/>aximode)</highlight></codeline>
<codeline lineno="586"><highlight class="normal">{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CONFIG.AXIMODE<sp/>=<sp/>((uint32_t)aximode<sp/>&lt;&lt;<sp/>MVDMA_CONFIG_AXIMODE_AXIMODE_Pos);</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga6ee1a92116337e8fc4c1f5cdba571778" kindref="member">nrf_mvdma_source_list_ptr_set</ref>(NRF_MVDMA_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job)</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SOURCE.LISTPTR<sp/>=<sp/>(uint32_t)p_job;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CONFIG.SOURCELISTPTR<sp/>=<sp/>(uint32_t)p_job;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__mvdma__hal_1ga600ce66bf59c367d736c20a9cad42a4b" kindref="member">nrf_mvdma_source_list_ptr_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*)(p_reg-&gt;SOURCE.LISTPTR);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*)(p_reg-&gt;CONFIG.SOURCELISTPTR);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1gab120702d8cc46932695bcfa1b8b700a0" kindref="member">nrf_mvdma_sink_list_ptr_set</ref>(NRF_MVDMA_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_job)</highlight></codeline>
<codeline lineno="612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SINK.LISTPTR<sp/>=<sp/>(uint32_t)p_job;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CONFIG.SINKLISTPTR<sp/>=<sp/>(uint32_t)p_job;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*<sp/><ref refid="group__nrf__mvdma__hal_1gaf012e8c81fd1e2735b818a36f4e5cab7" kindref="member">nrf_mvdma_sink_list_ptr_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*)(p_reg-&gt;SINK.LISTPTR);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="structnrf__vdma__job__t" kindref="compound">nrf_vdma_job_t</ref><sp/>*)(p_reg-&gt;CONFIG.SINKLISTPTR);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1ga8fbb296c6cb2888e3186bfeba3de4678" kindref="member">nrf_mvdma_crc_result_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;STATUS.CRCRESULT;</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__mvdma__hal_1gae569c468089413c6e25a5108060e8cb1" kindref="member">nrf_mvdma_fifo_status_t</ref><sp/><ref refid="group__nrf__mvdma__hal_1gaa604217304e34b65605fb1cdc7160689" kindref="member">nrf_mvdma_fifo_status_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__mvdma__hal_1gae569c468089413c6e25a5108060e8cb1" kindref="member">nrf_mvdma_fifo_status_t</ref>)(p_reg-&gt;STATUS.FIFO);</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__mvdma__hal_1ga048d320f31fc4f79927e69ba28b97f3a" kindref="member">nrf_mvdma_activity_check</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="640"><highlight class="normal">{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;STATUS.ACTIVE<sp/>==</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(MVDMA_STATUS_ACTIVE_ACTIVE_Active<sp/>&lt;&lt;<sp/>MVDMA_STATUS_ACTIVE_ACTIVE_Pos));</highlight></codeline>
<codeline lineno="643"><highlight class="normal">}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__mvdma__hal_1ga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2" kindref="member">nrf_mvdma_source_error_t</ref><sp/><ref refid="group__nrf__mvdma__hal_1gab11530bca70704fa00c6605fc5df11f0" kindref="member">nrf_mvdma_source_error_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__mvdma__hal_1ga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2" kindref="member">nrf_mvdma_source_error_t</ref>)(p_reg-&gt;SOURCE.BUSERROR);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__mvdma__hal_1ga5b4c6f5dc7fb23b4d6c9f3d185fbc2c2" kindref="member">nrf_mvdma_source_error_t</ref>)(p_reg-&gt;STATUS.SOURCEBUSERROR);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__mvdma__hal_1ga98f9129dba13ac35d89a1cfc60c2e4e9" kindref="member">nrf_mvdma_sink_error_t</ref><sp/><ref refid="group__nrf__mvdma__hal_1ga0a4df038da3b5e328413aed798212d73" kindref="member">nrf_mvdma_sink_error_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__mvdma__hal_1ga98f9129dba13ac35d89a1cfc60c2e4e9" kindref="member">nrf_mvdma_sink_error_t</ref>)(p_reg-&gt;SINK.BUSERROR);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__mvdma__hal_1ga98f9129dba13ac35d89a1cfc60c2e4e9" kindref="member">nrf_mvdma_sink_error_t</ref>)(p_reg-&gt;STATUS.SINKBUSERROR);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1ga27ce2352bcae4bec021641c662e88a71" kindref="member">nrf_mvdma_last_source_address_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="664"><highlight class="normal">{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SOURCE.ADDRESS;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;STATUS.SOURCEADDRESS;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal">}</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1gac83dac3081b964c22bc05821f0f485fb" kindref="member">nrf_mvdma_last_sink_address_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="673"><highlight class="normal">{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SINK.ADDRESS;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;STATUS.SINKADDRESS;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1gaaa85c9f87d1afa300b35d39675fdf11a" kindref="member">nrf_mvdma_source_job_count_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="682"><highlight class="normal">{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SOURCE.JOBCOUNT;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;STATUS.SOURCEJOBCOUNT;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__mvdma__hal_1ga6eaf1d2c50551a0a955650036486b7dc" kindref="member">nrf_mvdma_sink_job_count_get</ref>(NRF_MVDMA_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_MVDMA_HAS_NEW_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;SINK.JOBCOUNT;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;STATUS.SINKJOBCOUNT;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="701"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_MVDMA_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_mvdma.h"/>
  </compounddef>
</doxygen>
