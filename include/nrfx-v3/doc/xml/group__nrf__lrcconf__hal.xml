<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__lrcconf__hal" kind="group">
    <compoundname>nrf_lrcconf_hal</compoundname>
    <title>LRCCONF HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lrcconf_task_t</name>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05faff799953116e251e29dc4da501a05e38" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_0</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa9415c29b5a303c1319eb4209fa4c72d7" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_1</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa733a3950f12c0da81a7c7cc56f16b8bf" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_2</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05faf5bed850cff2b992c3655cd2bed97c81" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_3</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fadf9dda54d3fecb3bc1bba60514b98c31" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_4</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa20d66f2873bfacc2ee7e04891ba21b94" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_5</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa8e611e027acda8c9163f167d4c59316f" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_6</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa297c3e6734dc32dd460316dbdf1da225" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTART_7</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQCLKSRC[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request the clock source for clock 7. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa152543a3a429bd9f12ad98f34b3ba97d" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_0</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fac83ce0f9d6cebb31262d7cdad5b20048" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_1</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fab49e6004b01d443b8d753568e3df38f6" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_2</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa018f9de7f739e6895aad883dd4215df4" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_3</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05faa19e6b79da12672c6b2ba2a22183327b" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_4</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa880e0d3f26b0f1c73bc20a679b0138f8" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_5</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa115c9f55e376fdde62c6149ee9ff29f5" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_6</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa560291fbaf8ed07f75a2aaceec2451c3" prot="public">
          <name>NRF_LRCCONF_TASK_CLKSTOP_7</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQCLKSRC[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting the clock source for clock 7. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fac4406f22505ab0b19d5d31ab0e3395c1" prot="public">
          <name>NRF_LRCCONF_TASK_CONSTLAT_ENABLE</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_CONSTLAT.ENABLE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Enable constant latency mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa039be60c1c4bd2de0212e4de0b9f93f2" prot="public">
          <name>NRF_LRCCONF_TASK_CONSTLAT_DISABLE</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_CONSTLAT.DISABLE)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Disable constant latency mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa947710ff97a12e45a99d6fb98de16fcd" prot="public">
          <name>NRF_LRCCONF_TASK_SYSTEMOFFNOTREADY</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_SYSTEMOFF.NOTREADY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicate being not ready to system off . </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa26dbdc3c77955af64e7497cc1035b3ea" prot="public">
          <name>NRF_LRCCONF_TASK_SYSTEMOFFREADY</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_SYSTEMOFF.READY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Indicate being ready to system off . </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa65cf1e69827963e9fbee79c54802e975" prot="public">
          <name>NRF_LRCCONF_TASK_REQHFXO</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_REQHFXO)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request HFXO. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga14c0e42f25451dfea38ea44ab756e05fa8f1319f9a5b58c79db03d67cbe2110bc" prot="public">
          <name>NRF_LRCCONF_TASK_STOPREQHFXO</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, TASKS_STOPREQHFXO)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop requesting HFXO. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="63" column="1" bodyfile="hal/nrf_lrcconf.h" bodystart="64" bodyend="89"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lrcconf_event_t</name>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda9ce5d83ac5dcbcd3285b9d5e21eb1502" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_0</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[0])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 0 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda403f6fb165f9df898d6ae6fee29cc54b" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_1</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[1])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 1 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfdaa6e539618ff1555fd4ab0efa32286ba0" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_2</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[2])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 2 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda02628e721e7eeb0292cf5b1aabf164da" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_3</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[3])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 3 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda93c46cfae356495e11eeee37e1fb2fe1" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_4</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[4])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 4 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda1eddf6e0ba87aa98155483dc700aa6fc" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_5</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[5])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 5 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda4cee4ab1afe5711166592b04b7204441" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_6</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[6])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 6 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda09392f2190649b652e6888ec8e3e919d" prot="public">
          <name>NRF_LRCCONF_EVENT_CLKSTARTED_7</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_CLKSRCSTARTED[7])</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clock 7 started. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3b888b135075d9e82f4c23a1e3d9fcfda70a8f205976314ac83845813e1573768" prot="public">
          <name>NRF_LRCCONF_EVENT_HFXOSTARTED</name>
          <initializer>= offsetof(NRF_LRCCONF_Type, EVENTS_HFXOSTARTED)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>HFXO started. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="92" column="1" bodyfile="hal/nrf_lrcconf.h" bodystart="93" bodyend="105"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__lrcconf__hal_1ga3baed0abacb93a058927d25226babff8" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lrcconf_clk_src_t</name>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3baed0abacb93a058927d25226babff8a45b178dd76cc7b656211f1a63b955c84" prot="public">
          <name>NRF_LRCCONF_CLK_SRC_OPEN_LOOP</name>
          <initializer>= LRCCONF_CLKSTAT_SRC_SRC_OpenLoop</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Open loop mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga3baed0abacb93a058927d25226babff8aa9e97d40f43b817acf63cd6dd8b67fe3" prot="public">
          <name>NRF_LRCCONF_CLK_SRC_CLOSED_LOOP</name>
          <initializer>= LRCCONF_CLKSTAT_SRC_SRC_ClosedLoop</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Closed loop mode. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Clock sources. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="108" column="1" bodyfile="hal/nrf_lrcconf.h" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lrcconf_power_domain_mask_t</name>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a4d3ade7230048218f3b1429f46c44502" prot="public">
          <name>NRF_LRCCONF_POWER_MAIN</name>
          <initializer>= LRCCONF_POWERON_MAIN_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for main power domain. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a6946d26eec852b6e99acddb3d6fba0be" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_0</name>
          <initializer>= LRCCONF_POWERON_ACTIVE0_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 0. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02aecd63e95c0dc4b2d6614b89b82e132a2" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_1</name>
          <initializer>= LRCCONF_POWERON_ACTIVE1_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 1. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a6082e701a2685fbb60cd81219178f72b" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_2</name>
          <initializer>= LRCCONF_POWERON_ACTIVE2_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 2. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a44cb4d79a793c260b6489ca61cee8bf6" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_3</name>
          <initializer>= LRCCONF_POWERON_ACTIVE3_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 3. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02aa72cc84961db71eb328ec7af2e61f0d4" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_4</name>
          <initializer>= LRCCONF_POWERON_ACTIVE4_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 4. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02acae2aaad1dba1f0e7e5bd3b190146479" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_5</name>
          <initializer>= LRCCONF_POWERON_ACTIVE5_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 5. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a264f82a51d000ec58551af674738d808" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_6</name>
          <initializer>= LRCCONF_POWERON_ACTIVE6_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 6. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lrcconf__hal_1gga1ef49ffcd36c4b8f6f562f736782fe02a0179bd35122c0d07f36f3b0f141f5b8b" prot="public">
          <name>NRF_LRCCONF_POWER_DOMAIN_7</name>
          <initializer>= LRCCONF_POWERON_ACTIVE7_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Mask for power domain 7. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Power domain mask. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="115" column="1" bodyfile="hal/nrf_lrcconf.h" bodystart="116" bodyend="126"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gab0dba61f70c4ba9d4da5036ca8719d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_task_trigger</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, nrf_lrcconf_task_t task)</argsstring>
        <name>nrf_lrcconf_task_trigger</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for starting a task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="358" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="358" bodyend="361" declfile="hal/nrf_lrcconf.h" declline="134" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gae608a1ade95a3c88fc4de93e357208ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_lrcconf_task_address_get</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, nrf_lrcconf_task_t task)</argsstring>
        <name>nrf_lrcconf_task_address_get</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of a task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="363" column="28" bodyfile="hal/nrf_lrcconf.h" bodystart="363" bodyend="367" declfile="hal/nrf_lrcconf.h" declline="144" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gae420bc252f372bf94526d1ffc65c0a93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_lrcconf_event_address_get</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, nrf_lrcconf_event_t event)</argsstring>
        <name>nrf_lrcconf_event_address_get</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for returning the address of an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="369" column="28" bodyfile="hal/nrf_lrcconf.h" bodystart="369" bodyend="373" declfile="hal/nrf_lrcconf.h" declline="155" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gab83756b552a88dcabf1fea291fed7a03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_event_clear</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, nrf_lrcconf_event_t event)</argsstring>
        <name>nrf_lrcconf_event_clear</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing an event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="375" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="375" bodyend="380" declfile="hal/nrf_lrcconf.h" declline="164" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga054ecf316b25c91094ed9bd6905b9798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lrcconf_event_check</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, nrf_lrcconf_event_t event)</argsstring>
        <name>nrf_lrcconf_event_check</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the specified event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="382" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="382" bodyend="386" declfile="hal/nrf_lrcconf.h" declline="176" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gaf8a2d5f6786959839b6d53bbf2ec73b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_lrcconf_task_t nrf_lrcconf_clkstart_task_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_lrcconf_clkstart_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting CLKSTART task by its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the CLKSTART task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CLKSTART task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="388" column="38" bodyfile="hal/nrf_lrcconf.h" bodystart="388" bodyend="392" declfile="hal/nrf_lrcconf.h" declline="186" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gae2062a2e2159af2900dcdb2086e431c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__lrcconf__hal_1ga14c0e42f25451dfea38ea44ab756e05f" kindref="member">nrf_lrcconf_task_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_lrcconf_task_t nrf_lrcconf_clkstop_task_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_lrcconf_clkstop_task_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting CLKSTOP task by its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the CLKSTOP task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CLKSTOP task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="394" column="38" bodyfile="hal/nrf_lrcconf.h" bodystart="394" bodyend="398" declfile="hal/nrf_lrcconf.h" declline="195" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga20a1eb4d5272ca2cfde7bd11bd6a9dbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__lrcconf__hal_1ga3b888b135075d9e82f4c23a1e3d9fcfd" kindref="member">nrf_lrcconf_event_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_lrcconf_event_t nrf_lrcconf_clkstarted_event_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_lrcconf_clkstarted_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting CLKSTARTED event by its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the CLKSTARTED event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CLKSTARTED event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="400" column="39" bodyfile="hal/nrf_lrcconf.h" bodystart="400" bodyend="404" declfile="hal/nrf_lrcconf.h" declline="204" declcolumn="39"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga5df3d5aa929b2d295688611ceee882ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_lrcconf_power_domain_mask_t nrf_lrcconf_power_domain_on_get</definition>
        <argsstring>(uint8_t index)</argsstring>
        <name>nrf_lrcconf_power_domain_on_get</name>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting power domain on mask by its index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the domain.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Enum value for domain. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="407" column="33" bodyfile="hal/nrf_lrcconf.h" bodystart="407" bodyend="411" declfile="hal/nrf_lrcconf.h" declline="214" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga162e0ab9670469cf61356f75ec21dc01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lrcconf_clock_run_status_check</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, uint8_t clock)</argsstring>
        <name>nrf_lrcconf_clock_run_status_check</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>clock</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the status indicating whether TASK_CLKSTART task has been triggered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock start task has been triggered. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock start task has not been triggered. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="413" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="413" bodyend="418" declfile="hal/nrf_lrcconf.h" declline="226" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga8222f027fe91f95f82b8a2673f3ece1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__lrcconf__hal_1ga3baed0abacb93a058927d25226babff8" kindref="member">nrf_lrcconf_clk_src_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_lrcconf_clk_src_t nrf_lrcconf_clock_source_get</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, uint8_t clock)</argsstring>
        <name>nrf_lrcconf_clock_source_get</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>clock</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the source of the specified clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Clock source. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="421" column="23" bodyfile="hal/nrf_lrcconf.h" bodystart="421" bodyend="427" declfile="hal/nrf_lrcconf.h" declline="238" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga14686fa9ad0904c0b6e20fc5c1f0fb81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_clock_always_run_force_set</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, uint8_t clock, bool alwaysrun)</argsstring>
        <name>nrf_lrcconf_clock_always_run_force_set</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>clock</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alwaysrun</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified clock to remain running. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alwaysrun</parametername>
</parameternamelist>
<parameterdescription>
<para>True if forcing the clock to remain on is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="429" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="429" bodyend="437" declfile="hal/nrf_lrcconf.h" declline="247" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gafc54b7541b1a9c94e8ee3c961bed472a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lrcconf_clock_always_run_check</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, uint8_t clock)</argsstring>
        <name>nrf_lrcconf_clock_always_run_check</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>clock</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified clock is configured to remain running. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock index.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock is configured to remain on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock is not configured to remain on. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="439" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="439" bodyend="444" declfile="hal/nrf_lrcconf.h" declline="260" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gac12bf418901664551393224c9d2988a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_clock_source_set</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, uint8_t clock, nrf_lrcconf_clk_src_t source)</argsstring>
        <name>nrf_lrcconf_clock_source_set</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>clock</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga3baed0abacb93a058927d25226babff8" kindref="member">nrf_lrcconf_clk_src_t</ref></type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Function for setting the source of the specified clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">clock</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">source</parametername>
</parameternamelist>
<parameterdescription>
<para>Clock source to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="446" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="446" bodyend="453" declfile="hal/nrf_lrcconf.h" declline="270" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga361a95af9fcb17f494d350b46f4930aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lrcconf_constlatstat_check</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg)</argsstring>
        <name>nrf_lrcconf_constlatstat_check</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking the status of constant latency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant latency enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant latency disabled, low power enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="455" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="455" bodyend="458" declfile="hal/nrf_lrcconf.h" declline="282" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga054afc49252d97e9a8f577fafa640b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_poweron_force_set</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, nrf_lrcconf_power_domain_mask_t domain_mask, bool alwayson)</argsstring>
        <name>nrf_lrcconf_poweron_force_set</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref></type>
          <declname>domain_mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>alwayson</declname>
        </param>
        <briefdescription>
<para>Function for setting the power domain to remain on. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of power domains to remain on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">alwayson</parametername>
</parameternamelist>
<parameterdescription>
<para>True if forcing the power domain to remain on is to be enabled, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="461" column="6" bodyfile="hal/nrf_lrcconf.h" bodystart="461" bodyend="466" declfile="hal/nrf_lrcconf.h" declline="293" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga7ec4d74b571e7d5bed2411c769a5a6d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lrcconf_poweron_force_check</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, nrf_lrcconf_power_domain_mask_t domain)</argsstring>
        <name>nrf_lrcconf_poweron_force_check</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref></type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for checking if the power domain is configured to remain on. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Power domain to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The domain is configured to remain on. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The domain is not configured to remain on. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="469" column="6" bodyfile="hal/nrf_lrcconf.h" bodystart="469" bodyend="473" declfile="hal/nrf_lrcconf.h" declline="307" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gac9d94c99ec79d8b00feb861b074b3a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_retain_set</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, nrf_lrcconf_power_domain_mask_t domain_mask, bool retain)</argsstring>
        <name>nrf_lrcconf_retain_set</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref></type>
          <declname>domain_mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>retain</declname>
        </param>
        <briefdescription>
<para>Function for setting the power domain to be retained in System ON idle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of power domains to be retained. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">retain</parametername>
</parameternamelist>
<parameterdescription>
<para>True if power domain retention is to be enabled, flase otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="476" column="6" bodyfile="hal/nrf_lrcconf.h" bodystart="476" bodyend="481" declfile="hal/nrf_lrcconf.h" declline="318" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1ga9e5a116d0d251c106e22e33fcb570798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lrcconf_retain_check</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, nrf_lrcconf_power_domain_mask_t domain)</argsstring>
        <name>nrf_lrcconf_retain_check</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lrcconf__hal_1ga1ef49ffcd36c4b8f6f562f736782fe02" kindref="member">nrf_lrcconf_power_domain_mask_t</ref></type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for checking if the power domain is configured to be retained in System ON idle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Power domain to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The domain is configured to be retained. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The domain is not configured to be retained. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="484" column="6" bodyfile="hal/nrf_lrcconf.h" bodystart="484" bodyend="488" declfile="hal/nrf_lrcconf.h" declline="332" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gab61791d9f89260688c670bbfec5c24b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lrcconf_axi_waitstates_set</definition>
        <argsstring>(NRF_LRCCONF_Type *p_reg, uint8_t domain, uint8_t waitstates_num)</argsstring>
        <name>nrf_lrcconf_axi_waitstates_set</name>
        <param>
          <type>NRF_LRCCONF_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>domain</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>waitstates_num</declname>
        </param>
        <briefdescription>
<para>Function for setting the waitstates for the AXI bridge connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Functional domain identifier. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">waitstates_num</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of waitstates. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="490" column="24" bodyfile="hal/nrf_lrcconf.h" bodystart="490" bodyend="500" declfile="hal/nrf_lrcconf.h" declline="342" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lrcconf__hal_1gaaa33a8ccda6e8d5e84da0d22236fd806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint8_t</type>
        <definition>NRF_STATIC_INLINE uint8_t nrf_lrcconf_axi_waitstates_get</definition>
        <argsstring>(NRF_LRCCONF_Type const *p_reg, uint8_t domain)</argsstring>
        <name>nrf_lrcconf_axi_waitstates_get</name>
        <param>
          <type>NRF_LRCCONF_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>domain</declname>
        </param>
        <briefdescription>
<para>Function for getting the waitstates for the AXI bridge connection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">domain</parametername>
</parameternamelist>
<parameterdescription>
<para>Functional domain identifier.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of waitstates </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="502" column="27" bodyfile="hal/nrf_lrcconf.h" bodystart="502" bodyend="508" declfile="hal/nrf_lrcconf.h" declline="354" declcolumn="27"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__lrcconf__hal_1gaa791063c6a00e8f52905d1385ec2a447" prot="public" static="no">
        <name>NRF_LRCCONF_CLK_COUNT</name>
        <initializer>LRCCONF_CLKSTAT_MaxCount</initializer>
        <briefdescription>
<para>Number of clocks supported by LRCCONF. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="50" column="9" bodyfile="hal/nrf_lrcconf.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__lrcconf__hal_1ga83767b1c32aeb439b88c5a70f43d48c0" prot="public" static="no">
        <name>NRF_LRCCONF_AXI_WAITSTATES_ARRAY_SIZE</name>
        <initializer>LRCCONF_AX2XWAITSTATES_MaxCount</initializer>
        <briefdescription>
<para>Size of AXI bridge waitstates array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="53" column="9" bodyfile="hal/nrf_lrcconf.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__lrcconf__hal_1ga75460ffa4cff84f3d9dbc009649c62b1" prot="public" static="no">
        <name>NRF_LRCCONF_HAS_HFXO</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether HFXO requesting is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lrcconf.h" line="57" column="9" bodyfile="hal/nrf_lrcconf.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Local Resource Controller Configuration (LRCCONF) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
