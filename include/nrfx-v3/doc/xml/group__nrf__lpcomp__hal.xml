<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__lpcomp__hal" kind="group">
    <compoundname>nrf_lpcomp_hal</compoundname>
    <title>LPCOMP HAL</title>
    <innerclass refid="structnrf__lpcomp__config__t" prot="public">nrf_lpcomp_config_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__lpcomp__hal_1ga591da73264690581484f9454f6f83820" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lpcomp_task_t</name>
        <enumvalue id="group__nrf__lpcomp__hal_1gga591da73264690581484f9454f6f83820a0ed5e4c4040eccbbdec703139d84c58e" prot="public">
          <name>NRF_LPCOMP_TASK_START</name>
          <initializer>= offsetof(NRF_LPCOMP_Type, TASKS_START)</initializer>
          <briefdescription>
<para>LPCOMP start sampling task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga591da73264690581484f9454f6f83820a533b402055610ab9ce67e11fc2656c87" prot="public">
          <name>NRF_LPCOMP_TASK_STOP</name>
          <initializer>= offsetof(NRF_LPCOMP_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>LPCOMP stop sampling task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga591da73264690581484f9454f6f83820ae7ce8858fddd0324dcc86d83750ecf04" prot="public">
          <name>NRF_LPCOMP_TASK_SAMPLE</name>
          <initializer>= offsetof(NRF_LPCOMP_Type, TASKS_SAMPLE)</initializer>
          <briefdescription>
<para>Sample comparator value. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>LPCOMP tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="65" column="1" bodyfile="hal/nrf_lpcomp.h" bodystart="66" bodyend="70"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__lpcomp__hal_1ga5d332176ba68f2b4bacc3418198a1835" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lpcomp_event_t</name>
        <enumvalue id="group__nrf__lpcomp__hal_1gga5d332176ba68f2b4bacc3418198a1835aff2affcec58dcb4d207cf09874c23036" prot="public">
          <name>NRF_LPCOMP_EVENT_READY</name>
          <initializer>= offsetof(NRF_LPCOMP_Type, EVENTS_READY)</initializer>
          <briefdescription>
<para>LPCOMP is ready and output is valid. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga5d332176ba68f2b4bacc3418198a1835af42ff6647936c0b9c1276e0ee4e4dad8" prot="public">
          <name>NRF_LPCOMP_EVENT_DOWN</name>
          <initializer>= offsetof(NRF_LPCOMP_Type, EVENTS_DOWN)</initializer>
          <briefdescription>
<para>Input voltage crossed the threshold going down. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga5d332176ba68f2b4bacc3418198a1835ac3a1991c7278fe48f0aa75b57919012a" prot="public">
          <name>NRF_LPCOMP_EVENT_UP</name>
          <initializer>= offsetof(NRF_LPCOMP_Type, EVENTS_UP)</initializer>
          <briefdescription>
<para>Input voltage crossed the threshold going up. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga5d332176ba68f2b4bacc3418198a1835ae6799d8c053609cd5eddb0902cdf3a10" prot="public">
          <name>NRF_LPCOMP_EVENT_CROSS</name>
          <initializer>= offsetof(NRF_LPCOMP_Type, EVENTS_CROSS)</initializer>
          <briefdescription>
<para>Input voltage crossed the threshold in any direction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>LPCOMP events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="73" column="1" bodyfile="hal/nrf_lpcomp.h" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__lpcomp__hal_1ga773ea3d4365cc37300fe22fb5ab7c2f5" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lpcomp_int_mask_t</name>
        <enumvalue id="group__nrf__lpcomp__hal_1gga773ea3d4365cc37300fe22fb5ab7c2f5a35bd585989bfa44f2e6d97f61080ae3c" prot="public">
          <name>NRF_LPCOMP_INT_READY_MASK</name>
          <initializer>= LPCOMP_INTENSET_READY_Msk</initializer>
          <briefdescription>
<para>Interrupt on READY event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga773ea3d4365cc37300fe22fb5ab7c2f5a5fec08401eced586bc683a06162073d5" prot="public">
          <name>NRF_LPCOMP_INT_DOWN_MASK</name>
          <initializer>= LPCOMP_INTENSET_DOWN_Msk</initializer>
          <briefdescription>
<para>Interrupt on DOWN event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga773ea3d4365cc37300fe22fb5ab7c2f5abad83a12bef54d76d19cfe8d4852cc1c" prot="public">
          <name>NRF_LPCOMP_INT_UP_MASK</name>
          <initializer>= LPCOMP_INTENSET_UP_Msk</initializer>
          <briefdescription>
<para>Interrupt on UP event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga773ea3d4365cc37300fe22fb5ab7c2f5a55123816c6943066f7211531689f3ad9" prot="public">
          <name>NRF_LPCOMP_INT_CROSS_MASK</name>
          <initializer>= LPCOMP_INTENSET_CROSS_Msk</initializer>
          <briefdescription>
<para>Interrupt on CROSS event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>LPCOMP interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="82" column="1" bodyfile="hal/nrf_lpcomp.h" bodystart="83" bodyend="88"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__lpcomp__hal_1gaad3e8ec774d6065c9154f036d3cb1e42" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lpcomp_short_mask_t</name>
        <enumvalue id="group__nrf__lpcomp__hal_1ggaad3e8ec774d6065c9154f036d3cb1e42af09e38d5932c27017dd713e4eee5f5a6" prot="public">
          <name>NRF_LPCOMP_SHORT_CROSS_STOP_MASK</name>
          <initializer>= LPCOMP_SHORTS_CROSS_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between CROSS event and STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1ggaad3e8ec774d6065c9154f036d3cb1e42a51b22e428d65d7108cdb97a7d67574e2" prot="public">
          <name>NRF_LPCOMP_SHORT_UP_STOP_MASK</name>
          <initializer>= LPCOMP_SHORTS_UP_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between UP event and STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1ggaad3e8ec774d6065c9154f036d3cb1e42ac1ad769b548ff0e60e50ecb3e15299a0" prot="public">
          <name>NRF_LPCOMP_SHORT_DOWN_STOP_MASK</name>
          <initializer>= LPCOMP_SHORTS_DOWN_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between DOWN event and STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1ggaad3e8ec774d6065c9154f036d3cb1e42a046b129d748e5ca56280bbfd754888cb" prot="public">
          <name>NRF_LPCOMP_SHORT_READY_STOP_MASK</name>
          <initializer>= LPCOMP_SHORTS_READY_STOP_Msk</initializer>
          <briefdescription>
<para>Shortcut between READY event and STOP task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1ggaad3e8ec774d6065c9154f036d3cb1e42ac83f5e6efe597b51675eccd0ebfa8844" prot="public">
          <name>NRF_LPCOMP_SHORT_READY_SAMPLE_MASK</name>
          <initializer>= LPCOMP_SHORTS_READY_SAMPLE_Msk</initializer>
          <briefdescription>
<para>Shortcut between READY event and SAMPLE task. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>LPCOMP shortcut masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="91" column="1" bodyfile="hal/nrf_lpcomp.h" bodystart="92" bodyend="98"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__lpcomp__hal_1ga0c957a3dd1132acd90e420b70477cef0" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lpcomp_ref_t</name>
        <enumvalue id="group__nrf__lpcomp__hal_1gga0c957a3dd1132acd90e420b70477cef0ae55776bc87fd357f9641a804dcda5a07" prot="public">
          <name>NRF_LPCOMP_REF_SUPPLY_1_8</name>
          <initializer>= LPCOMP_REFSEL_REFSEL_SupplyOneEighthPrescaling</initializer>
          <briefdescription>
<para>Use supply with a 1/8 prescaler as reference. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga0c957a3dd1132acd90e420b70477cef0a56cb59f5740ef467a12f6b47ba061fb5" prot="public">
          <name>NRF_LPCOMP_REF_SUPPLY_2_8</name>
          <initializer>= LPCOMP_REFSEL_REFSEL_SupplyTwoEighthsPrescaling</initializer>
          <briefdescription>
<para>Use supply with a 2/8 prescaler as reference. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga0c957a3dd1132acd90e420b70477cef0a180d0ca453ae1c33fd906ead0e14047a" prot="public">
          <name>NRF_LPCOMP_REF_SUPPLY_3_8</name>
          <initializer>= LPCOMP_REFSEL_REFSEL_SupplyThreeEighthsPrescaling</initializer>
          <briefdescription>
<para>Use supply with a 3/8 prescaler as reference. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga0c957a3dd1132acd90e420b70477cef0a3dc4b910d34b81d4ec6437e0b1713618" prot="public">
          <name>NRF_LPCOMP_REF_SUPPLY_4_8</name>
          <initializer>= LPCOMP_REFSEL_REFSEL_SupplyFourEighthsPrescaling</initializer>
          <briefdescription>
<para>Use supply with a 4/8 prescaler as reference. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga0c957a3dd1132acd90e420b70477cef0a2690b732603d95a40284492d1b1fdcc3" prot="public">
          <name>NRF_LPCOMP_REF_SUPPLY_5_8</name>
          <initializer>= LPCOMP_REFSEL_REFSEL_SupplyFiveEighthsPrescaling</initializer>
          <briefdescription>
<para>Use supply with a 5/8 prescaler as reference. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga0c957a3dd1132acd90e420b70477cef0a532d6cbe6fbb18af8aaee99131f49fc4" prot="public">
          <name>NRF_LPCOMP_REF_SUPPLY_6_8</name>
          <initializer>= LPCOMP_REFSEL_REFSEL_SupplySixEighthsPrescaling</initializer>
          <briefdescription>
<para>Use supply with a 6/8 prescaler as reference. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga0c957a3dd1132acd90e420b70477cef0ae53cc2fde29431fdd6e54b2075c4b203" prot="public">
          <name>NRF_LPCOMP_REF_SUPPLY_7_8</name>
          <initializer>= LPCOMP_REFSEL_REFSEL_SupplySevenEighthsPrescaling</initializer>
          <briefdescription>
<para>Use supply with a 7/8 prescaler as reference. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga0c957a3dd1132acd90e420b70477cef0a1ef2ff953244e2eceee59cb516f5a7d3" prot="public">
          <name>NRF_LPCOMP_REF_EXT_REF</name>
          <initializer>= LPCOMP_REFSEL_REFSEL_ARef</initializer>
          <briefdescription>
<para>Use external analog reference. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>LPCOMP reference selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="101" column="1" bodyfile="hal/nrf_lpcomp.h" bodystart="102" bodyend="135"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__lpcomp__hal_1ga98b70e2e8ab4595eb74b92e7036f09b3" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lpcomp_detect_t</name>
        <enumvalue id="group__nrf__lpcomp__hal_1gga98b70e2e8ab4595eb74b92e7036f09b3adcbff8fcde243a4551172830d289ce38" prot="public">
          <name>NRF_LPCOMP_DETECT_CROSS</name>
          <initializer>= LPCOMP_ANADETECT_ANADETECT_Cross</initializer>
          <briefdescription>
<para>Generate ANADETEC on crossing, both upwards and downwards crossing. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga98b70e2e8ab4595eb74b92e7036f09b3a08b3434e1e4393343a643ede5bcc0120" prot="public">
          <name>NRF_LPCOMP_DETECT_UP</name>
          <initializer>= LPCOMP_ANADETECT_ANADETECT_Up</initializer>
          <briefdescription>
<para>Generate ANADETEC on upwards crossing only. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1gga98b70e2e8ab4595eb74b92e7036f09b3a8af8328d9d03d5447c4d7d021698c2ea" prot="public">
          <name>NRF_LPCOMP_DETECT_DOWN</name>
          <initializer>= LPCOMP_ANADETECT_ANADETECT_Down</initializer>
          <briefdescription>
<para>Generate ANADETEC on downwards crossing only. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>LPCOMP detection type selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="166" column="1" bodyfile="hal/nrf_lpcomp.h" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__lpcomp__hal_1gad24ec3049d0115c6cc04ff6040f99fc8" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_lpcomp_hyst_t</name>
        <enumvalue id="group__nrf__lpcomp__hal_1ggad24ec3049d0115c6cc04ff6040f99fc8a2d262d78e9d569e32b4e3b096a6f0422" prot="public">
          <name>NRF_LPCOMP_HYST_NOHYST</name>
          <initializer>= LPCOMP_HYST_HYST_Disabled</initializer>
          <briefdescription>
<para>Comparator hysteresis disabled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__lpcomp__hal_1ggad24ec3049d0115c6cc04ff6040f99fc8a8c7bec8a092c77398a8a8f94acfda1e5" prot="public">
          <name>NRF_LPCOMP_HYST_ENABLED</name>
          <initializer>= LPCOMP_HYST_HYST_Enabled</initializer>
          <briefdescription>
<para>Comparator hysteresis enabled (typically 50 mV). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>LPCOMP hysteresis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="175" column="1" bodyfile="hal/nrf_lpcomp.h" bodystart="176" bodyend="187"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrf__lpcomp__hal_1ga2fe5dab7079a6db8d11aa7c021e1e00f" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t nrf_lpcomp_ext_ref_t</definition>
        <argsstring></argsstring>
        <name>nrf_lpcomp_ext_ref_t</name>
        <briefdescription>
<para>LPCOMP external reference selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="139" column="18" bodyfile="hal/nrf_lpcomp.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nrf__lpcomp__hal_1gaa5d1f81aba060210a9f72b3323144e7c" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t nrf_lpcomp_input_t</definition>
        <argsstring></argsstring>
        <name>nrf_lpcomp_input_t</name>
        <briefdescription>
<para>LPCOMP input selection. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="150" column="18" bodyfile="hal/nrf_lpcomp.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga2ee3c718837297fff07d31b07f85c5fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_task_trigger</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, nrf_lpcomp_task_t task)</argsstring>
        <name>nrf_lpcomp_task_trigger</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1ga591da73264690581484f9454f6f83820" kindref="member">nrf_lpcomp_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for setting the specified LPCOMP task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>LPCOMP task to be set. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="448" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="448" bodyend="451" declfile="hal/nrf_lpcomp.h" declline="206" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga1c250c4fdc384da77e53950407dd6964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_lpcomp_task_address_get</definition>
        <argsstring>(NRF_LPCOMP_Type const *p_reg, nrf_lpcomp_task_t task)</argsstring>
        <name>nrf_lpcomp_task_address_get</name>
        <param>
          <type>NRF_LPCOMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1ga591da73264690581484f9454f6f83820" kindref="member">nrf_lpcomp_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified LPCOMP task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>LPCOMP task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The address of the specified LPCOMP task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="453" column="28" bodyfile="hal/nrf_lpcomp.h" bodystart="453" bodyend="457" declfile="hal/nrf_lpcomp.h" declline="216" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga6fc959c9fdc14b36c5a89a6849aa311c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lpcomp_event_check</definition>
        <argsstring>(NRF_LPCOMP_Type const *p_reg, nrf_lpcomp_event_t event)</argsstring>
        <name>nrf_lpcomp_event_check</name>
        <param>
          <type>NRF_LPCOMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1ga5d332176ba68f2b4bacc3418198a1835" kindref="member">nrf_lpcomp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the LPCOMP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="459" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="459" bodyend="463" declfile="hal/nrf_lpcomp.h" declline="228" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga8bade22fb754493f85d307c9a95e44e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_event_clear</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, nrf_lpcomp_event_t event)</argsstring>
        <name>nrf_lpcomp_event_clear</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1ga5d332176ba68f2b4bacc3418198a1835" kindref="member">nrf_lpcomp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified LPCOMP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>LPCOMP event to be cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="465" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="465" bodyend="469" declfile="hal/nrf_lpcomp.h" declline="237" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga947a11f02bcea11efac0da0518784a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_lpcomp_event_address_get</definition>
        <argsstring>(NRF_LPCOMP_Type const *p_reg, nrf_lpcomp_event_t event)</argsstring>
        <name>nrf_lpcomp_event_address_get</name>
        <param>
          <type>NRF_LPCOMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1ga5d332176ba68f2b4bacc3418198a1835" kindref="member">nrf_lpcomp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified LPCOMP event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>LPCOMP event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The address of the specified LPCOMP event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="471" column="28" bodyfile="hal/nrf_lpcomp.h" bodystart="471" bodyend="475" declfile="hal/nrf_lpcomp.h" declline="247" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1gae1b0d86b9e39b8d0d628844aa4c90c75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_shorts_enable</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_lpcomp_shorts_enable</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting LPCOMP shorts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="477" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="477" bodyend="480" declfile="hal/nrf_lpcomp.h" declline="256" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1gadf3aa228ee009361da0dbc752e6f6ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_shorts_disable</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_lpcomp_shorts_disable</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for clearing LPCOMP shorts by mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="482" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="482" bodyend="485" declfile="hal/nrf_lpcomp.h" declline="264" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga32a50361acc64ab585bacf105fc27441" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_shorts_set</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_lpcomp_shorts_set</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for for setting the specified shortcuts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of shortcuts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="487" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="487" bodyend="490" declfile="hal/nrf_lpcomp.h" declline="272" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga06724f72c55726208779ea56f70262d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_int_enable</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_lpcomp_int_enable</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling interrupts from LPCOMP. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__lpcomp__hal_1ga773ea3d4365cc37300fe22fb5ab7c2f5" kindref="member">nrf_lpcomp_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__lpcomp__hal_1gaa3e627fb280ca2bda6812822dea94a62" kindref="member">nrf_lpcomp_int_disable</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrf__lpcomp__hal_1gaf2ac0f68e3d2e30d6cdf230ac590b312" kindref="member">nrf_lpcomp_int_enable_check</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="492" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="492" bodyend="495" declfile="hal/nrf_lpcomp.h" declline="284" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1gaa3e627fb280ca2bda6812822dea94a62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_int_disable</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_lpcomp_int_disable</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling interrupts from LPCOMP. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__lpcomp__hal_1ga773ea3d4365cc37300fe22fb5ab7c2f5" kindref="member">nrf_lpcomp_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__nrf__lpcomp__hal_1ga06724f72c55726208779ea56f70262d5" kindref="member">nrf_lpcomp_int_enable</ref> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__nrf__lpcomp__hal_1gaf2ac0f68e3d2e30d6cdf230ac590b312" kindref="member">nrf_lpcomp_int_enable_check</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="497" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="497" bodyend="500" declfile="hal/nrf_lpcomp.h" declline="296" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1gaf2ac0f68e3d2e30d6cdf230ac590b312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_lpcomp_int_enable_check</definition>
        <argsstring>(NRF_LPCOMP_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_lpcomp_int_enable_check</name>
        <param>
          <type>NRF_LPCOMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__lpcomp__hal_1ga773ea3d4365cc37300fe22fb5ab7c2f5" kindref="member">nrf_lpcomp_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="502" column="28" bodyfile="hal/nrf_lpcomp.h" bodystart="502" bodyend="506" declfile="hal/nrf_lpcomp.h" declline="307" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga7fdf4c14d86c8c5d7dba5b4bf0da2925" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_subscribe_set</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, nrf_lpcomp_task_t task, uint8_t channel)</argsstring>
        <name>nrf_lpcomp_subscribe_set</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1ga591da73264690581484f9454f6f83820" kindref="member">nrf_lpcomp_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting subscribe configuration for a given LPCOMP task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which the configuration is set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which events are subscribed. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="509" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="509" bodyend="515" declfile="hal/nrf_lpcomp.h" declline="318" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1gab55dccc182c650e2b40c0cc17c72892a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_subscribe_clear</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, nrf_lpcomp_task_t task)</argsstring>
        <name>nrf_lpcomp_subscribe_clear</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1ga591da73264690581484f9454f6f83820" kindref="member">nrf_lpcomp_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing subscribe configuration for a given LPCOMP task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which the configuration is cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="517" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="517" bodyend="521" declfile="hal/nrf_lpcomp.h" declline="328" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1gabd9555008e0673a784c5bcd1ce1cd04e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_publish_set</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, nrf_lpcomp_event_t event, uint8_t channel)</argsstring>
        <name>nrf_lpcomp_publish_set</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1ga5d332176ba68f2b4bacc3418198a1835" kindref="member">nrf_lpcomp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting publish configuration for a given LPCOMP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which the configuration is set. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which the event is published. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="523" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="523" bodyend="529" declfile="hal/nrf_lpcomp.h" declline="338" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga0c1ecb510e170826a37b059d912086b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_publish_clear</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, nrf_lpcomp_event_t event)</argsstring>
        <name>nrf_lpcomp_publish_clear</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1ga5d332176ba68f2b4bacc3418198a1835" kindref="member">nrf_lpcomp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing publish configuration for a given LPCOMP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which the configuration is cleared. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="531" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="531" bodyend="535" declfile="hal/nrf_lpcomp.h" declline="348" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga74e23d1ed9f51fbb8f5590830479958e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_configure</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, nrf_lpcomp_config_t const *p_config)</argsstring>
        <name>nrf_lpcomp_configure</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="structnrf__lpcomp__config__t" kindref="compound">nrf_lpcomp_config_t</ref> const *</type>
          <declname>p_config</declname>
        </param>
        <briefdescription>
<para>Function for configuring LPCOMP. </para>
        </briefdescription>
        <detaileddescription>
<para>This function powers on LPCOMP and configures it. LPCOMP is in DISABLE state after configuration, so it must be enabled before using it. All shorts are inactive, events are cleared, and LPCOMP is stopped.</para>
<para><xrefsect id="deprecated_1_deprecated000004"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use the dedicated functions instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="538" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="538" bodyend="558" declfile="hal/nrf_lpcomp.h" declline="363" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga96c0df67ae84dfe2f2101a5b01441610" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_ref_set</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, nrf_lpcomp_ref_t reference)</argsstring>
        <name>nrf_lpcomp_ref_set</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1ga0c957a3dd1132acd90e420b70477cef0" kindref="member">nrf_lpcomp_ref_t</ref></type>
          <declname>reference</declname>
        </param>
        <briefdescription>
<para>Function for setting the reference source. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reference</parametername>
</parameternamelist>
<parameterdescription>
<para>LPCOMP reference selection. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="560" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="560" bodyend="563" declfile="hal/nrf_lpcomp.h" declline="372" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1gaeef233310639995b023b4e7c6b1e9255" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_ext_ref_set</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, nrf_lpcomp_ext_ref_t ext_ref)</argsstring>
        <name>nrf_lpcomp_ext_ref_set</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1ga2fe5dab7079a6db8d11aa7c021e1e00f" kindref="member">nrf_lpcomp_ext_ref_t</ref></type>
          <declname>ext_ref</declname>
        </param>
        <briefdescription>
<para>Function for setting the external analog reference source. </para>
        </briefdescription>
        <detaileddescription>
<para>To use external reference first call <ref refid="group__nrf__lpcomp__hal_1ga96c0df67ae84dfe2f2101a5b01441610" kindref="member">nrf_lpcomp_ref_set</ref> with NRF_LPCOMP_REF_EXT_REF argument.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ext_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>LPCOMP external analog reference selection. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="565" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="565" bodyend="577" declfile="hal/nrf_lpcomp.h" declline="382" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga913b32be79875d61a6bb6b1f810a9f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_input_select</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, nrf_lpcomp_input_t input)</argsstring>
        <name>nrf_lpcomp_input_select</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1gaa5d1f81aba060210a9f72b3323144e7c" kindref="member">nrf_lpcomp_input_t</ref></type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>Function for selecting an active LPCOMP input. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>Input to be selected. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="579" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="579" bodyend="588" declfile="hal/nrf_lpcomp.h" declline="391" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga86d3b8ed846aaa73974f694271d02387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_detection_set</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, nrf_lpcomp_detect_t detection)</argsstring>
        <name>nrf_lpcomp_detection_set</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1ga98b70e2e8ab4595eb74b92e7036f09b3" kindref="member">nrf_lpcomp_detect_t</ref></type>
          <declname>detection</declname>
        </param>
        <briefdescription>
<para>Function for setting the detection type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">detection</parametername>
</parameternamelist>
<parameterdescription>
<para>LPCOMP detection type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="590" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="590" bodyend="595" declfile="hal/nrf_lpcomp.h" declline="399" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga76059634cf7f6ca150d2d661e1d1644c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_hysteresis_set</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg, nrf_lpcomp_hyst_t hyst)</argsstring>
        <name>nrf_lpcomp_hysteresis_set</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__lpcomp__hal_1gad24ec3049d0115c6cc04ff6040f99fc8" kindref="member">nrf_lpcomp_hyst_t</ref></type>
          <declname>hyst</declname>
        </param>
        <briefdescription>
<para>Function for setting the hysteresis. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hyst</parametername>
</parameternamelist>
<parameterdescription>
<para>LPCOMP comparator hysteresis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="598" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="598" bodyend="602" declfile="hal/nrf_lpcomp.h" declline="409" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga218b30efcd6deb4bff7f79e971c5c32a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_enable</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg)</argsstring>
        <name>nrf_lpcomp_enable</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the LPCOMP. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="605" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="605" bodyend="608" declfile="hal/nrf_lpcomp.h" declline="418" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga1cb21b9c2063adafcac24e381c707823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_lpcomp_disable</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg)</argsstring>
        <name>nrf_lpcomp_disable</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the LPCOMP. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="610" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="610" bodyend="613" declfile="hal/nrf_lpcomp.h" declline="425" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga86f98c2955ec914e98223869b38f86f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_lpcomp_enable_check</definition>
        <argsstring>(NRF_LPCOMP_Type *p_reg)</argsstring>
        <name>nrf_lpcomp_enable_check</name>
        <param>
          <type>NRF_LPCOMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the LPCOMP peripheral is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The LPCOMP peripheral is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The LPCOMP peripheral is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="615" column="24" bodyfile="hal/nrf_lpcomp.h" bodystart="615" bodyend="618" declfile="hal/nrf_lpcomp.h" declline="435" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__lpcomp__hal_1ga01afb3f11ea59d41efab47976ef884e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_lpcomp_result_get</definition>
        <argsstring>(NRF_LPCOMP_Type const *p_reg)</argsstring>
        <name>nrf_lpcomp_result_get</name>
        <param>
          <type>NRF_LPCOMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the last LPCOMP compare result. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The last compare result. If 0, then VIN+ &lt; VIN-. If 1, then VIN- &lt; VIN+. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="620" column="28" bodyfile="hal/nrf_lpcomp.h" bodystart="620" bodyend="623" declfile="hal/nrf_lpcomp.h" declline="444" declcolumn="28"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__lpcomp__hal_1ga1654086e979f4198cab7f847da8f0ada" prot="public" static="no">
        <name>NRF_LPCOMP_HAS_AIN_AS_PIN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the configuration of analog input using pin number is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="52" column="9" bodyfile="hal/nrf_lpcomp.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__lpcomp__hal_1gaf70257c2666a900c16d2a7703655781c" prot="public" static="no">
        <name>NRF_LPCOMP_HAS_HYST</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the hysteresis is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_lpcomp.h" line="59" column="9" bodyfile="hal/nrf_lpcomp.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Low Power Comparator (LPCOMP) peripheral. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
