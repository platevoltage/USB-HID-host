<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="group__nrf__temp__hal" kind="group">
    <compoundname>nrf_temp_hal</compoundname>
    <title>TEMP HAL</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__temp__hal_1ga1cf2b8f17afc332ee359ec43260612ef" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_temp_task_t</name>
        <enumvalue id="group__nrf__temp__hal_1gga1cf2b8f17afc332ee359ec43260612efac19d618bf3b37f2edfeae3a4f01452d9" prot="public">
          <name>NRF_TEMP_TASK_START</name>
          <initializer>= offsetof(NRF_TEMP_Type, TASKS_START)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Start temperature measurement. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__temp__hal_1gga1cf2b8f17afc332ee359ec43260612efa41a84a8acb1ec9226460fdc6c02c34a1" prot="public">
          <name>NRF_TEMP_TASK_STOP</name>
          <initializer>= offsetof(NRF_TEMP_Type, TASKS_STOP)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Stop temperature measurement. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TEMP tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="58" column="1" bodyfile="hal/nrf_temp.h" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__temp__hal_1ga51bd7440f309009867719b2e18237134" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_temp_event_t</name>
        <enumvalue id="group__nrf__temp__hal_1gga51bd7440f309009867719b2e18237134a20cbba1ffdc9eb93502cda0f3ab4f787" prot="public">
          <name>NRF_TEMP_EVENT_DATARDY</name>
          <initializer>= offsetof(NRF_TEMP_Type, EVENTS_DATARDY)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Temperature measurement complete, data ready. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TEMP events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="65" column="1" bodyfile="hal/nrf_temp.h" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__temp__hal_1gafd94a5da292412e60cf09ee4aad30237" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_temp_int_mask_t</name>
        <enumvalue id="group__nrf__temp__hal_1ggafd94a5da292412e60cf09ee4aad30237a5e3940c06238140f5bd0b59d15b71bab" prot="public">
          <name>NRF_TEMP_INT_DATARDY_MASK</name>
          <initializer>= TEMP_INTENSET_DATARDY_Msk</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Interrupt on DATARDY event. <linebreak/>
 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TEMP interrupts. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="71" column="1" bodyfile="hal/nrf_temp.h" bodystart="72" bodyend="74"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__temp__hal_1ga96374ca23596be300c94bcc430604528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_temp_int_enable</definition>
        <argsstring>(NRF_TEMP_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_temp_int_enable</name>
        <param>
          <type>NRF_TEMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__temp__hal_1gafd94a5da292412e60cf09ee4aad30237" kindref="member">nrf_temp_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="232" column="24" bodyfile="hal/nrf_temp.h" bodystart="232" bodyend="235" declfile="hal/nrf_temp.h" declline="83" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1gaed50fdeac4049a8f03e3599aec0e9039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_temp_int_disable</definition>
        <argsstring>(NRF_TEMP_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_temp_int_disable</name>
        <param>
          <type>NRF_TEMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__temp__hal_1gafd94a5da292412e60cf09ee4aad30237" kindref="member">nrf_temp_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="237" column="24" bodyfile="hal/nrf_temp.h" bodystart="237" bodyend="240" declfile="hal/nrf_temp.h" declline="92" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1gaf31d101258557b158e5a633185bb98f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_temp_int_enable_check</definition>
        <argsstring>(NRF_TEMP_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_temp_int_enable_check</name>
        <param>
          <type>NRF_TEMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__temp__hal_1gafd94a5da292412e60cf09ee4aad30237" kindref="member">nrf_temp_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="242" column="28" bodyfile="hal/nrf_temp.h" bodystart="242" bodyend="245" declfile="hal/nrf_temp.h" declline="103" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1gac8845468be5b9eeefaa87a9681698ffc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_temp_task_address_get</definition>
        <argsstring>(NRF_TEMP_Type const *p_reg, nrf_temp_task_t task)</argsstring>
        <name>nrf_temp_task_address_get</name>
        <param>
          <type>NRF_TEMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__temp__hal_1ga1cf2b8f17afc332ee359ec43260612ef" kindref="member">nrf_temp_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified TEMP task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested task register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="247" column="28" bodyfile="hal/nrf_temp.h" bodystart="247" bodyend="251" declfile="hal/nrf_temp.h" declline="113" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1ga5ed67adbf437075afead2f3a7c606d64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_temp_task_trigger</definition>
        <argsstring>(NRF_TEMP_Type *p_reg, nrf_temp_task_t task)</argsstring>
        <name>nrf_temp_task_trigger</name>
        <param>
          <type>NRF_TEMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__temp__hal_1ga1cf2b8f17afc332ee359ec43260612ef" kindref="member">nrf_temp_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for activating the specified TEMP task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task to be activated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="253" column="24" bodyfile="hal/nrf_temp.h" bodystart="253" bodyend="256" declfile="hal/nrf_temp.h" declline="122" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1gab14f4647228668bfa7adb76b4979432b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_temp_event_address_get</definition>
        <argsstring>(NRF_TEMP_Type const *p_reg, nrf_temp_event_t event)</argsstring>
        <name>nrf_temp_event_address_get</name>
        <param>
          <type>NRF_TEMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__temp__hal_1ga51bd7440f309009867719b2e18237134" kindref="member">nrf_temp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified TEMP event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Requested event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the requested event register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="258" column="28" bodyfile="hal/nrf_temp.h" bodystart="258" bodyend="262" declfile="hal/nrf_temp.h" declline="132" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1ga731fc5e9efd8d3d2c9fe0068d45507f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_temp_event_clear</definition>
        <argsstring>(NRF_TEMP_Type *p_reg, nrf_temp_event_t event)</argsstring>
        <name>nrf_temp_event_clear</name>
        <param>
          <type>NRF_TEMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__temp__hal_1ga51bd7440f309009867719b2e18237134" kindref="member">nrf_temp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specified TEMP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to clear. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="264" column="24" bodyfile="hal/nrf_temp.h" bodystart="264" bodyend="268" declfile="hal/nrf_temp.h" declline="141" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1ga68a9ec6fc4931b3b1308e93e5f0f7f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_temp_event_check</definition>
        <argsstring>(NRF_TEMP_Type const *p_reg, nrf_temp_event_t event)</argsstring>
        <name>nrf_temp_event_check</name>
        <param>
          <type>NRF_TEMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__temp__hal_1ga51bd7440f309009867719b2e18237134" kindref="member">nrf_temp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the state of a specific event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="270" column="24" bodyfile="hal/nrf_temp.h" bodystart="270" bodyend="273" declfile="hal/nrf_temp.h" declline="152" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1ga21d3c1128cdd2ba4b1cd863989a85133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE int32_t</type>
        <definition>NRF_STATIC_INLINE int32_t nrf_temp_result_get</definition>
        <argsstring>(NRF_TEMP_Type const *p_reg)</argsstring>
        <name>nrf_temp_result_get</name>
        <param>
          <type>NRF_TEMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the result of temperature measurement. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Returned value is in 2&apos;s complement format, 0.25 °C steps</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Temperature value register contents. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="275" column="27" bodyfile="hal/nrf_temp.h" bodystart="275" bodyend="288" declfile="hal/nrf_temp.h" declline="163" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1ga141dcead300047992b44764e6c97e430" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_temp_calibration_coeff_set</definition>
        <argsstring>(NRF_TEMP_Type *p_reg, uint32_t coeff)</argsstring>
        <name>nrf_temp_calibration_coeff_set</name>
        <param>
          <type>NRF_TEMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>coeff</declname>
        </param>
        <briefdescription>
<para>Function for setting the calibration coefficient for the temperature measurement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coeff</parametername>
</parameternamelist>
<parameterdescription>
<para>Calibration coefficient. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="291" column="24" bodyfile="hal/nrf_temp.h" bodystart="291" bodyend="294" declfile="hal/nrf_temp.h" declline="172" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1gae9dc78ea40ce75eda744047d5980753c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_temp_calibration_coeff_get</definition>
        <argsstring>(NRF_TEMP_Type const *p_reg)</argsstring>
        <name>nrf_temp_calibration_coeff_get</name>
        <param>
          <type>NRF_TEMP_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the calibration coefficient for the temperature measurement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Calibration coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="296" column="28" bodyfile="hal/nrf_temp.h" bodystart="296" bodyend="299" declfile="hal/nrf_temp.h" declline="181" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1ga4ccbcc02f47cea3e5a99fae28aa36c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_temp_subscribe_set</definition>
        <argsstring>(NRF_TEMP_Type *p_reg, nrf_temp_task_t task, uint8_t channel)</argsstring>
        <name>nrf_temp_subscribe_set</name>
        <param>
          <type>NRF_TEMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__temp__hal_1ga1cf2b8f17afc332ee359ec43260612ef" kindref="member">nrf_temp_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given TEMP task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="193" column="24" declfile="hal/nrf_temp.h" declline="193" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1ga745bcba2cd7e6cee25732fbabf27d689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_temp_subscribe_clear</definition>
        <argsstring>(NRF_TEMP_Type *p_reg, nrf_temp_task_t task)</argsstring>
        <name>nrf_temp_subscribe_clear</name>
        <param>
          <type>NRF_TEMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__temp__hal_1ga1cf2b8f17afc332ee359ec43260612ef" kindref="member">nrf_temp_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given TEMP task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="204" column="24" declfile="hal/nrf_temp.h" declline="204" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1gadf6f4386801743a690eabf58966ffafb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_temp_publish_set</definition>
        <argsstring>(NRF_TEMP_Type *p_reg, nrf_temp_event_t event, uint8_t channel)</argsstring>
        <name>nrf_temp_publish_set</name>
        <param>
          <type>NRF_TEMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__temp__hal_1ga51bd7440f309009867719b2e18237134" kindref="member">nrf_temp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given TEMP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="215" column="24" declfile="hal/nrf_temp.h" declline="215" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__temp__hal_1ga13da057b53a8e70523e5ec03c6d2ea2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_temp_publish_clear</definition>
        <argsstring>(NRF_TEMP_Type *p_reg, nrf_temp_event_t event)</argsstring>
        <name>nrf_temp_publish_clear</name>
        <param>
          <type>NRF_TEMP_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__temp__hal_1ga51bd7440f309009867719b2e18237134" kindref="member">nrf_temp_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given TEMP event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="226" column="24" declfile="hal/nrf_temp.h" declline="226" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__temp__hal_1ga906169907f9abe8c84d8a71d4f800c77" prot="public" static="no">
        <name>NRF_TEMP_HAS_CALIBRATION</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the calibration of temperature measurement is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_temp.h" line="52" column="9" bodyfile="hal/nrf_temp.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Hardware access layer for managing the Temperature sensor (TEMP). </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
