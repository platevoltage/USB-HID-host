<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="nrf__saadc_8h" kind="file" language="C++">
    <compoundname>nrf_saadc.h</compoundname>
    <includes local="no">nrfx.h</includes>
    <includedby refid="nrfy__saadc_8h" local="no">haly/nrfy_saadc.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>hal/nrf_saadc.h</label>
        <link refid="nrf__saadc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>nrfx.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnrf__saadc__config__t" prot="public">nrf_saadc_config_t</innerclass>
    <innerclass refid="structnrf__saadc__channel__config__t" prot="public">nrf_saadc_channel_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga8beaf4b8656ae5a6e08370cd6b93dbe7" prot="public" static="no">
        <name>NRF_SAADC_LIMITS_INT_OFFSET</name>
        <initializer>    <ref refid="group__nrfx__common_1ga3a3c912a8618b4181054a51dc49e6bd4" kindref="member">NRFX_MIN</ref>(SAADC_INTENSET_CH0LIMITH_Pos, SAADC_INTENSET_CH0LIMITL_Pos)</initializer>
        <briefdescription>
<para>Symbol specifying the offset of interrupt bitmask for limits of all channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="51" column="9" bodyfile="hal/nrf_saadc.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gac20d814557511379d047a7fae9f50286" prot="public" static="no">
        <name>NRF_SAADC_ALL_CHANNELS_LIMITS_INT_MASK</name>
        <initializer>    ((uint32_t)(((1 &lt;&lt; SAADC_CH_NUM) - 1) &lt;&lt; <ref refid="group__nrf__saadc__hal_1ga8beaf4b8656ae5a6e08370cd6b93dbe7" kindref="member">NRF_SAADC_LIMITS_INT_OFFSET</ref>))</initializer>
        <briefdescription>
<para>Symbol specifying the interrupt bitmask for limits of all channels. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="55" column="9" bodyfile="hal/nrf_saadc.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gaf8ecd89d6dff458ea7b5758720f2206c" prot="public" static="no">
        <name>NRF_SAADC_HAS_ACQTIME_ENUM</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the configuration of acquisition time using predefined values is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="60" column="9" bodyfile="hal/nrf_saadc.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga1ad1584b87bf46e7128b24569c51994f" prot="public" static="no">
        <name>NRF_SAADC_HAS_CONVTIME</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the configuration of conversion time is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="67" column="9" bodyfile="hal/nrf_saadc.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga404180f8c1f70181c1fa18f80fa5c2b2" prot="public" static="no">
        <name>NRF_SAADC_HAS_LIN_CAL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether the configuration of linearity calibration coefficients is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="74" column="9" bodyfile="hal/nrf_saadc.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gad208af8488dff8665cc7d26294101ddb" prot="public" static="no">
        <name>NRF_SAADC_HAS_AIN_AS_PIN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether configuration of analog input using pin number is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="81" column="9" bodyfile="hal/nrf_saadc.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga55baf1fdbd14824d4bf32a16f01ef33d" prot="public" static="no">
        <name>NRF_SAADC_HAS_DMA_REG</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether dedicated DMA register is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="88" column="9" bodyfile="hal/nrf_saadc.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga81f350f2227ba02ecfdef11a9ad99d9f" prot="public" static="no">
        <name>NRF_SAADC_HAS_DMA_EVENTS</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether SAADC DMA events are present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="95" column="9" bodyfile="hal/nrf_saadc.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gaa5661e8ffcbe53a029c29d6ba0583c44" prot="public" static="no">
        <name>NRF_SAADC_HAS_CH_CONFIG_RES</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Symbol indicating whether SAADC channel resistor control is present. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="102" column="9" bodyfile="hal/nrf_saadc.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gad502160997b1d84e2920f7a12b12c1b4" prot="public" static="no">
        <name>NRF_SAADC_CONVTIME_MAX</name>
        <initializer>SAADC_CH_CONFIG_TCONV_Max</initializer>
        <briefdescription>
<para>Symbol specifying maximum value of conversion time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="114" column="9" bodyfile="hal/nrf_saadc.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga8787fbd8eab6641623e0a879f573623b" prot="public" static="no">
        <name>NRF_SAADC_LIN_CAL_MAX_COUNT</name>
        <initializer>SAADC_TRIM_LINCALCOEFF_MaxCount</initializer>
        <briefdescription>
<para>Symbol specifying maximum count of linearity calibration coefficients. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="119" column="9" bodyfile="hal/nrf_saadc.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gad5fbfcb2d28ba5939df9d9e690a02918" prot="public" static="no">
        <name>NRF_SAADC_LIN_CAL_MAX</name>
        <initializer>SAADC_TRIM_LINCALCOEFF_VAL_Max</initializer>
        <briefdescription>
<para>Symbol specifying maximum value of linearity calibration coefficient. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="122" column="9" bodyfile="hal/nrf_saadc.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1ga86e4c313938ca27b03ce26de863d6aaf" prot="public" static="no">
        <name>NRF_SAADC_8BIT_SAMPLE_WIDTH</name>
        <initializer>8</initializer>
        <briefdescription>
<para>Symbol specifying width of the 8-bit sample in bits. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="127" column="9" bodyfile="hal/nrf_saadc.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__nrf__saadc__hal_1gab2b904fd842250f953752e186fd7ba66" prot="public" static="no">
        <name>NRF_SAADC_INPUT_DISABLED</name>
        <initializer>((<ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref>)UINT32_MAX)</initializer>
        <briefdescription>
<para>Symbol specifying disconnected analog input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="146" column="9" bodyfile="hal/nrf_saadc.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_resolution_t</name>
        <enumvalue id="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a9c906fc4ba0c92e8cd641f2b361e0dca" prot="public">
          <name>NRF_SAADC_RESOLUTION_8BIT</name>
          <initializer>= SAADC_RESOLUTION_VAL_8bit</initializer>
          <briefdescription>
<para>8 bit resolution. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a0b1d34632f8e3ef1cf2d4f18a23bd667" prot="public">
          <name>NRF_SAADC_RESOLUTION_10BIT</name>
          <initializer>= SAADC_RESOLUTION_VAL_10bit</initializer>
          <briefdescription>
<para>10 bit resolution. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a07b412d0ffcffd71026ceb4effbdb31e" prot="public">
          <name>NRF_SAADC_RESOLUTION_12BIT</name>
          <initializer>= SAADC_RESOLUTION_VAL_12bit</initializer>
          <briefdescription>
<para>12 bit resolution. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a3b01ada0cfa0aba5a95b5b222169756b" prot="public">
          <name>NRF_SAADC_RESOLUTION_14BIT</name>
          <initializer>= SAADC_RESOLUTION_VAL_14bit</initializer>
          <briefdescription>
<para>14 bit resolution. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Resolution of the analog-to-digital converter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="133" column="1" bodyfile="hal/nrf_saadc.h" bodystart="134" bodyend="139"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_oversample_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a07bd46d3a4b42947b73e5ffbf77de0bf" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_DISABLED</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Bypass</initializer>
          <briefdescription>
<para>No oversampling. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39ac33692f15f098ea8ef6777c353009a17" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_2X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over2x</initializer>
          <briefdescription>
<para>Oversample 2x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39afa0ae6d243f9da65d42e382e10574647" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_4X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over4x</initializer>
          <briefdescription>
<para>Oversample 4x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a678abd8d9f3856e95979fa9cd60d02ea" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_8X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over8x</initializer>
          <briefdescription>
<para>Oversample 8x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a108b3c93033a3f08715e9127c76e9eac" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_16X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over16x</initializer>
          <briefdescription>
<para>Oversample 16x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a2e0670954aafc7b52b37e16737db12a6" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_32X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over32x</initializer>
          <briefdescription>
<para>Oversample 32x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39ab51b06d2c5bcd8a85c81aac8e5979323" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_64X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over64x</initializer>
          <briefdescription>
<para>Oversample 64x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a301c27ff073e372fb03397683b29222f" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_128X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over128x</initializer>
          <briefdescription>
<para>Oversample 128x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39ace10f1369e776f3b86de8b69cff6065c" prot="public">
          <name>NRF_SAADC_OVERSAMPLE_256X</name>
          <initializer>= SAADC_OVERSAMPLE_OVERSAMPLE_Over256x</initializer>
          <briefdescription>
<para>Oversample 256x. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter oversampling mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="188" column="1" bodyfile="hal/nrf_saadc.h" bodystart="189" bodyend="199"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga1ac6795cf7f0c7c87df12a6c87fb4303" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_resistor_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga1ac6795cf7f0c7c87df12a6c87fb4303ac941d50e00494def50bfb5c2ab32c84d" prot="public">
          <name>NRF_SAADC_RESISTOR_DISABLED</name>
          <initializer>= SAADC_CH_CONFIG_RESP_Bypass</initializer>
          <briefdescription>
<para>Bypass resistor ladder. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga1ac6795cf7f0c7c87df12a6c87fb4303abfe4b85be11a4f7da453017634a808c0" prot="public">
          <name>NRF_SAADC_RESISTOR_PULLDOWN</name>
          <initializer>= SAADC_CH_CONFIG_RESP_Pulldown</initializer>
          <briefdescription>
<para>Pull-down to GND. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga1ac6795cf7f0c7c87df12a6c87fb4303a5f5486c3fa0bd560b4d3cf0eead03328" prot="public">
          <name>NRF_SAADC_RESISTOR_PULLUP</name>
          <initializer>= SAADC_CH_CONFIG_RESP_Pullup</initializer>
          <briefdescription>
<para>Pull-up to VDD. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga1ac6795cf7f0c7c87df12a6c87fb4303a459416062bf0c090f5558d033103bb54" prot="public">
          <name>NRF_SAADC_RESISTOR_VDD1_2</name>
          <initializer>= SAADC_CH_CONFIG_RESP_VDD1_2</initializer>
          <briefdescription>
<para>Set input at VDD/2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter channel resistor control. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="203" column="1" bodyfile="hal/nrf_saadc.h" bodystart="204" bodyend="214"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1gadda2525fbe5db392d1c1980c4a1286a0" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_gain_t</name>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a51b7e2b28fe46a742870328ad6d48cc2" prot="public">
          <name>NRF_SAADC_GAIN1_6</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain1_6</initializer>
          <briefdescription>
<para>Gain factor 1/6. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a6b6ea2d94564978e0a04ec27eb36dcaf" prot="public">
          <name>NRF_SAADC_GAIN1_5</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain1_5</initializer>
          <briefdescription>
<para>Gain factor 1/5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a8bdf3696726cc885b69a8edd16842340" prot="public">
          <name>NRF_SAADC_GAIN1_4</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain1_4</initializer>
          <briefdescription>
<para>Gain factor 1/4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0ac03a3022d2b16e4e148e0e3f4c2a9030" prot="public">
          <name>NRF_SAADC_GAIN2_7</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain2_7</initializer>
          <briefdescription>
<para>Gain factor 2/7. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0af07ee87058d9573360b9886f0d197b23" prot="public">
          <name>NRF_SAADC_GAIN1_3</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain1_3</initializer>
          <briefdescription>
<para>Gain factor 1/3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0ae199bbb85013b0d8d22cf70a3dc48c1e" prot="public">
          <name>NRF_SAADC_GAIN2_5</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain2_5</initializer>
          <briefdescription>
<para>Gain factor 2/5. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a1aafa7a93cf70c82f808db67c74f6e61" prot="public">
          <name>NRF_SAADC_GAIN1_2</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain1_2</initializer>
          <briefdescription>
<para>Gain factor 1/2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0ad2f1c75838cec0ee85719b7f756bff75" prot="public">
          <name>NRF_SAADC_GAIN2_3</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain2_3</initializer>
          <briefdescription>
<para>Gain factor 2/3. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a49a79897cf1a7f924965c566a41880e7" prot="public">
          <name>NRF_SAADC_GAIN1</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain1</initializer>
          <briefdescription>
<para>Gain factor 1. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0aaf44b0f743dd2eb51ef662fc82b9c09d" prot="public">
          <name>NRF_SAADC_GAIN2</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain2</initializer>
          <briefdescription>
<para>Gain factor 2. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0ab24781a885803059e306560ac6ef4de3" prot="public">
          <name>NRF_SAADC_GAIN4</name>
          <initializer>= SAADC_CH_CONFIG_GAIN_Gain4</initializer>
          <briefdescription>
<para>Gain factor 4. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Gain factor of the analog-to-digital converter input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="218" column="1" bodyfile="hal/nrf_saadc.h" bodystart="219" bodyend="255"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1gad540c22a2e06a7828a5ce6c71bc8a5d4" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_reference_t</name>
        <enumvalue id="group__nrf__saadc__hal_1ggad540c22a2e06a7828a5ce6c71bc8a5d4a45e4751bab9abc4fb0e8cf281f2010fc" prot="public">
          <name>NRF_SAADC_REFERENCE_INTERNAL</name>
          <initializer>= SAADC_CH_CONFIG_REFSEL_Internal</initializer>
          <briefdescription>
<para>Internal reference. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggad540c22a2e06a7828a5ce6c71bc8a5d4aac8f8c9c960da2c5edba27c84b776d45" prot="public">
          <name>NRF_SAADC_REFERENCE_VDD4</name>
          <initializer>= SAADC_CH_CONFIG_REFSEL_VDD1_4


    NRF_SAADC_REFERENCE_EXTERNAL = SAADC_CH_CONFIG_REFSEL_External</initializer>
          <briefdescription>
<para>VDD/4 as reference. </para>
          </briefdescription>
          <detaileddescription>
<para>External reference. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Reference selection for the analog-to-digital converter. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="258" column="1" bodyfile="hal/nrf_saadc.h" bodystart="259" bodyend="269"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga125831a7eb192939bd96d99ab1e7a742" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_acqtime_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a91b53f4264eafab02d15d6885db5acbd" prot="public">
          <name>NRF_SAADC_ACQTIME_3US</name>
          <initializer>= SAADC_CH_CONFIG_TACQ_3us</initializer>
          <briefdescription>
<para>3 us. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a440d0922fa9ede3513dff2c0132e6abf" prot="public">
          <name>NRF_SAADC_ACQTIME_5US</name>
          <initializer>= SAADC_CH_CONFIG_TACQ_5us</initializer>
          <briefdescription>
<para>5 us. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a7452b8e0b08b260e95c8cdcc949a0eed" prot="public">
          <name>NRF_SAADC_ACQTIME_10US</name>
          <initializer>= SAADC_CH_CONFIG_TACQ_10us</initializer>
          <briefdescription>
<para>10 us. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a32eb0eead4bd3bff1add85aedbfb34c6" prot="public">
          <name>NRF_SAADC_ACQTIME_15US</name>
          <initializer>= SAADC_CH_CONFIG_TACQ_15us</initializer>
          <briefdescription>
<para>15 us. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742abd6f18b68b384ee5cf466f2ddade6e49" prot="public">
          <name>NRF_SAADC_ACQTIME_20US</name>
          <initializer>= SAADC_CH_CONFIG_TACQ_20us</initializer>
          <briefdescription>
<para>20 us. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a0dfc455375a35f2747539aeadb9d77cd" prot="public">
          <name>NRF_SAADC_ACQTIME_40US</name>
          <initializer>= SAADC_CH_CONFIG_TACQ_40us</initializer>
          <briefdescription>
<para>40 us. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter acquisition time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="273" column="1" bodyfile="hal/nrf_saadc.h" bodystart="274" bodyend="281"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga4436d07f1135db83c486397781e718c2" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_mode_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga4436d07f1135db83c486397781e718c2ad0ce3a0327c0393e981db20d43c709f8" prot="public">
          <name>NRF_SAADC_MODE_SINGLE_ENDED</name>
          <initializer>= SAADC_CH_CONFIG_MODE_SE</initializer>
          <briefdescription>
<para>Single-ended mode. PSELN will be ignored, negative input to ADC shorted to GND. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga4436d07f1135db83c486397781e718c2a4c57cd1fc309cd665870b257f4c50767" prot="public">
          <name>NRF_SAADC_MODE_DIFFERENTIAL</name>
          <initializer>= SAADC_CH_CONFIG_MODE_Diff</initializer>
          <briefdescription>
<para>Differential mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter channel mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="287" column="1" bodyfile="hal/nrf_saadc.h" bodystart="288" bodyend="291"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga46239c9f1d0af686aa09373d68c9a61a" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_burst_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga46239c9f1d0af686aa09373d68c9a61aa605705545f3c481ada5c0c068c26dd28" prot="public">
          <name>NRF_SAADC_BURST_DISABLED</name>
          <initializer>= SAADC_CH_CONFIG_BURST_Disabled</initializer>
          <briefdescription>
<para>Burst mode is disabled (normal operation). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga46239c9f1d0af686aa09373d68c9a61aa67d75ecddee833d170c2b924ad8b1ef2" prot="public">
          <name>NRF_SAADC_BURST_ENABLED</name>
          <initializer>= SAADC_CH_CONFIG_BURST_Enabled</initializer>
          <briefdescription>
<para>Burst mode is enabled. SAADC takes 2^OVERSAMPLE number of samples as fast as it can, and sends the average to Data RAM. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter channel burst mode. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="294" column="1" bodyfile="hal/nrf_saadc.h" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_task_t</name>
        <enumvalue id="group__nrf__saadc__hal_1ggacde3c3040c12e04f9edc2bc92c1b2276a7900b2c3694c7cc4da64f5de28da8b9b" prot="public">
          <name>NRF_SAADC_TASK_START</name>
          <initializer>= offsetof(NRF_SAADC_Type, TASKS_START)</initializer>
          <briefdescription>
<para>Start the ADC and prepare the result buffer in RAM. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggacde3c3040c12e04f9edc2bc92c1b2276a268763796f741cda6eea1a51f348b204" prot="public">
          <name>NRF_SAADC_TASK_STOP</name>
          <initializer>= offsetof(NRF_SAADC_Type, TASKS_STOP)</initializer>
          <briefdescription>
<para>Stop the ADC and terminate any ongoing conversion. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggacde3c3040c12e04f9edc2bc92c1b2276a53f835ed3f4b6e9ff24d1550ead3c941" prot="public">
          <name>NRF_SAADC_TASK_SAMPLE</name>
          <initializer>= offsetof(NRF_SAADC_Type, TASKS_SAMPLE)</initializer>
          <briefdescription>
<para>Take one ADC sample. If scan is enabled, all channels are sampled. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggacde3c3040c12e04f9edc2bc92c1b2276a541cf2b16d6bd1ca797afcb691e47603" prot="public">
          <name>NRF_SAADC_TASK_CALIBRATEOFFSET</name>
          <initializer>= offsetof(NRF_SAADC_Type, TASKS_CALIBRATEOFFSET)</initializer>
          <briefdescription>
<para>Starts offset auto-calibration. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter tasks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="301" column="1" bodyfile="hal/nrf_saadc.h" bodystart="302" bodyend="307"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_event_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a8802cfd4ef157b181acf414cff6ff409" prot="public">
          <name>NRF_SAADC_EVENT_STARTED</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_STARTED)</initializer>
          <briefdescription>
<para>The ADC has started. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a3caea189d3feb4fb51f3eeeaa31a7d51" prot="public">
          <name>NRF_SAADC_EVENT_END</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_DMA.END)</initializer>
          <briefdescription>
<para>The ADC has filled up the result buffer. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a38a3b65b88b278c566528173ee6f3403" prot="public">
          <name>NRF_SAADC_EVENT_DONE</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_DONE)</initializer>
          <briefdescription>
<para>A conversion task has been completed. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1af1aea0c0901456d0e677ed29e33e918a" prot="public">
          <name>NRF_SAADC_EVENT_RESULTDONE</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_RESULTDONE)</initializer>
          <briefdescription>
<para>A result is ready to get transferred to RAM. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1abc9496dabfb62fe70c1ab872400bf75b" prot="public">
          <name>NRF_SAADC_EVENT_CALIBRATEDONE</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CALIBRATEDONE)</initializer>
          <briefdescription>
<para>Calibration is complete. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ab74a57373475fe680c97c82ac7b73938" prot="public">
          <name>NRF_SAADC_EVENT_STOPPED</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_STOPPED)</initializer>
          <briefdescription>
<para>The ADC has stopped. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1adb37680e1256ecb958a572fa385ee739" prot="public">
          <name>NRF_SAADC_EVENT_CH0_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[0].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[0].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1afeeb02e7df74fb429bf2f01cc45b7f82" prot="public">
          <name>NRF_SAADC_EVENT_CH0_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[0].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[0].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ac39d01a0de5b6705b86bff7f7210e2a9" prot="public">
          <name>NRF_SAADC_EVENT_CH1_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[1].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[1].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ad247142de8549552b7a7446ed604e4af" prot="public">
          <name>NRF_SAADC_EVENT_CH1_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[1].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[1].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1afc3c9fe35a2721ed3618df52b62e6f1f" prot="public">
          <name>NRF_SAADC_EVENT_CH2_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[2].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[2].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1aef66a24727e5dc12d2dcbd3b8a00583f" prot="public">
          <name>NRF_SAADC_EVENT_CH2_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[2].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[2].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a148cbb2a196f1656413179089b63d6ab" prot="public">
          <name>NRF_SAADC_EVENT_CH3_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[3].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[3].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ada7b054199e1fa667ddee5bffd790213" prot="public">
          <name>NRF_SAADC_EVENT_CH3_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[3].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[3].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a9179d81d5f56dbcb487b45fbb23a6c20" prot="public">
          <name>NRF_SAADC_EVENT_CH4_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[4].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[4].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a19d836edc59abc15f62cd0630ea58cc8" prot="public">
          <name>NRF_SAADC_EVENT_CH4_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[4].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[4].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ae14d0343df57c333a35458ab1cb08a1f" prot="public">
          <name>NRF_SAADC_EVENT_CH5_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[5].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[5].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a0ffc3add15b391667be38015a5f8418e" prot="public">
          <name>NRF_SAADC_EVENT_CH5_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[5].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[5].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a814747e44cb3ce2dad5bef354eef155e" prot="public">
          <name>NRF_SAADC_EVENT_CH6_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[6].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[6].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a82ef01bcaf54abc8bb1a2f2932651ae4" prot="public">
          <name>NRF_SAADC_EVENT_CH6_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[6].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[6].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a2b4acf6c8a8f5ac233849c3e4a260529" prot="public">
          <name>NRF_SAADC_EVENT_CH7_LIMITH</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[7].LIMITH)</initializer>
          <briefdescription>
<para>Last result is equal or above CH[7].LIMIT.HIGH. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a0d0e19a21605e1a5f560bbb9d94fbe3f" prot="public">
          <name>NRF_SAADC_EVENT_CH7_LIMITL</name>
          <initializer>= offsetof(NRF_SAADC_Type, EVENTS_CH[7].LIMITL)</initializer>
          <briefdescription>
<para>Last result is equal or below CH[7].LIMIT.LOW. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter events. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="310" column="1" bodyfile="hal/nrf_saadc.h" bodystart="311" bodyend="338"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1ga82c6d9ccbed7aa753b044ae4216a52e7" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_int_mask_t</name>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7aa045e1687b7eaf51827129bccfae99ae" prot="public">
          <name>NRF_SAADC_INT_STARTED</name>
          <initializer>= SAADC_INTENSET_STARTED_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_STARTED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a1dfee95542a3a3499cbb5875eb33808d" prot="public">
          <name>NRF_SAADC_INT_END</name>
          <initializer>= SAADC_INTENSET_DMAEND_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_END event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a1ce20cb57f783d5feae941dec4348920" prot="public">
          <name>NRF_SAADC_INT_DONE</name>
          <initializer>= SAADC_INTENSET_DONE_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_DONE event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a0b08e2221943faac470b466d3c59745b" prot="public">
          <name>NRF_SAADC_INT_RESULTDONE</name>
          <initializer>= SAADC_INTENSET_RESULTDONE_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_RESULTDONE event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a3d488af5afe59a781c026af9ebea6f0d" prot="public">
          <name>NRF_SAADC_INT_CALIBRATEDONE</name>
          <initializer>= SAADC_INTENSET_CALIBRATEDONE_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CALIBRATEDONE event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a8bd1e8a4f530a9ecbfdaf9b6dd5dd805" prot="public">
          <name>NRF_SAADC_INT_STOPPED</name>
          <initializer>= SAADC_INTENSET_STOPPED_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_STOPPED event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a807ef5f8b39d6d5d05353d817d2b7fd3" prot="public">
          <name>NRF_SAADC_INT_CH0LIMITH</name>
          <initializer>= SAADC_INTENSET_CH0LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[0].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a2ee8aba4ca294b8d94266252268193db" prot="public">
          <name>NRF_SAADC_INT_CH0LIMITL</name>
          <initializer>= SAADC_INTENSET_CH0LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[0].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a08e9613aa09aa07c0c18fb57e65208e2" prot="public">
          <name>NRF_SAADC_INT_CH1LIMITH</name>
          <initializer>= SAADC_INTENSET_CH1LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[1].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7ae4cee39513094642ccc5490e58adee8e" prot="public">
          <name>NRF_SAADC_INT_CH1LIMITL</name>
          <initializer>= SAADC_INTENSET_CH1LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[1].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a54a04edc15cc38bc4a657657ea4ae34c" prot="public">
          <name>NRF_SAADC_INT_CH2LIMITH</name>
          <initializer>= SAADC_INTENSET_CH2LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[2].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a360826a886f90b76b79b23409fc620f2" prot="public">
          <name>NRF_SAADC_INT_CH2LIMITL</name>
          <initializer>= SAADC_INTENSET_CH2LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[2].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7abedd76d10671c7c1c133533d85d380d8" prot="public">
          <name>NRF_SAADC_INT_CH3LIMITH</name>
          <initializer>= SAADC_INTENSET_CH3LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[3].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7af42b94420fb86b061df28a9b96b2965f" prot="public">
          <name>NRF_SAADC_INT_CH3LIMITL</name>
          <initializer>= SAADC_INTENSET_CH3LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[3].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a5a21ec6f00929f84fdb9ce142bee81be" prot="public">
          <name>NRF_SAADC_INT_CH4LIMITH</name>
          <initializer>= SAADC_INTENSET_CH4LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[4].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a53150d22c5c0fb63137bd9661a5c0cb1" prot="public">
          <name>NRF_SAADC_INT_CH4LIMITL</name>
          <initializer>= SAADC_INTENSET_CH4LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[4].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7af470bd28c2f8969dc5f48929d9ab118e" prot="public">
          <name>NRF_SAADC_INT_CH5LIMITH</name>
          <initializer>= SAADC_INTENSET_CH5LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[5].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7ae5e6d12e0184a74139ff8f22a143ab7b" prot="public">
          <name>NRF_SAADC_INT_CH5LIMITL</name>
          <initializer>= SAADC_INTENSET_CH5LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[5].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a9f7bfd9b5c7129332bfd67ac87b8d27d" prot="public">
          <name>NRF_SAADC_INT_CH6LIMITH</name>
          <initializer>= SAADC_INTENSET_CH6LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[6].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7af3ad11a95f62e6ca0095217f952319c6" prot="public">
          <name>NRF_SAADC_INT_CH6LIMITL</name>
          <initializer>= SAADC_INTENSET_CH6LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[6].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a5f90ab95293f53a04c1c1fad010af3c6" prot="public">
          <name>NRF_SAADC_INT_CH7LIMITH</name>
          <initializer>= SAADC_INTENSET_CH7LIMITH_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[7].LIMITH event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7ac55d76dc332dc0301d5bb5110033f7c7" prot="public">
          <name>NRF_SAADC_INT_CH7LIMITL</name>
          <initializer>= SAADC_INTENSET_CH7LIMITL_Msk</initializer>
          <briefdescription>
<para>Interrupt on EVENTS_CH[7].LIMITL event. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7ae3e630effb1b905a3d661461cc86c4b5" prot="public">
          <name>NRF_SAADC_INT_ALL</name>
          <initializer>= 0x7FFFFFFFUL</initializer>
          <briefdescription>
<para>Mask of all interrupts. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter interrupt masks. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="341" column="1" bodyfile="hal/nrf_saadc.h" bodystart="342" bodyend="370"/>
      </memberdef>
      <memberdef kind="enum" id="group__nrf__saadc__hal_1gad3a1aa4df4fa236684487f209f438a3d" prot="public" static="no" strong="no">
        <type></type>
        <name>nrf_saadc_limit_t</name>
        <enumvalue id="group__nrf__saadc__hal_1ggad3a1aa4df4fa236684487f209f438a3da668f96bfc2e19db0c72fd6c7ebc2a4f6" prot="public">
          <name>NRF_SAADC_LIMIT_LOW</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Low limit type. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__nrf__saadc__hal_1ggad3a1aa4df4fa236684487f209f438a3da80f852093bfb4fd581b30f154322cc49" prot="public">
          <name>NRF_SAADC_LIMIT_HIGH</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>High limit type. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Analog-to-digital converter value limit type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="373" column="1" bodyfile="hal/nrf_saadc.h" bodystart="374" bodyend="377"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t nrf_saadc_input_t</definition>
        <argsstring></argsstring>
        <name>nrf_saadc_input_t</name>
        <briefdescription>
<para>Analog input type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="143" column="18" bodyfile="hal/nrf_saadc.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" prot="public" static="no">
        <type>void</type>
        <definition>typedef void nrf_saadc_value_t</definition>
        <argsstring></argsstring>
        <name>nrf_saadc_value_t</name>
        <briefdescription>
<para>Type of a single ADC conversion result. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="381" column="14" bodyfile="hal/nrf_saadc.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__nrf__saadc__hal_1gafaffd78a579b5fb3aa119c140d4271d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_task_trigger</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_task_t task)</argsstring>
        <name>nrf_saadc_task_trigger</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for triggering the specified SAADC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>SAADC task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="836" column="24" bodyfile="hal/nrf_saadc.h" bodystart="836" bodyend="839" declfile="hal/nrf_saadc.h" declline="419" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga2d7ab93e620dd1357e61015e67c38419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_saadc_task_address_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg, nrf_saadc_task_t task)</argsstring>
        <name>nrf_saadc_task_address_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified SAADC task register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>SAADC task.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified SAADC task. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="841" column="28" bodyfile="hal/nrf_saadc.h" bodystart="841" bodyend="845" declfile="hal/nrf_saadc.h" declline="430" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga302a420e63a91a87aa5a81e3f5aebada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_saadc_event_check</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg, nrf_saadc_event_t event)</argsstring>
        <name>nrf_saadc_event_check</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for retrieving the state of the SAADC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event to be checked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has been generated. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The event has not been generated. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="847" column="24" bodyfile="hal/nrf_saadc.h" bodystart="847" bodyend="850" declfile="hal/nrf_saadc.h" declline="442" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gafd8a1fe786b649956ebbcc6a905a7054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_event_clear</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_event_t event)</argsstring>
        <name>nrf_saadc_event_clear</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the specific SAADC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>SAADC event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="852" column="24" bodyfile="hal/nrf_saadc.h" bodystart="852" bodyend="856" declfile="hal/nrf_saadc.h" declline="451" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gadeade61bf67c5bdeea1af3a3cfbfa886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_saadc_event_address_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg, nrf_saadc_event_t event)</argsstring>
        <name>nrf_saadc_event_address_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for getting the address of the specified SAADC event register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>SAADC event.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of the specified SAADC event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="858" column="29" bodyfile="hal/nrf_saadc.h" bodystart="858" bodyend="862" declfile="hal/nrf_saadc.h" declline="462" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gaa129d5679cafb3c0d2a0b561c3f59f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_subscribe_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_task_t task, uint8_t channel)</argsstring>
        <name>nrf_saadc_subscribe_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the subscribe configuration for a given SAADC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to subscribe events. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="474" column="24" declfile="hal/nrf_saadc.h" declline="474" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga73ca056baa1bcd338b41180933724cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_subscribe_clear</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_task_t task)</argsstring>
        <name>nrf_saadc_subscribe_clear</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Function for clearing the subscribe configuration for a given SAADC task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">task</parametername>
</parameternamelist>
<parameterdescription>
<para>Task for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="485" column="24" declfile="hal/nrf_saadc.h" declline="485" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga9cc7ba9f6ead07f9a11c97a34ba813c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_publish_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_event_t event, uint8_t channel)</argsstring>
        <name>nrf_saadc_publish_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Function for setting the publish configuration for a given SAADC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to set the configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel through which to publish the event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="496" column="24" declfile="hal/nrf_saadc.h" declline="496" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gad675daf087af3c40989b5a75eb163d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_publish_clear</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_event_t event)</argsstring>
        <name>nrf_saadc_publish_clear</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref></type>
          <declname>event</declname>
        </param>
        <briefdescription>
<para>Function for clearing the publish configuration for a given SAADC event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event</parametername>
</parameternamelist>
<parameterdescription>
<para>Event for which to clear the configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="507" column="24" declfile="hal/nrf_saadc.h" declline="507" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga55a1e59db07bbcee1c6a0ae2f6c9bea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_saadc_event_t nrf_saadc_limit_event_get</definition>
        <argsstring>(uint8_t channel, nrf_saadc_limit_t limit_type)</argsstring>
        <name>nrf_saadc_limit_event_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gad3a1aa4df4fa236684487f209f438a3d" kindref="member">nrf_saadc_limit_t</ref></type>
          <declname>limit_type</declname>
        </param>
        <briefdescription>
<para>Function for getting the SAADC channel monitoring limit events. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">limit_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Low limit or high limit.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The SAADC channel monitoring limit event. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="892" column="37" bodyfile="hal/nrf_saadc.h" bodystart="892" bodyend="903" declfile="hal/nrf_saadc.h" declline="519" declcolumn="37"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga4aabfc8ebe63a4e31e55188ec4fc4d9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_channel_input_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint8_t channel, nrf_saadc_input_t pselp, nrf_saadc_input_t pseln)</argsstring>
        <name>nrf_saadc_channel_input_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref></type>
          <declname>pselp</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref></type>
          <declname>pseln</declname>
        </param>
        <briefdescription>
<para>Function for configuring the input pins for the specified SAADC channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pselp</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive input. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pseln</parametername>
</parameternamelist>
<parameterdescription>
<para>Negative input. Set to <ref refid="group__nrf__saadc__hal_1gab2b904fd842250f953752e186fd7ba66" kindref="member">NRF_SAADC_INPUT_DISABLED</ref> in single ended mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="905" column="24" bodyfile="hal/nrf_saadc.h" bodystart="905" bodyend="925" declfile="hal/nrf_saadc.h" declline="530" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga727fff4c406e29364c28ad51f4422108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_channel_pos_input_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint8_t channel, nrf_saadc_input_t pselp)</argsstring>
        <name>nrf_saadc_channel_pos_input_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref></type>
          <declname>pselp</declname>
        </param>
        <briefdescription>
<para>Function for configuring the positive input pin for the specified SAADC channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pselp</parametername>
</parameternamelist>
<parameterdescription>
<para>Positive input. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="927" column="24" bodyfile="hal/nrf_saadc.h" bodystart="927" bodyend="940" declfile="hal/nrf_saadc.h" declline="542" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga4c26cdf7597a21a26f0656dcd0211fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_channel_limits_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint8_t channel, int16_t low, int16_t high)</argsstring>
        <name>nrf_saadc_channel_limits_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>low</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>high</declname>
        </param>
        <briefdescription>
<para>Function for setting the SAADC channel monitoring limits. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">low</parametername>
</parameternamelist>
<parameterdescription>
<para>Low limit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">high</parametername>
</parameternamelist>
<parameterdescription>
<para>High limit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="942" column="24" bodyfile="hal/nrf_saadc.h" bodystart="942" bodyend="950" declfile="hal/nrf_saadc.h" declline="554" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gaabd7bf41a8bcbcd011e0b4b0625ad8b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_int_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_saadc_int_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for setting the configuration of SAADC interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupts configuration to be set. Use <ref refid="group__nrf__saadc__hal_1ga82c6d9ccbed7aa753b044ae4216a52e7" kindref="member">nrf_saadc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="952" column="24" bodyfile="hal/nrf_saadc.h" bodystart="952" bodyend="955" declfile="hal/nrf_saadc.h" declline="566" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gaa8487e94e0de1dd9fc3cb9eda33a896d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_int_enable</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_saadc_int_enable</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for enabling specified SAADC interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled. Use <ref refid="group__nrf__saadc__hal_1ga82c6d9ccbed7aa753b044ae4216a52e7" kindref="member">nrf_saadc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="957" column="24" bodyfile="hal/nrf_saadc.h" bodystart="957" bodyend="960" declfile="hal/nrf_saadc.h" declline="575" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga3a9a24e83f68aa22fad03a04648bad51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_saadc_int_enable_check</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg, uint32_t mask)</argsstring>
        <name>nrf_saadc_int_enable_check</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for checking if the specified interrupts are enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be checked. Use <ref refid="group__nrf__saadc__hal_1ga82c6d9ccbed7aa753b044ae4216a52e7" kindref="member">nrf_saadc_int_mask_t</ref> values for bit masking.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Mask of enabled interrupts. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="962" column="28" bodyfile="hal/nrf_saadc.h" bodystart="962" bodyend="965" declfile="hal/nrf_saadc.h" declline="586" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gaae53ced5f63daece6fcb751ac7ed6918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_int_disable</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint32_t mask)</argsstring>
        <name>nrf_saadc_int_disable</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Function for disabling specified interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled. Use <ref refid="group__nrf__saadc__hal_1ga82c6d9ccbed7aa753b044ae4216a52e7" kindref="member">nrf_saadc_int_mask_t</ref> values for bit masking. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="967" column="24" bodyfile="hal/nrf_saadc.h" bodystart="967" bodyend="970" declfile="hal/nrf_saadc.h" declline="595" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gab80147c8bd32b89c716f66e0f44664b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_saadc_limit_int_get</definition>
        <argsstring>(uint8_t channel, nrf_saadc_limit_t limit_type)</argsstring>
        <name>nrf_saadc_limit_int_get</name>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gad3a1aa4df4fa236684487f209f438a3d" kindref="member">nrf_saadc_limit_t</ref></type>
          <declname>limit_type</declname>
        </param>
        <briefdescription>
<para>Function for generating masks for SAADC channel limit interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>SAADC channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">limit_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Limit type.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Interrupt mask. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="972" column="28" bodyfile="hal/nrf_saadc.h" bodystart="972" bodyend="979" declfile="hal/nrf_saadc.h" declline="605" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gab25084e697b176775ed9ebf6b8b9a3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_saadc_busy_check</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_busy_check</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking whether the SAADC is busy. </para>
        </briefdescription>
        <detaileddescription>
<para>This function checks whether the analog-to-digital converter is busy with a conversion.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The SAADC is busy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The SAADC is not busy. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="981" column="24" bodyfile="hal/nrf_saadc.h" bodystart="981" bodyend="984" declfile="hal/nrf_saadc.h" declline="618" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga5fd952bc71c0d7bfc1227570b8e74f6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_enable</definition>
        <argsstring>(NRF_SAADC_Type *p_reg)</argsstring>
        <name>nrf_saadc_enable</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for enabling the SAADC. </para>
        </briefdescription>
        <detaileddescription>
<para>The analog-to-digital converter must be enabled before use.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="986" column="24" bodyfile="hal/nrf_saadc.h" bodystart="986" bodyend="989" declfile="hal/nrf_saadc.h" declline="627" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga44b8bee69dcb4efea99b2996eecf7956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_disable</definition>
        <argsstring>(NRF_SAADC_Type *p_reg)</argsstring>
        <name>nrf_saadc_disable</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the SAADC. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="991" column="24" bodyfile="hal/nrf_saadc.h" bodystart="991" bodyend="994" declfile="hal/nrf_saadc.h" declline="634" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga37805e60b6f56abe9faed4aa1e9ce61c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_saadc_enable_check</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_enable_check</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the SAADC is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The SAADC is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The SAADC is not enabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="996" column="24" bodyfile="hal/nrf_saadc.h" bodystart="996" bodyend="999" declfile="hal/nrf_saadc.h" declline="644" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gac1986dcb3b95d37d79d55c0263680867" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_buffer_init</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_value_t *p_buffer, uint32_t size)</argsstring>
        <name>nrf_saadc_buffer_init</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref> *</type>
          <declname>p_buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Function for initializing the SAADC result buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer (in 8-bit or 16-bit samples). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1001" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1001" bodyend="1019" declfile="hal/nrf_saadc.h" declline="653" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga1facfe7d84b1304b2bb4dc2d14111e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_buffer_pointer_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_value_t *p_buffer)</argsstring>
        <name>nrf_saadc_buffer_pointer_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref> *</type>
          <declname>p_buffer</declname>
        </param>
        <briefdescription>
<para>Function for setting the SAADC result buffer pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the result buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1021" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1021" bodyend="1029" declfile="hal/nrf_saadc.h" declline="663" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga2a76ad513d6670515127f3b97810667e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref> *</type>
        <definition>NRF_STATIC_INLINE nrf_saadc_value_t * nrf_saadc_buffer_pointer_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_buffer_pointer_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the SAADC result buffer pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the result buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1031" column="38" bodyfile="hal/nrf_saadc.h" bodystart="1031" bodyend="1038" declfile="hal/nrf_saadc.h" declline="673" declcolumn="38"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gab0c2fd3c8bd02b9ea19876ff6a856e98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint16_t</type>
        <definition>NRF_STATIC_INLINE uint16_t nrf_saadc_amount_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_amount_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the number of samples written to the result buffer since the previous START task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of 8-bit or 16-bit samples written to the buffer. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1040" column="28" bodyfile="hal/nrf_saadc.h" bodystart="1040" bodyend="1056" declfile="hal/nrf_saadc.h" declline="683" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gae3a1f1453c20051e27cb75ce2616fe33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_resolution_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_resolution_t resolution)</argsstring>
        <name>nrf_saadc_resolution_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref></type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Function for setting the SAADC sample resolution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit resolution. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1058" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1058" bodyend="1062" declfile="hal/nrf_saadc.h" declline="691" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga9c6df1f0637afe78a841e59d6c0d05da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_saadc_resolution_t nrf_saadc_resolution_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_resolution_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the SAADC sample resolution. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sample resolution. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1064" column="42" bodyfile="hal/nrf_saadc.h" bodystart="1064" bodyend="1067" declfile="hal/nrf_saadc.h" declline="701" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga73dd0c72c90270e07a4fccbb88a7e635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_oversample_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, nrf_saadc_oversample_t oversample)</argsstring>
        <name>nrf_saadc_oversample_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref></type>
          <declname>oversample</declname>
        </param>
        <briefdescription>
<para>Function for configuring the oversampling feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversample</parametername>
</parameternamelist>
<parameterdescription>
<para>Oversampling mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1069" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1069" bodyend="1073" declfile="hal/nrf_saadc.h" declline="709" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gae2e2bd4002cb6badb4ce4c65d630d1d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE <ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref></type>
        <definition>NRF_STATIC_INLINE nrf_saadc_oversample_t nrf_saadc_oversample_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_oversample_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for getting the oversampling feature configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Oversampling configuration. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1075" column="42" bodyfile="hal/nrf_saadc.h" bodystart="1075" bodyend="1078" declfile="hal/nrf_saadc.h" declline="719" declcolumn="42"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga2111f43b238ee2297026937fd63122ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_saadc_oversample_sample_count_get</definition>
        <argsstring>(nrf_saadc_oversample_t oversample)</argsstring>
        <name>nrf_saadc_oversample_sample_count_get</name>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref></type>
          <declname>oversample</declname>
        </param>
        <briefdescription>
<para>Function for getting the sample count needed for one averaged result for a given oversampling configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">oversample</parametername>
</parameternamelist>
<parameterdescription>
<para>Oversampling configuration.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Sample count. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1080" column="28" bodyfile="hal/nrf_saadc.h" bodystart="1080" bodyend="1083" declfile="hal/nrf_saadc.h" declline="729" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gafe3f681a38517ddd7a7b510ff028f630" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_continuous_mode_enable</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint16_t cc)</argsstring>
        <name>nrf_saadc_continuous_mode_enable</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>cc</declname>
        </param>
        <briefdescription>
<para>Function for enabling the continuous sampling. </para>
        </briefdescription>
        <detaileddescription>
<para>This function configures the SAADC internal timer to automatically take new samples at a fixed sample rate. Trigger the START task to begin continuous sampling. To stop the sampling, trigger the STOP task.</para>
<para><simplesect kind="note"><para>The internal timer can only be used when a single input channel is enabled.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cc</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture and compare value. Sample rate is 16 MHz/cc. Valid <computeroutput>CC</computeroutput> range is from 80 to 2047. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1085" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1085" bodyend="1090" declfile="hal/nrf_saadc.h" declline="744" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gaed86f2ee2f007709d6743c431bf9a6fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE bool</type>
        <definition>NRF_STATIC_INLINE bool nrf_saadc_continuous_mode_enable_check</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg)</argsstring>
        <name>nrf_saadc_continuous_mode_enable_check</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for checking if the continuous sampling is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>The continuous sampling is enabled. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>The continuous sampling is disabled. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1092" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1092" bodyend="1096" declfile="hal/nrf_saadc.h" declline="755" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga2d83cf54c0286dc51724f910a9155056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_continuous_mode_disable</definition>
        <argsstring>(NRF_SAADC_Type *p_reg)</argsstring>
        <name>nrf_saadc_continuous_mode_disable</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <briefdescription>
<para>Function for disabling the continuous sampling. </para>
        </briefdescription>
        <detaileddescription>
<para>New samples can still be acquired by manually triggering the SAMPLE task or by PPI.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1098" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1098" bodyend="1101" declfile="hal/nrf_saadc.h" declline="764" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga1032292d6a90f73e484c7d6afaa2cb34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_linearity_calibration_coeff_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint8_t index, uint32_t coeff)</argsstring>
        <name>nrf_saadc_linearity_calibration_coeff_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>coeff</declname>
        </param>
        <briefdescription>
<para>Function for setting linearity calibration coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Coefficient number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coeff</parametername>
</parameternamelist>
<parameterdescription>
<para>Value of the coefficient. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1104" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1104" bodyend="1111" declfile="hal/nrf_saadc.h" declline="774" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gad11784fbf6f342900ce6fe4339a9ed1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE uint32_t</type>
        <definition>NRF_STATIC_INLINE uint32_t nrf_saadc_linearity_calibration_coeff_get</definition>
        <argsstring>(NRF_SAADC_Type const *p_reg, uint8_t index)</argsstring>
        <name>nrf_saadc_linearity_calibration_coeff_get</name>
        <param>
          <type>NRF_SAADC_Type const *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Function for getting linearity calibration coefficient. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Coefficient number.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Value of the coefficient. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1113" column="28" bodyfile="hal/nrf_saadc.h" bodystart="1113" bodyend="1118" declfile="hal/nrf_saadc.h" declline="786" declcolumn="28"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga941ace352581ba7295b0f3c09a3570f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_channel_init</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint8_t channel, nrf_saadc_channel_config_t const *config)</argsstring>
        <name>nrf_saadc_channel_init</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="structnrf__saadc__channel__config__t" kindref="compound">nrf_saadc_channel_config_t</ref> const *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Function for initializing the SAADC channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the channel configuration structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1121" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1121" bodyend="1144" declfile="hal/nrf_saadc.h" declline="797" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga0e2c3e00c21adb8298fcf13eb618bb93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE void</type>
        <definition>NRF_STATIC_INLINE void nrf_saadc_burst_set</definition>
        <argsstring>(NRF_SAADC_Type *p_reg, uint8_t channel, nrf_saadc_burst_t burst)</argsstring>
        <name>nrf_saadc_burst_set</name>
        <param>
          <type>NRF_SAADC_Type *</type>
          <declname>p_reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>channel</declname>
        </param>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1ga46239c9f1d0af686aa09373d68c9a61a" kindref="member">nrf_saadc_burst_t</ref></type>
          <declname>burst</declname>
        </param>
        <briefdescription>
<para>Function for configuring the burst mode for the specified channel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">p_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure of registers of the peripheral. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">channel</parametername>
</parameternamelist>
<parameterdescription>
<para>Channel number. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">burst</parametername>
</parameternamelist>
<parameterdescription>
<para>Burst mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1146" column="24" bodyfile="hal/nrf_saadc.h" bodystart="1146" bodyend="1152" declfile="hal/nrf_saadc.h" declline="808" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1ga428c82af7d71a2d4ac62fea00d0ec66b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE int16_t</type>
        <definition>NRF_STATIC_INLINE int16_t nrf_saadc_value_min_get</definition>
        <argsstring>(nrf_saadc_resolution_t resolution)</argsstring>
        <name>nrf_saadc_value_min_get</name>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref></type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Function for getting the minimum value of the conversion result. </para>
        </briefdescription>
        <detaileddescription>
<para>The minimum value of the conversion result depends on the configured resolution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit resolution.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Minimum value of the conversion result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1154" column="27" bodyfile="hal/nrf_saadc.h" bodystart="1154" bodyend="1175" declfile="hal/nrf_saadc.h" declline="821" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__nrf__saadc__hal_1gafee2b4a40ff7fdb6c5b8ade61b859878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NRF_STATIC_INLINE int16_t</type>
        <definition>NRF_STATIC_INLINE int16_t nrf_saadc_value_max_get</definition>
        <argsstring>(nrf_saadc_resolution_t resolution)</argsstring>
        <name>nrf_saadc_value_max_get</name>
        <param>
          <type><ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref></type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Function for getting the maximum value of the conversion result. </para>
        </briefdescription>
        <detaileddescription>
<para>The maximum value of the conversion result depends on the configured resolution.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>Bit resolution.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Maximum value of the conversion result. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hal/nrf_saadc.h" line="1177" column="27" bodyfile="hal/nrf_saadc.h" bodystart="1177" bodyend="1198" declfile="hal/nrf_saadc.h" declline="832" declcolumn="27"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015<sp/>-<sp/>2024,<sp/>Nordic<sp/>Semiconductor<sp/>ASA</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_SAADC_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;nrfx.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="43"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>@defgroup<sp/>nrf_saadc_hal<sp/>SAADC<sp/>HAL</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>@{</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>@ingroup<sp/>nrf_saadc</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/><sp/>Hardware<sp/>access<sp/>layer<sp/>for<sp/>managing<sp/>the<sp/>SAADC<sp/>peripheral.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>the<sp/>offset<sp/>of<sp/>interrupt<sp/>bitmask<sp/>for<sp/>limits<sp/>of<sp/>all<sp/>channels.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_LIMITS_INT_OFFSET<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>NRFX_MIN(SAADC_INTENSET_CH0LIMITH_Pos,<sp/>SAADC_INTENSET_CH0LIMITL_Pos)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="54"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>the<sp/>interrupt<sp/>bitmask<sp/>for<sp/>limits<sp/>of<sp/>all<sp/>channels.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_ALL_CHANNELS_LIMITS_INT_MASK<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((uint32_t)(((1<sp/>&lt;&lt;<sp/>SAADC_CH_NUM)<sp/>-<sp/>1)<sp/>&lt;&lt;<sp/>NRF_SAADC_LIMITS_INT_OFFSET))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_TACQ_3us)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="59"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>configuration<sp/>of<sp/>acquisition<sp/>time<sp/>using<sp/>predefined<sp/>values<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_ACQTIME_ENUM<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_ACQTIME_ENUM<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_TCONV_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>configuration<sp/>of<sp/>conversion<sp/>time<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_CONVTIME<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_CONVTIME<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_TRIM_LINCALCOEFF_VAL_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="73"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>the<sp/>configuration<sp/>of<sp/>linearity<sp/>calibration<sp/>coefficients<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_LIN_CAL<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_LIN_CAL<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_PSELP_PIN_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="80"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>configuration<sp/>of<sp/>analog<sp/>input<sp/>using<sp/>pin<sp/>number<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_AIN_AS_PIN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_AIN_AS_PIN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_DMA_PTR_PTR_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>dedicated<sp/>DMA<sp/>register<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_DMA_REG<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_DMA_REG<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_EVENTS_DMA_END_END_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="94"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>SAADC<sp/>DMA<sp/>events<sp/>are<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_DMA_EVENTS<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_DMA_EVENTS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_RESP_Msk)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="101"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>indicating<sp/>whether<sp/>SAADC<sp/>channel<sp/>resistor<sp/>control<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_CH_CONFIG_RES<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_HAS_CH_CONFIG_RES<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NRF_SAADC_HAS_ACQTIME_ENUM</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="108"><highlight class="comment">/**<sp/>@brief<sp/>Maximum<sp/>value<sp/>of<sp/>acquire<sp/>time.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_ACQTIME_MAX<sp/>SAADC_CH_CONFIG_TACQ_Max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_CONVTIME</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="113"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>maximum<sp/>value<sp/>of<sp/>conversion<sp/>time.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_CONVTIME_MAX<sp/>SAADC_CH_CONFIG_TCONV_Max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_LIN_CAL</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="118"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>maximum<sp/>count<sp/>of<sp/>linearity<sp/>calibration<sp/>coefficients.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_LIN_CAL_MAX_COUNT<sp/>SAADC_TRIM_LINCALCOEFF_MaxCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="121"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>maximum<sp/>value<sp/>of<sp/>linearity<sp/>calibration<sp/>coefficient.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_LIN_CAL_MAX<sp/>SAADC_TRIM_LINCALCOEFF_VAL_Max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NRF54H20_ENGA_XXAA)<sp/>||<sp/>defined(NRF54L15_ENGA_XXAA)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="126"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>width<sp/>of<sp/>the<sp/>8-bit<sp/>sample<sp/>in<sp/>bits.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_8BIT_SAMPLE_WIDTH<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_8BIT_SAMPLE_WIDTH<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment">/**<sp/>@brief<sp/>Resolution<sp/>of<sp/>the<sp/>analog-to-digital<sp/>converter.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a9c906fc4ba0c92e8cd641f2b361e0dca" kindref="member">NRF_SAADC_RESOLUTION_8BIT</ref><sp/><sp/>=<sp/>SAADC_RESOLUTION_VAL_8bit,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>8<sp/>bit<sp/>resolution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a0b1d34632f8e3ef1cf2d4f18a23bd667" kindref="member">NRF_SAADC_RESOLUTION_10BIT</ref><sp/>=<sp/>SAADC_RESOLUTION_VAL_10bit,<sp/></highlight><highlight class="comment">///&lt;<sp/>10<sp/>bit<sp/>resolution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a07b412d0ffcffd71026ceb4effbdb31e" kindref="member">NRF_SAADC_RESOLUTION_12BIT</ref><sp/>=<sp/>SAADC_RESOLUTION_VAL_12bit,<sp/></highlight><highlight class="comment">///&lt;<sp/>12<sp/>bit<sp/>resolution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a3b01ada0cfa0aba5a95b5b222169756b" kindref="member">NRF_SAADC_RESOLUTION_14BIT</ref><sp/>=<sp/>SAADC_RESOLUTION_VAL_14bit<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>14<sp/>bit<sp/>resolution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal">}<sp/><ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_AIN_AS_PIN</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment">/**<sp/>@brief<sp/>Analog<sp/>input<sp/>type.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="145"><highlight class="comment">/**<sp/>@brief<sp/>Symbol<sp/>specifying<sp/>disconnected<sp/>analog<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NRF_SAADC_INPUT_DISABLED<sp/>((nrf_saadc_input_t)UINT32_MAX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="148"><highlight class="comment">/**<sp/>@brief<sp/>Input<sp/>selection<sp/>for<sp/>the<sp/>analog-to-digital<sp/>converter.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gab2b904fd842250f953752e186fd7ba66" kindref="member">NRF_SAADC_INPUT_DISABLED</ref><sp/>=<sp/>SAADC_CH_PSELP_PSELP_NC,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Not<sp/>connected.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN0<sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput0,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>0<sp/>(AIN0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN1<sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput1,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>1<sp/>(AIN1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN2<sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput2,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>2<sp/>(AIN2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN3<sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput3,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>3<sp/>(AIN3).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN4<sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput4,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>4<sp/>(AIN4).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN5<sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput5,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>5<sp/>(AIN5).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN6<sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput6,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>6<sp/>(AIN6).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN7<sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput7,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>7<sp/>(AIN7).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_PSELP_PSELP_VDD)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_VDD<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_VDD,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>VDD<sp/>as<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_PSELP_PSELP_VDDHDIV5)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_VDDHDIV5<sp/>=<sp/>SAADC_CH_PSELP_PSELP_VDDHDIV5<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>VDDH/5<sp/>as<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_PSELP_PSELP_AnalogInput8)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN8<sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput8,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>8<sp/>(AIN8).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_PSELP_PSELP_AnalogInput9)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN9<sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput9,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>9<sp/>(AIN9).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_PSELP_PSELP_AnalogInput10)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN10<sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput10,<sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>10<sp/>(AIN10).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_PSELP_PSELP_AnalogInput11)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN11<sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput11,<sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>11<sp/>(AIN11).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_PSELP_PSELP_AnalogInput12)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN12<sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput12,<sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>12<sp/>(AIN12).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_PSELP_PSELP_AnalogInput13)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_INPUT_AIN13<sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_PSELP_PSELP_AnalogInput13,<sp/></highlight><highlight class="comment">///&lt;<sp/>Analog<sp/>input<sp/>13<sp/>(AIN13).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">}<sp/><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="187"><highlight class="comment">/**<sp/>@brief<sp/>Analog-to-digital<sp/>converter<sp/>oversampling<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a07bd46d3a4b42947b73e5ffbf77de0bf" kindref="member">NRF_SAADC_OVERSAMPLE_DISABLED</ref><sp/>=<sp/>SAADC_OVERSAMPLE_OVERSAMPLE_Bypass,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>No<sp/>oversampling.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39ac33692f15f098ea8ef6777c353009a17" kindref="member">NRF_SAADC_OVERSAMPLE_2X</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_OVERSAMPLE_OVERSAMPLE_Over2x,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Oversample<sp/>2x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39afa0ae6d243f9da65d42e382e10574647" kindref="member">NRF_SAADC_OVERSAMPLE_4X</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_OVERSAMPLE_OVERSAMPLE_Over4x,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Oversample<sp/>4x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a678abd8d9f3856e95979fa9cd60d02ea" kindref="member">NRF_SAADC_OVERSAMPLE_8X</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_OVERSAMPLE_OVERSAMPLE_Over8x,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Oversample<sp/>8x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a108b3c93033a3f08715e9127c76e9eac" kindref="member">NRF_SAADC_OVERSAMPLE_16X</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_OVERSAMPLE_OVERSAMPLE_Over16x,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Oversample<sp/>16x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a2e0670954aafc7b52b37e16737db12a6" kindref="member">NRF_SAADC_OVERSAMPLE_32X</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_OVERSAMPLE_OVERSAMPLE_Over32x,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Oversample<sp/>32x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39ab51b06d2c5bcd8a85c81aac8e5979323" kindref="member">NRF_SAADC_OVERSAMPLE_64X</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_OVERSAMPLE_OVERSAMPLE_Over64x,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Oversample<sp/>64x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39a301c27ff073e372fb03397683b29222f" kindref="member">NRF_SAADC_OVERSAMPLE_128X</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_OVERSAMPLE_OVERSAMPLE_Over128x,<sp/></highlight><highlight class="comment">///&lt;<sp/>Oversample<sp/>128x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga62ca4cd30bcc0c4a306135c957f7ed39ace10f1369e776f3b86de8b69cff6065c" kindref="member">NRF_SAADC_OVERSAMPLE_256X</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_OVERSAMPLE_OVERSAMPLE_Over256x<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Oversample<sp/>256x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal">}<sp/><ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_CH_CONFIG_RES</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="202"><highlight class="comment">/**<sp/>@brief<sp/>Analog-to-digital<sp/>converter<sp/>channel<sp/>resistor<sp/>control.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga1ac6795cf7f0c7c87df12a6c87fb4303ac941d50e00494def50bfb5c2ab32c84d" kindref="member">NRF_SAADC_RESISTOR_DISABLED</ref><sp/>=<sp/>SAADC_CH_CONFIG_RESP_Bypass,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Bypass<sp/>resistor<sp/>ladder.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga1ac6795cf7f0c7c87df12a6c87fb4303abfe4b85be11a4f7da453017634a808c0" kindref="member">NRF_SAADC_RESISTOR_PULLDOWN</ref><sp/>=<sp/>SAADC_CH_CONFIG_RESP_Pulldown,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pull-down<sp/>to<sp/>GND.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga1ac6795cf7f0c7c87df12a6c87fb4303a5f5486c3fa0bd560b4d3cf0eead03328" kindref="member">NRF_SAADC_RESISTOR_PULLUP</ref><sp/><sp/><sp/>=<sp/>SAADC_CH_CONFIG_RESP_Pullup,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pull-up<sp/>to<sp/>VDD.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_RESP_VDD1_2)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga1ac6795cf7f0c7c87df12a6c87fb4303a459416062bf0c090f5558d033103bb54" kindref="member">NRF_SAADC_RESISTOR_VDD1_2</ref><sp/><sp/><sp/>=<sp/>SAADC_CH_CONFIG_RESP_VDD1_2,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>input<sp/>at<sp/>VDD/2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_RESP_VDDAO1V8div2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga1ac6795cf7f0c7c87df12a6c87fb4303a459416062bf0c090f5558d033103bb54" kindref="member">NRF_SAADC_RESISTOR_VDD1_2</ref><sp/><sp/><sp/>=<sp/>SAADC_CH_CONFIG_RESP_VDDAO1V8div2,<sp/></highlight><highlight class="comment">///&lt;<sp/>Set<sp/>input<sp/>at<sp/>VDD/2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal">}<sp/><ref refid="group__nrf__saadc__hal_1ga1ac6795cf7f0c7c87df12a6c87fb4303" kindref="member">nrf_saadc_resistor_t</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="217"><highlight class="comment">/**<sp/>@brief<sp/>Gain<sp/>factor<sp/>of<sp/>the<sp/>analog-to-digital<sp/>converter<sp/>input.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_GAIN_Gain1_6)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a51b7e2b28fe46a742870328ad6d48cc2" kindref="member">NRF_SAADC_GAIN1_6</ref><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain1_6,<sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>1/6.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_GAIN_Gain1_5)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a6b6ea2d94564978e0a04ec27eb36dcaf" kindref="member">NRF_SAADC_GAIN1_5</ref><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain1_5,<sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>1/5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_GAIN_Gain1_4)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a8bdf3696726cc885b69a8edd16842340" kindref="member">NRF_SAADC_GAIN1_4</ref><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain1_4,<sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>1/4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(SAADC_CH_CONFIG_GAIN_Gain2_8)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a8bdf3696726cc885b69a8edd16842340" kindref="member">NRF_SAADC_GAIN1_4</ref><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain2_8,<sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>1/4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_GAIN_Gain2_7)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0ac03a3022d2b16e4e148e0e3f4c2a9030" kindref="member">NRF_SAADC_GAIN2_7</ref><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain2_7,<sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>2/7.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_GAIN_Gain1_3)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0af07ee87058d9573360b9886f0d197b23" kindref="member">NRF_SAADC_GAIN1_3</ref><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain1_3,<sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>1/3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(SAADC_CH_CONFIG_GAIN_Gain2_6)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0af07ee87058d9573360b9886f0d197b23" kindref="member">NRF_SAADC_GAIN1_3</ref><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain2_6,<sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>1/3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_GAIN_Gain2_5)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0ae199bbb85013b0d8d22cf70a3dc48c1e" kindref="member">NRF_SAADC_GAIN2_5</ref><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain2_5,<sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>2/5.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_GAIN_Gain1_2)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a1aafa7a93cf70c82f808db67c74f6e61" kindref="member">NRF_SAADC_GAIN1_2</ref><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain1_2,<sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>1/2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(SAADC_CH_CONFIG_GAIN_Gain2_4)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a1aafa7a93cf70c82f808db67c74f6e61" kindref="member">NRF_SAADC_GAIN1_2</ref><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain2_4,<sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>1/2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_GAIN_Gain2_3)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0ad2f1c75838cec0ee85719b7f756bff75" kindref="member">NRF_SAADC_GAIN2_3</ref><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain2_3,<sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>2/3.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0a49a79897cf1a7f924965c566a41880e7" kindref="member">NRF_SAADC_GAIN1</ref><sp/><sp/><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain1,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0aaf44b0f743dd2eb51ef662fc82b9c09d" kindref="member">NRF_SAADC_GAIN2</ref><sp/><sp/><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain2,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_GAIN_Gain4)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggadda2525fbe5db392d1c1980c4a1286a0ab24781a885803059e306560ac6ef4de3" kindref="member">NRF_SAADC_GAIN4</ref><sp/><sp/><sp/>=<sp/>SAADC_CH_CONFIG_GAIN_Gain4,<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>factor<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal">}<sp/><ref refid="group__nrf__saadc__hal_1gadda2525fbe5db392d1c1980c4a1286a0" kindref="member">nrf_saadc_gain_t</ref>;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="257"><highlight class="comment">/**<sp/>@brief<sp/>Reference<sp/>selection<sp/>for<sp/>the<sp/>analog-to-digital<sp/>converter.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_REFSEL_Internal)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggad540c22a2e06a7828a5ce6c71bc8a5d4a45e4751bab9abc4fb0e8cf281f2010fc" kindref="member">NRF_SAADC_REFERENCE_INTERNAL</ref><sp/>=<sp/>SAADC_CH_CONFIG_REFSEL_Internal,<sp/></highlight><highlight class="comment">///&lt;<sp/>Internal<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_REFSEL_VDD1_4)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggad540c22a2e06a7828a5ce6c71bc8a5d4aac8f8c9c960da2c5edba27c84b776d45" kindref="member">NRF_SAADC_REFERENCE_VDD4</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_CH_CONFIG_REFSEL_VDD1_4<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>VDD/4<sp/>as<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SAADC_CH_CONFIG_REFSEL_External)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>NRF_SAADC_REFERENCE_EXTERNAL<sp/>=<sp/>SAADC_CH_CONFIG_REFSEL_External,<sp/></highlight><highlight class="comment">///&lt;<sp/>External<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal">}<sp/><ref refid="group__nrf__saadc__hal_1gad540c22a2e06a7828a5ce6c71bc8a5d4" kindref="member">nrf_saadc_reference_t</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_ACQTIME_ENUM</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="272"><highlight class="comment">/**<sp/>@brief<sp/>Analog-to-digital<sp/>converter<sp/>acquisition<sp/>time.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a91b53f4264eafab02d15d6885db5acbd" kindref="member">NRF_SAADC_ACQTIME_3US</ref><sp/><sp/>=<sp/>SAADC_CH_CONFIG_TACQ_3us,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>3<sp/>us.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a440d0922fa9ede3513dff2c0132e6abf" kindref="member">NRF_SAADC_ACQTIME_5US</ref><sp/><sp/>=<sp/>SAADC_CH_CONFIG_TACQ_5us,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>5<sp/>us.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a7452b8e0b08b260e95c8cdcc949a0eed" kindref="member">NRF_SAADC_ACQTIME_10US</ref><sp/>=<sp/>SAADC_CH_CONFIG_TACQ_10us,<sp/></highlight><highlight class="comment">///&lt;<sp/>10<sp/>us.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a32eb0eead4bd3bff1add85aedbfb34c6" kindref="member">NRF_SAADC_ACQTIME_15US</ref><sp/>=<sp/>SAADC_CH_CONFIG_TACQ_15us,<sp/></highlight><highlight class="comment">///&lt;<sp/>15<sp/>us.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742abd6f18b68b384ee5cf466f2ddade6e49" kindref="member">NRF_SAADC_ACQTIME_20US</ref><sp/>=<sp/>SAADC_CH_CONFIG_TACQ_20us,<sp/></highlight><highlight class="comment">///&lt;<sp/>20<sp/>us.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga125831a7eb192939bd96d99ab1e7a742a0dfc455375a35f2747539aeadb9d77cd" kindref="member">NRF_SAADC_ACQTIME_40US</ref><sp/>=<sp/>SAADC_CH_CONFIG_TACQ_40us<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>40<sp/>us.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">}<sp/><ref refid="group__nrf__saadc__hal_1ga125831a7eb192939bd96d99ab1e7a742" kindref="member">nrf_saadc_acqtime_t</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="group__nrf__saadc__hal_1ga125831a7eb192939bd96d99ab1e7a742" kindref="member">nrf_saadc_acqtime_t</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="286"><highlight class="comment">/**<sp/>@brief<sp/>Analog-to-digital<sp/>converter<sp/>channel<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga4436d07f1135db83c486397781e718c2ad0ce3a0327c0393e981db20d43c709f8" kindref="member">NRF_SAADC_MODE_SINGLE_ENDED</ref><sp/>=<sp/>SAADC_CH_CONFIG_MODE_SE,<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Single-ended<sp/>mode.<sp/>PSELN<sp/>will<sp/>be<sp/>ignored,<sp/>negative<sp/>input<sp/>to<sp/>ADC<sp/>shorted<sp/>to<sp/>GND.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga4436d07f1135db83c486397781e718c2a4c57cd1fc309cd665870b257f4c50767" kindref="member">NRF_SAADC_MODE_DIFFERENTIAL</ref><sp/>=<sp/>SAADC_CH_CONFIG_MODE_Diff<sp/></highlight><highlight class="comment">///&lt;<sp/>Differential<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">}<sp/><ref refid="group__nrf__saadc__hal_1ga4436d07f1135db83c486397781e718c2" kindref="member">nrf_saadc_mode_t</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="293"><highlight class="comment">/**<sp/>@brief<sp/>Analog-to-digital<sp/>converter<sp/>channel<sp/>burst<sp/>mode.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga46239c9f1d0af686aa09373d68c9a61aa605705545f3c481ada5c0c068c26dd28" kindref="member">NRF_SAADC_BURST_DISABLED</ref><sp/>=<sp/>SAADC_CH_CONFIG_BURST_Disabled,<sp/></highlight><highlight class="comment">///&lt;<sp/>Burst<sp/>mode<sp/>is<sp/>disabled<sp/>(normal<sp/>operation).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga46239c9f1d0af686aa09373d68c9a61aa67d75ecddee833d170c2b924ad8b1ef2" kindref="member">NRF_SAADC_BURST_ENABLED</ref><sp/><sp/>=<sp/>SAADC_CH_CONFIG_BURST_Enabled<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Burst<sp/>mode<sp/>is<sp/>enabled.<sp/>SAADC<sp/>takes<sp/>2^OVERSAMPLE<sp/>number<sp/>of<sp/>samples<sp/>as<sp/>fast<sp/>as<sp/>it<sp/>can,<sp/>and<sp/>sends<sp/>the<sp/>average<sp/>to<sp/>Data<sp/>RAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal">}<sp/><ref refid="group__nrf__saadc__hal_1ga46239c9f1d0af686aa09373d68c9a61a" kindref="member">nrf_saadc_burst_t</ref>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="300"><highlight class="comment">/**<sp/>@brief<sp/>Analog-to-digital<sp/>converter<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggacde3c3040c12e04f9edc2bc92c1b2276a7900b2c3694c7cc4da64f5de28da8b9b" kindref="member">NRF_SAADC_TASK_START</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>TASKS_START),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Start<sp/>the<sp/>ADC<sp/>and<sp/>prepare<sp/>the<sp/>result<sp/>buffer<sp/>in<sp/>RAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggacde3c3040c12e04f9edc2bc92c1b2276a268763796f741cda6eea1a51f348b204" kindref="member">NRF_SAADC_TASK_STOP</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>TASKS_STOP),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Stop<sp/>the<sp/>ADC<sp/>and<sp/>terminate<sp/>any<sp/>ongoing<sp/>conversion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggacde3c3040c12e04f9edc2bc92c1b2276a53f835ed3f4b6e9ff24d1550ead3c941" kindref="member">NRF_SAADC_TASK_SAMPLE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>TASKS_SAMPLE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Take<sp/>one<sp/>ADC<sp/>sample.<sp/>If<sp/>scan<sp/>is<sp/>enabled,<sp/>all<sp/>channels<sp/>are<sp/>sampled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggacde3c3040c12e04f9edc2bc92c1b2276a541cf2b16d6bd1ca797afcb691e47603" kindref="member">NRF_SAADC_TASK_CALIBRATEOFFSET</ref><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>TASKS_CALIBRATEOFFSET),<sp/></highlight><highlight class="comment">///&lt;<sp/>Starts<sp/>offset<sp/>auto-calibration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">}<sp/><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="309"><highlight class="comment">/**<sp/>@brief<sp/>Analog-to-digital<sp/>converter<sp/>events.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a8802cfd4ef157b181acf414cff6ff409" kindref="member">NRF_SAADC_EVENT_STARTED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_STARTED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>The<sp/>ADC<sp/>has<sp/>started.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_DMA_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a3caea189d3feb4fb51f3eeeaa31a7d51" kindref="member">NRF_SAADC_EVENT_END</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_DMA.END),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>The<sp/>ADC<sp/>has<sp/>filled<sp/>up<sp/>the<sp/>result<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a3caea189d3feb4fb51f3eeeaa31a7d51" kindref="member">NRF_SAADC_EVENT_END</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_END),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>The<sp/>ADC<sp/>has<sp/>filled<sp/>up<sp/>the<sp/>result<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a38a3b65b88b278c566528173ee6f3403" kindref="member">NRF_SAADC_EVENT_DONE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_DONE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>A<sp/>conversion<sp/>task<sp/>has<sp/>been<sp/>completed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1af1aea0c0901456d0e677ed29e33e918a" kindref="member">NRF_SAADC_EVENT_RESULTDONE</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_RESULTDONE),<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>A<sp/>result<sp/>is<sp/>ready<sp/>to<sp/>get<sp/>transferred<sp/>to<sp/>RAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1abc9496dabfb62fe70c1ab872400bf75b" kindref="member">NRF_SAADC_EVENT_CALIBRATEDONE</ref><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CALIBRATEDONE),<sp/></highlight><highlight class="comment">///&lt;<sp/>Calibration<sp/>is<sp/>complete.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ab74a57373475fe680c97c82ac7b73938" kindref="member">NRF_SAADC_EVENT_STOPPED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_STOPPED),<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>The<sp/>ADC<sp/>has<sp/>stopped.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1adb37680e1256ecb958a572fa385ee739" kindref="member">NRF_SAADC_EVENT_CH0_LIMITH</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[0].LIMITH),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>above<sp/>CH[0].LIMIT.HIGH.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1afeeb02e7df74fb429bf2f01cc45b7f82" kindref="member">NRF_SAADC_EVENT_CH0_LIMITL</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[0].LIMITL),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>below<sp/>CH[0].LIMIT.LOW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ac39d01a0de5b6705b86bff7f7210e2a9" kindref="member">NRF_SAADC_EVENT_CH1_LIMITH</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[1].LIMITH),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>above<sp/>CH[1].LIMIT.HIGH.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ad247142de8549552b7a7446ed604e4af" kindref="member">NRF_SAADC_EVENT_CH1_LIMITL</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[1].LIMITL),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>below<sp/>CH[1].LIMIT.LOW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1afc3c9fe35a2721ed3618df52b62e6f1f" kindref="member">NRF_SAADC_EVENT_CH2_LIMITH</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[2].LIMITH),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>above<sp/>CH[2].LIMIT.HIGH.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1aef66a24727e5dc12d2dcbd3b8a00583f" kindref="member">NRF_SAADC_EVENT_CH2_LIMITL</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[2].LIMITL),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>below<sp/>CH[2].LIMIT.LOW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a148cbb2a196f1656413179089b63d6ab" kindref="member">NRF_SAADC_EVENT_CH3_LIMITH</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[3].LIMITH),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>above<sp/>CH[3].LIMIT.HIGH.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ada7b054199e1fa667ddee5bffd790213" kindref="member">NRF_SAADC_EVENT_CH3_LIMITL</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[3].LIMITL),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>below<sp/>CH[3].LIMIT.LOW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a9179d81d5f56dbcb487b45fbb23a6c20" kindref="member">NRF_SAADC_EVENT_CH4_LIMITH</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[4].LIMITH),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>above<sp/>CH[4].LIMIT.HIGH.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a19d836edc59abc15f62cd0630ea58cc8" kindref="member">NRF_SAADC_EVENT_CH4_LIMITL</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[4].LIMITL),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>below<sp/>CH[4].LIMIT.LOW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1ae14d0343df57c333a35458ab1cb08a1f" kindref="member">NRF_SAADC_EVENT_CH5_LIMITH</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[5].LIMITH),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>above<sp/>CH[5].LIMIT.HIGH.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a0ffc3add15b391667be38015a5f8418e" kindref="member">NRF_SAADC_EVENT_CH5_LIMITL</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[5].LIMITL),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>below<sp/>CH[5].LIMIT.LOW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a814747e44cb3ce2dad5bef354eef155e" kindref="member">NRF_SAADC_EVENT_CH6_LIMITH</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[6].LIMITH),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>above<sp/>CH[6].LIMIT.HIGH.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a82ef01bcaf54abc8bb1a2f2932651ae4" kindref="member">NRF_SAADC_EVENT_CH6_LIMITL</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[6].LIMITL),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>below<sp/>CH[6].LIMIT.LOW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a2b4acf6c8a8f5ac233849c3e4a260529" kindref="member">NRF_SAADC_EVENT_CH7_LIMITH</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[7].LIMITH),<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>above<sp/>CH[7].LIMIT.HIGH.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga54a401b89bf604a64fce520429bbbdd1a0d0e19a21605e1a5f560bbb9d94fbe3f" kindref="member">NRF_SAADC_EVENT_CH7_LIMITL</ref><sp/><sp/><sp/><sp/>=<sp/>offsetof(NRF_SAADC_Type,<sp/>EVENTS_CH[7].LIMITL)<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Last<sp/>result<sp/>is<sp/>equal<sp/>or<sp/>below<sp/>CH[7].LIMIT.LOW.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal">}<sp/><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="340"><highlight class="comment">/**<sp/>@brief<sp/>Analog-to-digital<sp/>converter<sp/>interrupt<sp/>masks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7aa045e1687b7eaf51827129bccfae99ae" kindref="member">NRF_SAADC_INT_STARTED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_STARTED_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_STARTED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_DMA_EVENTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a1dfee95542a3a3499cbb5875eb33808d" kindref="member">NRF_SAADC_INT_END</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_DMAEND_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_END<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a1dfee95542a3a3499cbb5875eb33808d" kindref="member">NRF_SAADC_INT_END</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_END_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_END<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a1ce20cb57f783d5feae941dec4348920" kindref="member">NRF_SAADC_INT_DONE</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_DONE_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_DONE<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a0b08e2221943faac470b466d3c59745b" kindref="member">NRF_SAADC_INT_RESULTDONE</ref><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_RESULTDONE_Msk,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_RESULTDONE<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a3d488af5afe59a781c026af9ebea6f0d" kindref="member">NRF_SAADC_INT_CALIBRATEDONE</ref><sp/>=<sp/>SAADC_INTENSET_CALIBRATEDONE_Msk,<sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CALIBRATEDONE<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a8bd1e8a4f530a9ecbfdaf9b6dd5dd805" kindref="member">NRF_SAADC_INT_STOPPED</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_STOPPED_Msk,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_STOPPED<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a807ef5f8b39d6d5d05353d817d2b7fd3" kindref="member">NRF_SAADC_INT_CH0LIMITH</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH0LIMITH_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[0].LIMITH<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a2ee8aba4ca294b8d94266252268193db" kindref="member">NRF_SAADC_INT_CH0LIMITL</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH0LIMITL_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[0].LIMITL<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a08e9613aa09aa07c0c18fb57e65208e2" kindref="member">NRF_SAADC_INT_CH1LIMITH</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH1LIMITH_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[1].LIMITH<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7ae4cee39513094642ccc5490e58adee8e" kindref="member">NRF_SAADC_INT_CH1LIMITL</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH1LIMITL_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[1].LIMITL<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a54a04edc15cc38bc4a657657ea4ae34c" kindref="member">NRF_SAADC_INT_CH2LIMITH</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH2LIMITH_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[2].LIMITH<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a360826a886f90b76b79b23409fc620f2" kindref="member">NRF_SAADC_INT_CH2LIMITL</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH2LIMITL_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[2].LIMITL<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7abedd76d10671c7c1c133533d85d380d8" kindref="member">NRF_SAADC_INT_CH3LIMITH</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH3LIMITH_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[3].LIMITH<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7af42b94420fb86b061df28a9b96b2965f" kindref="member">NRF_SAADC_INT_CH3LIMITL</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH3LIMITL_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[3].LIMITL<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a5a21ec6f00929f84fdb9ce142bee81be" kindref="member">NRF_SAADC_INT_CH4LIMITH</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH4LIMITH_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[4].LIMITH<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a53150d22c5c0fb63137bd9661a5c0cb1" kindref="member">NRF_SAADC_INT_CH4LIMITL</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH4LIMITL_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[4].LIMITL<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7af470bd28c2f8969dc5f48929d9ab118e" kindref="member">NRF_SAADC_INT_CH5LIMITH</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH5LIMITH_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[5].LIMITH<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7ae5e6d12e0184a74139ff8f22a143ab7b" kindref="member">NRF_SAADC_INT_CH5LIMITL</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH5LIMITL_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[5].LIMITL<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a9f7bfd9b5c7129332bfd67ac87b8d27d" kindref="member">NRF_SAADC_INT_CH6LIMITH</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH6LIMITH_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[6].LIMITH<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7af3ad11a95f62e6ca0095217f952319c6" kindref="member">NRF_SAADC_INT_CH6LIMITL</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH6LIMITL_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[6].LIMITL<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a5f90ab95293f53a04c1c1fad010af3c6" kindref="member">NRF_SAADC_INT_CH7LIMITH</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH7LIMITH_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[7].LIMITH<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7ac55d76dc332dc0301d5bb5110033f7c7" kindref="member">NRF_SAADC_INT_CH7LIMITL</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>SAADC_INTENSET_CH7LIMITL_Msk,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Interrupt<sp/>on<sp/>EVENTS_CH[7].LIMITL<sp/>event.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7ae3e630effb1b905a3d661461cc86c4b5" kindref="member">NRF_SAADC_INT_ALL</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x7FFFFFFFUL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Mask<sp/>of<sp/>all<sp/>interrupts.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal">}<sp/><ref refid="group__nrf__saadc__hal_1ga82c6d9ccbed7aa753b044ae4216a52e7" kindref="member">nrf_saadc_int_mask_t</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="372"><highlight class="comment">/**<sp/>@brief<sp/>Analog-to-digital<sp/>converter<sp/>value<sp/>limit<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggad3a1aa4df4fa236684487f209f438a3da668f96bfc2e19db0c72fd6c7ebc2a4f6" kindref="member">NRF_SAADC_LIMIT_LOW</ref><sp/><sp/>=<sp/>0,<sp/></highlight><highlight class="comment">///&lt;<sp/>Low<sp/>limit<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ggad3a1aa4df4fa236684487f209f438a3da80f852093bfb4fd581b30f154322cc49" kindref="member">NRF_SAADC_LIMIT_HIGH</ref><sp/>=<sp/>1<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>High<sp/>limit<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">}<sp/><ref refid="group__nrf__saadc__hal_1gad3a1aa4df4fa236684487f209f438a3d" kindref="member">nrf_saadc_limit_t</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRFX_API_VER_AT_LEAST(3,<sp/>2,<sp/>0)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="380"><highlight class="comment">/**<sp/>@brief<sp/>Type<sp/>of<sp/>a<sp/>single<sp/>ADC<sp/>conversion<sp/>result.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="386"><highlight class="comment">/**<sp/>@brief<sp/>Analog-to-digital<sp/>converter<sp/>configuration<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387" refid="structnrf__saadc__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref><sp/>resolution;<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Resolution<sp/>of<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref><sp/>oversample;<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Oversampling<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref><sp/>*<sp/><sp/><sp/><sp/>buffer;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Pointer<sp/>to<sp/>sample<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer_size;<sp/></highlight><highlight class="comment">///&lt;<sp/>Size<sp/>of<sp/>the<sp/>sample<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal">}<sp/><ref refid="structnrf__saadc__config__t" kindref="compound">nrf_saadc_config_t</ref>;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="395"><highlight class="comment">/**<sp/>@brief<sp/>Analog-to-digital<sp/>converter<sp/>channel<sp/>configuration<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="structnrf__saadc__channel__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_CH_CONFIG_RES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga1ac6795cf7f0c7c87df12a6c87fb4303" kindref="member">nrf_saadc_resistor_t</ref><sp/><sp/>resistor_p;<sp/></highlight><highlight class="comment">///&lt;<sp/>Resistor<sp/>value<sp/>on<sp/>positive<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga1ac6795cf7f0c7c87df12a6c87fb4303" kindref="member">nrf_saadc_resistor_t</ref><sp/><sp/>resistor_n;<sp/></highlight><highlight class="comment">///&lt;<sp/>Resistor<sp/>value<sp/>on<sp/>negative<sp/>input.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gadda2525fbe5db392d1c1980c4a1286a0" kindref="member">nrf_saadc_gain_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>gain;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Gain<sp/>control<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gad540c22a2e06a7828a5ce6c71bc8a5d4" kindref="member">nrf_saadc_reference_t</ref><sp/>reference;<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Reference<sp/>control<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga125831a7eb192939bd96d99ab1e7a742" kindref="member">nrf_saadc_acqtime_t</ref><sp/><sp/><sp/>acq_time;<sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Acquisition<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga4436d07f1135db83c486397781e718c2" kindref="member">nrf_saadc_mode_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>mode;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>SAADC<sp/>mode.<sp/>Single-ended<sp/>or<sp/>differential.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga46239c9f1d0af686aa09373d68c9a61a" kindref="member">nrf_saadc_burst_t</ref><sp/><sp/><sp/><sp/><sp/>burst;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Burst<sp/>mode<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_CONVTIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conv_time;<sp/><sp/></highlight><highlight class="comment">///&lt;<sp/>Conversion<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">}<sp/><ref refid="structnrf__saadc__channel__config__t" kindref="compound">nrf_saadc_channel_config_t</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="413"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="414"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>triggering<sp/>the<sp/>specified<sp/>SAADC<sp/>task.</highlight></codeline>
<codeline lineno="415"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="416"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="417"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>SAADC<sp/>task.</highlight></codeline>
<codeline lineno="418"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gafaffd78a579b5fb3aa119c140d4271d3" kindref="member">nrf_saadc_task_trigger</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="422"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>SAADC<sp/>task<sp/>register.</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>SAADC<sp/>task.</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>SAADC<sp/>task.</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__saadc__hal_1ga2d7ab93e620dd1357e61015e67c38419" kindref="member">nrf_saadc_task_address_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="433"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>retrieving<sp/>the<sp/>state<sp/>of<sp/>the<sp/>SAADC<sp/>event.</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="436"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="439"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>event<sp/>has<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="440"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>event<sp/>has<sp/>not<sp/>been<sp/>generated.</highlight></codeline>
<codeline lineno="441"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga302a420e63a91a87aa5a81e3f5aebada" kindref="member">nrf_saadc_event_check</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="445"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>specific<sp/>SAADC<sp/>event.</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>SAADC<sp/>event.</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gafd8a1fe786b649956ebbcc6a905a7054" kindref="member">nrf_saadc_event_clear</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="454"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>address<sp/>of<sp/>the<sp/>specified<sp/>SAADC<sp/>event<sp/>register.</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>SAADC<sp/>event.</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*<sp/>@return<sp/>Address<sp/>of<sp/>the<sp/>specified<sp/>SAADC<sp/>event.</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__saadc__hal_1gadeade61bf67c5bdeea1af3a3cfbfa886" kindref="member">nrf_saadc_event_address_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="466"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SAADC<sp/>task.</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/><sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>subscribe<sp/>events.</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gaa129d5679cafb3c0d2a0b561c3f59f90" kindref="member">nrf_saadc_subscribe_set</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="478"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="479"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>subscribe<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="480"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SAADC<sp/>task.</highlight></codeline>
<codeline lineno="481"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>task<sp/><sp/>Task<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga73ca056baa1bcd338b41180933724cbd" kindref="member">nrf_saadc_subscribe_clear</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref><sp/>task);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="488"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SAADC<sp/>event.</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/><sp/><sp/>Event<sp/>for<sp/>which<sp/>to<sp/>set<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>through<sp/>which<sp/>to<sp/>publish<sp/>the<sp/>event.</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga9cc7ba9f6ead07f9a11c97a34ba813c7" kindref="member">nrf_saadc_publish_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="500"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>clearing<sp/>the<sp/>publish<sp/>configuration<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SAADC<sp/>event.</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="504"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="505"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>event<sp/>Event<sp/>for<sp/>which<sp/>to<sp/>clear<sp/>the<sp/>configuration.</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gad675daf087af3c40989b5a75eb163d42" kindref="member">nrf_saadc_publish_clear</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref><sp/>event);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)<sp/>||<sp/>defined(__NRFX_DOXYGEN__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="511"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="512"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>SAADC<sp/>channel<sp/>monitoring<sp/>limit<sp/>events.</highlight></codeline>
<codeline lineno="513"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="514"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/><sp/><sp/><sp/>Channel<sp/>number.</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>limit_type<sp/>Low<sp/>limit<sp/>or<sp/>high<sp/>limit.</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*<sp/>@return<sp/>The<sp/>SAADC<sp/>channel<sp/>monitoring<sp/>limit<sp/>event.</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref><sp/><ref refid="group__nrf__saadc__hal_1ga55a1e59db07bbcee1c6a0ae2f6c9bea1" kindref="member">nrf_saadc_limit_event_get</ref>(uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gad3a1aa4df4fa236684487f209f438a3d" kindref="member">nrf_saadc_limit_t</ref><sp/>limit_type);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="522"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>input<sp/>pins<sp/>for<sp/>the<sp/>specified<sp/>SAADC<sp/>channel.</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>number.</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>pselp<sp/><sp/><sp/>Positive<sp/>input.</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>pseln<sp/><sp/><sp/>Negative<sp/>input.<sp/>Set<sp/>to<sp/>@ref<sp/>NRF_SAADC_INPUT_DISABLED<sp/>in<sp/>single<sp/>ended<sp/>mode.</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga4aabfc8ebe63a4e31e55188ec4fc4d9c" kindref="member">nrf_saadc_channel_input_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref><sp/>pselp,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref><sp/>pseln);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="535"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>positive<sp/>input<sp/>pin<sp/>for<sp/>the<sp/>specified<sp/>SAADC<sp/>channel.</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>number.</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>pselp<sp/><sp/><sp/>Positive<sp/>input.</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga727fff4c406e29364c28ad51f4422108" kindref="member">nrf_saadc_channel_pos_input_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref><sp/>pselp);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="546"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>SAADC<sp/>channel<sp/>monitoring<sp/>limits.</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>number.</highlight></codeline>
<codeline lineno="551"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>low<sp/><sp/><sp/><sp/><sp/>Low<sp/>limit.</highlight></codeline>
<codeline lineno="552"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>high<sp/><sp/><sp/><sp/>High<sp/>limit.</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga4c26cdf7597a21a26f0656dcd0211fd1" kindref="member">nrf_saadc_channel_limits_set</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low,</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>high);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="559"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="560"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>configuration<sp/>of<sp/>SAADC<sp/>interrupts.</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Interrupts<sp/>configuration<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_saadc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="565"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gaabd7bf41a8bcbcd011e0b4b0625ad8b2" kindref="member">nrf_saadc_int_set</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="568"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>specified<sp/>SAADC<sp/>interrupts.</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="572"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>enabled.</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_saadc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gaa8487e94e0de1dd9fc3cb9eda33a896d" kindref="member">nrf_saadc_int_enable</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="577"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="578"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>specified<sp/>interrupts<sp/>are<sp/>enabled.</highlight></codeline>
<codeline lineno="579"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="580"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="581"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>checked.</highlight></codeline>
<codeline lineno="582"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_saadc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="583"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="584"><highlight class="comment"><sp/>*<sp/>@return<sp/>Mask<sp/>of<sp/>enabled<sp/>interrupts.</highlight></codeline>
<codeline lineno="585"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__saadc__hal_1ga3a9a24e83f68aa22fad03a04648bad51" kindref="member">nrf_saadc_int_enable_check</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="588"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="589"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>specified<sp/>interrupts.</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>mask<sp/><sp/>Mask<sp/>of<sp/>interrupts<sp/>to<sp/>be<sp/>disabled.</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Use<sp/>@ref<sp/>nrf_saadc_int_mask_t<sp/>values<sp/>for<sp/>bit<sp/>masking.</highlight></codeline>
<codeline lineno="594"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gaae53ced5f63daece6fcb751ac7ed6918" kindref="member">nrf_saadc_int_disable</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="597"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>generating<sp/>masks<sp/>for<sp/>SAADC<sp/>channel<sp/>limit<sp/>interrupts.</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/><sp/><sp/><sp/>SAADC<sp/>channel<sp/>number.</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>limit_type<sp/>Limit<sp/>type.</highlight></codeline>
<codeline lineno="602"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/>*<sp/>@return<sp/>Interrupt<sp/>mask.</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__saadc__hal_1gab80147c8bd32b89c716f66e0f44664b2" kindref="member">nrf_saadc_limit_int_get</ref>(uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gad3a1aa4df4fa236684487f209f438a3d" kindref="member">nrf_saadc_limit_t</ref><sp/>limit_type);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="608"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>whether<sp/>the<sp/>SAADC<sp/>is<sp/>busy.</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="611"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>checks<sp/>whether<sp/>the<sp/>analog-to-digital<sp/>converter<sp/>is<sp/>busy<sp/>with<sp/>a<sp/>conversion.</highlight></codeline>
<codeline lineno="612"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="613"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="614"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="615"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>SAADC<sp/>is<sp/>busy.</highlight></codeline>
<codeline lineno="616"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>SAADC<sp/>is<sp/>not<sp/>busy.</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gab25084e697b176775ed9ebf6b8b9a3fd" kindref="member">nrf_saadc_busy_check</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="620"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="621"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>SAADC.</highlight></codeline>
<codeline lineno="622"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/>*<sp/>The<sp/>analog-to-digital<sp/>converter<sp/>must<sp/>be<sp/>enabled<sp/>before<sp/>use.</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="626"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga5fd952bc71c0d7bfc1227570b8e74f6e" kindref="member">nrf_saadc_enable</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="629"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>SAADC.</highlight></codeline>
<codeline lineno="631"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="632"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga44b8bee69dcb4efea99b2996eecf7956" kindref="member">nrf_saadc_disable</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="636"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="637"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>SAADC<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="638"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="640"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="641"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>SAADC<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="642"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>SAADC<sp/>is<sp/>not<sp/>enabled.</highlight></codeline>
<codeline lineno="643"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga37805e60b6f56abe9faed4aa1e9ce61c" kindref="member">nrf_saadc_enable_check</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="646"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="647"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>the<sp/>SAADC<sp/>result<sp/>buffer.</highlight></codeline>
<codeline lineno="648"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_buffer<sp/>Pointer<sp/>to<sp/>the<sp/>result<sp/>buffer.</highlight></codeline>
<codeline lineno="651"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>size<sp/><sp/><sp/><sp/><sp/>Size<sp/>of<sp/>the<sp/>buffer<sp/>(in<sp/>8-bit<sp/>or<sp/>16-bit<sp/>samples).</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gac1986dcb3b95d37d79d55c0263680867" kindref="member">nrf_saadc_buffer_init</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref><sp/>*<sp/>p_buffer,</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="657"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="658"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>SAADC<sp/>result<sp/>buffer<sp/>pointer.</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="660"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="661"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_buffer<sp/>Pointer<sp/>to<sp/>the<sp/>result<sp/>buffer.</highlight></codeline>
<codeline lineno="662"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga1facfe7d84b1304b2bb4dc2d14111e8a" kindref="member">nrf_saadc_buffer_pointer_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref><sp/>*<sp/>p_buffer);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="666"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>SAADC<sp/>result<sp/>buffer<sp/>pointer.</highlight></codeline>
<codeline lineno="668"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="669"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="670"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="671"><highlight class="comment"><sp/>*<sp/>@return<sp/>Pointer<sp/>to<sp/>the<sp/>result<sp/>buffer.</highlight></codeline>
<codeline lineno="672"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref><sp/>*<sp/><ref refid="group__nrf__saadc__hal_1ga2a76ad513d6670515127f3b97810667e" kindref="member">nrf_saadc_buffer_pointer_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="675"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="676"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>written<sp/>to<sp/>the<sp/>result</highlight></codeline>
<codeline lineno="677"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>since<sp/>the<sp/>previous<sp/>START<sp/>task.</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="681"><highlight class="comment"><sp/>*<sp/>@return<sp/>Number<sp/>of<sp/>8-bit<sp/>or<sp/>16-bit<sp/>samples<sp/>written<sp/>to<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="682"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__saadc__hal_1gab0c2fd3c8bd02b9ea19876ff6a856e98" kindref="member">nrf_saadc_amount_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="685"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="686"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>the<sp/>SAADC<sp/>sample<sp/>resolution.</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>resolution<sp/>Bit<sp/>resolution.</highlight></codeline>
<codeline lineno="690"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gae3a1f1453c20051e27cb75ce2616fe33" kindref="member">nrf_saadc_resolution_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref><sp/>resolution);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="694"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>SAADC<sp/>sample<sp/>resolution.</highlight></codeline>
<codeline lineno="696"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="697"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="698"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="699"><highlight class="comment"><sp/>*<sp/>@return<sp/>Sample<sp/>resolution.</highlight></codeline>
<codeline lineno="700"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref><sp/><ref refid="group__nrf__saadc__hal_1ga9c6df1f0637afe78a841e59d6c0d05da" kindref="member">nrf_saadc_resolution_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="703"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>oversampling<sp/>feature.</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/><sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>oversample<sp/>Oversampling<sp/>mode.</highlight></codeline>
<codeline lineno="708"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga73dd0c72c90270e07a4fccbb88a7e635" kindref="member">nrf_saadc_oversample_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref><sp/>oversample);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="712"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="713"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>oversampling<sp/>feature<sp/>configuration.</highlight></codeline>
<codeline lineno="714"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="715"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="716"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="717"><highlight class="comment"><sp/>*<sp/>@return<sp/>Oversampling<sp/>configuration.</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref><sp/><ref refid="group__nrf__saadc__hal_1gae2e2bd4002cb6badb4ce4c65d630d1d5" kindref="member">nrf_saadc_oversample_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="721"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="722"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>sample<sp/>count<sp/>needed<sp/>for<sp/>one<sp/>averaged<sp/>result<sp/>for<sp/>a<sp/>given</highlight></codeline>
<codeline lineno="723"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oversampling<sp/>configuration.</highlight></codeline>
<codeline lineno="724"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>oversample<sp/>Oversampling<sp/>configuration.</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/>*<sp/>@return<sp/>Sample<sp/>count.</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__saadc__hal_1ga2111f43b238ee2297026937fd63122ae" kindref="member">nrf_saadc_oversample_sample_count_get</ref>(<ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref><sp/>oversample);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="731"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="732"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>enabling<sp/>the<sp/>continuous<sp/>sampling.</highlight></codeline>
<codeline lineno="733"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>configures<sp/>the<sp/>SAADC<sp/>internal<sp/>timer<sp/>to<sp/>automatically<sp/>take<sp/>new<sp/>samples<sp/>at<sp/>a<sp/>fixed</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*<sp/>sample<sp/>rate.<sp/>Trigger<sp/>the<sp/>START<sp/>task<sp/>to<sp/>begin<sp/>continuous<sp/>sampling.<sp/>To<sp/>stop<sp/>the<sp/>sampling,<sp/>trigger</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*<sp/>the<sp/>STOP<sp/>task.</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="738"><highlight class="comment"><sp/>*<sp/>@note<sp/>The<sp/>internal<sp/>timer<sp/>can<sp/>only<sp/>be<sp/>used<sp/>when<sp/>a<sp/>single<sp/>input<sp/>channel<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>cc<sp/><sp/><sp/><sp/>Capture<sp/>and<sp/>compare<sp/>value.<sp/>Sample<sp/>rate<sp/>is<sp/>16<sp/>MHz/cc.</highlight></codeline>
<codeline lineno="742"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Valid<sp/>@c<sp/>CC<sp/>range<sp/>is<sp/>from<sp/>80<sp/>to<sp/>2047.</highlight></codeline>
<codeline lineno="743"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gafe3f681a38517ddd7a7b510ff028f630" kindref="member">nrf_saadc_continuous_mode_enable</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="747"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>checking<sp/>if<sp/>the<sp/>continuous<sp/>sampling<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="751"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="752"><highlight class="comment"><sp/>*<sp/>@retval<sp/>true<sp/><sp/>The<sp/>continuous<sp/>sampling<sp/>is<sp/>enabled.</highlight></codeline>
<codeline lineno="753"><highlight class="comment"><sp/>*<sp/>@retval<sp/>false<sp/>The<sp/>continuous<sp/>sampling<sp/>is<sp/>disabled.</highlight></codeline>
<codeline lineno="754"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gaed86f2ee2f007709d6743c431bf9a6fe" kindref="member">nrf_saadc_continuous_mode_enable_check</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="757"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>disabling<sp/>the<sp/>continuous<sp/>sampling.</highlight></codeline>
<codeline lineno="759"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="760"><highlight class="comment"><sp/>*<sp/>New<sp/>samples<sp/>can<sp/>still<sp/>be<sp/>acquired<sp/>by<sp/>manually<sp/>triggering<sp/>the<sp/>SAMPLE<sp/>task<sp/>or<sp/>by<sp/>PPI.</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="763"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga2d83cf54c0286dc51724f910a9155056" kindref="member">nrf_saadc_continuous_mode_disable</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_LIN_CAL</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="767"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="768"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>setting<sp/>linearity<sp/>calibration<sp/>coefficient.</highlight></codeline>
<codeline lineno="769"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="770"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="771"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Coefficient<sp/>number.</highlight></codeline>
<codeline lineno="772"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>coeff<sp/>Value<sp/>of<sp/>the<sp/>coefficient.</highlight></codeline>
<codeline lineno="773"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga1032292d6a90f73e484c7d6afaa2cb34" kindref="member">nrf_saadc_linearity_calibration_coeff_set</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coeff);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="778"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>linearity<sp/>calibration<sp/>coefficient.</highlight></codeline>
<codeline lineno="780"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>index<sp/>Coefficient<sp/>number.</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/>*<sp/>@return<sp/>Value<sp/>of<sp/>the<sp/>coefficient.</highlight></codeline>
<codeline lineno="785"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__saadc__hal_1gad11784fbf6f342900ce6fe4339a9ed1c" kindref="member">nrf_saadc_linearity_calibration_coeff_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="790"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>initializing<sp/>the<sp/>SAADC<sp/>channel.</highlight></codeline>
<codeline lineno="792"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="793"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="794"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>number.</highlight></codeline>
<codeline lineno="795"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>config<sp/><sp/>Pointer<sp/>to<sp/>the<sp/>channel<sp/>configuration<sp/>structure.</highlight></codeline>
<codeline lineno="796"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga941ace352581ba7295b0f3c09a3570f1" kindref="member">nrf_saadc_channel_init</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__saadc__channel__config__t" kindref="compound">nrf_saadc_channel_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>config);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="801"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="802"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>configuring<sp/>the<sp/>burst<sp/>mode<sp/>for<sp/>the<sp/>specified<sp/>channel.</highlight></codeline>
<codeline lineno="803"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>p_reg<sp/><sp/><sp/>Pointer<sp/>to<sp/>the<sp/>structure<sp/>of<sp/>registers<sp/>of<sp/>the<sp/>peripheral.</highlight></codeline>
<codeline lineno="805"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>channel<sp/>Channel<sp/>number.</highlight></codeline>
<codeline lineno="806"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>burst<sp/><sp/><sp/>Burst<sp/>mode<sp/>setting.</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga0e2c3e00c21adb8298fcf13eb618bb93" kindref="member">nrf_saadc_burst_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga46239c9f1d0af686aa09373d68c9a61a" kindref="member">nrf_saadc_burst_t</ref><sp/>burst);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="812"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="813"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>minimum<sp/>value<sp/>of<sp/>the<sp/>conversion<sp/>result.</highlight></codeline>
<codeline lineno="814"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="815"><highlight class="comment"><sp/>*<sp/>The<sp/>minimum<sp/>value<sp/>of<sp/>the<sp/>conversion<sp/>result<sp/>depends<sp/>on<sp/>the<sp/>configured<sp/>resolution.</highlight></codeline>
<codeline lineno="816"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="817"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>resolution<sp/>Bit<sp/>resolution.</highlight></codeline>
<codeline lineno="818"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="819"><highlight class="comment"><sp/>*<sp/>@return<sp/>Minimum<sp/>value<sp/>of<sp/>the<sp/>conversion<sp/>result.</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal">NRF_STATIC_INLINE<sp/>int16_t<sp/><ref refid="group__nrf__saadc__hal_1ga428c82af7d71a2d4ac62fea00d0ec66b" kindref="member">nrf_saadc_value_min_get</ref>(<ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref><sp/>resolution);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="823"><highlight class="comment">/**</highlight></codeline>
<codeline lineno="824"><highlight class="comment"><sp/>*<sp/>@brief<sp/>Function<sp/>for<sp/>getting<sp/>the<sp/>maximum<sp/>value<sp/>of<sp/>the<sp/>conversion<sp/>result.</highlight></codeline>
<codeline lineno="825"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="826"><highlight class="comment"><sp/>*<sp/>The<sp/>maximum<sp/>value<sp/>of<sp/>the<sp/>conversion<sp/>result<sp/>depends<sp/>on<sp/>the<sp/>configured<sp/>resolution.</highlight></codeline>
<codeline lineno="827"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/>*<sp/>@param[in]<sp/>resolution<sp/>Bit<sp/>resolution.</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/>*<sp/>@return<sp/>Maximum<sp/>value<sp/>of<sp/>the<sp/>conversion<sp/>result.</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal">NRF_STATIC_INLINE<sp/>int16_t<sp/><ref refid="group__nrf__saadc__hal_1gafee2b4a40ff7fdb6c5b8ade61b859878" kindref="member">nrf_saadc_value_max_get</ref>(<ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref><sp/>resolution);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gafaffd78a579b5fb3aa119c140d4271d3" kindref="member">nrf_saadc_task_trigger</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="837"><highlight class="normal">{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)task))<sp/>=<sp/>0x1UL;</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__saadc__hal_1ga2d7ab93e620dd1357e61015e67c38419" kindref="member">nrf_saadc_task_address_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task)</highlight></codeline>
<codeline lineno="843"><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>task);</highlight></codeline>
<codeline lineno="845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga302a420e63a91a87aa5a81e3f5aebada" kindref="member">nrf_saadc_event_check</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="848"><highlight class="normal">{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_event_check(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gafd8a1fe786b649956ebbcc6a905a7054" kindref="member">nrf_saadc_event_clear</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event))<sp/>=<sp/>0x0UL;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>nrf_event_readback((uint8_t<sp/>*)p_reg<sp/>+<sp/>(uint32_t)event);</highlight></codeline>
<codeline lineno="856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><sp/><ref refid="group__nrf__saadc__hal_1gadeade61bf67c5bdeea1af3a3cfbfa886" kindref="member">nrf_saadc_event_address_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>event)</highlight></codeline>
<codeline lineno="860"><highlight class="normal">{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nrf_task_event_address_get(p_reg,<sp/>event);</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gaa129d5679cafb3c0d2a0b561c3f59f90" kindref="member">nrf_saadc_subscribe_set</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref><sp/>task,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="868"><highlight class="normal">{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga73ca056baa1bcd338b41180933724cbd" kindref="member">nrf_saadc_subscribe_clear</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__saadc__hal_1gacde3c3040c12e04f9edc2bc92c1b2276" kindref="member">nrf_saadc_task_t</ref><sp/>task)</highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>task<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga9cc7ba9f6ead07f9a11c97a34ba813c7" kindref="member">nrf_saadc_publish_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref><sp/>event,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel)</highlight></codeline>
<codeline lineno="881"><highlight class="normal">{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)channel<sp/>|<sp/>NRF_SUBSCRIBE_PUBLISH_ENABLE);</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gad675daf087af3c40989b5a75eb163d42" kindref="member">nrf_saadc_publish_clear</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,<sp/><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref><sp/>event)</highlight></codeline>
<codeline lineno="887"><highlight class="normal">{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*)<sp/>((uint8_t<sp/>*)<sp/>p_reg<sp/>+<sp/>(uint32_t)<sp/>event<sp/>+<sp/>0x80uL))<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>defined(DPPI_PRESENT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref><sp/><ref refid="group__nrf__saadc__hal_1ga55a1e59db07bbcee1c6a0ae2f6c9bea1" kindref="member">nrf_saadc_limit_event_get</ref>(uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gad3a1aa4df4fa236684487f209f438a3d" kindref="member">nrf_saadc_limit_t</ref><sp/>limit_type)</highlight></codeline>
<codeline lineno="894"><highlight class="normal">{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(limit_type<sp/>==<sp/><ref refid="group__nrf__saadc__hal_1ggad3a1aa4df4fa236684487f209f438a3da80f852093bfb4fd581b30f154322cc49" kindref="member">NRF_SAADC_LIMIT_HIGH</ref>)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref>)<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_SAADC_Type,<sp/>EVENTS_CH[channel].LIMITH);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__saadc__hal_1ga54a401b89bf604a64fce520429bbbdd1" kindref="member">nrf_saadc_event_t</ref>)<ref refid="group__nrfx__common_1gaf356c97c2527d9ac57b04dd9f12fc9d3" kindref="member">NRFX_OFFSETOF</ref>(NRF_SAADC_Type,<sp/>EVENTS_CH[channel].LIMITL);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga4aabfc8ebe63a4e31e55188ec4fc4d9c" kindref="member">nrf_saadc_channel_input_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref><sp/>pselp,</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref><sp/>pseln)</highlight></codeline>
<codeline lineno="909"><highlight class="normal">{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_AIN_AS_PIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CH[channel].PSELN<sp/>=<sp/>(pseln<sp/>!=<sp/><ref refid="group__nrf__saadc__hal_1gab2b904fd842250f953752e186fd7ba66" kindref="member">NRF_SAADC_INPUT_DISABLED</ref>)<sp/>?</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((NRF_PIN_NUMBER_TO_PIN(pseln)<sp/>&lt;&lt;<sp/>SAADC_CH_PSELN_PIN_Pos)</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(NRF_PIN_NUMBER_TO_PORT(pseln)<sp/>&lt;&lt;<sp/>SAADC_CH_PSELN_PORT_Pos)</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(SAADC_CH_PSELN_CONNECT_AnalogInput<sp/>&lt;&lt;<sp/>SAADC_CH_PSELN_CONNECT_Pos)</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CH[channel].PSELP<sp/>=<sp/>(pselp<sp/>!=<sp/><ref refid="group__nrf__saadc__hal_1gab2b904fd842250f953752e186fd7ba66" kindref="member">NRF_SAADC_INPUT_DISABLED</ref>)<sp/>?</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((NRF_PIN_NUMBER_TO_PIN(pselp)<sp/>&lt;&lt;<sp/>SAADC_CH_PSELP_PIN_Pos)</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(NRF_PIN_NUMBER_TO_PORT(pselp)<sp/>&lt;&lt;<sp/>SAADC_CH_PSELP_PORT_Pos)</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(SAADC_CH_PSELP_CONNECT_AnalogInput<sp/>&lt;&lt;<sp/>SAADC_CH_PSELP_CONNECT_Pos)</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CH[channel].PSELN<sp/>=<sp/>pseln;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CH[channel].PSELP<sp/>=<sp/>pselp;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal">}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga727fff4c406e29364c28ad51f4422108" kindref="member">nrf_saadc_channel_pos_input_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga28f7a2c0a47d0a5f1254ae6a23fb71e2" kindref="member">nrf_saadc_input_t</ref><sp/>pselp)</highlight></codeline>
<codeline lineno="930"><highlight class="normal">{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_AIN_AS_PIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CH[channel].PSELP<sp/>=<sp/>(pselp<sp/>!=<sp/><ref refid="group__nrf__saadc__hal_1gab2b904fd842250f953752e186fd7ba66" kindref="member">NRF_SAADC_INPUT_DISABLED</ref>)<sp/>?</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((NRF_PIN_NUMBER_TO_PIN(pselp)<sp/>&lt;&lt;<sp/>SAADC_CH_PSELP_PIN_Pos)</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(NRF_PIN_NUMBER_TO_PORT(pselp)<sp/>&lt;&lt;<sp/>SAADC_CH_PSELP_PORT_Pos)</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(SAADC_CH_PSELP_CONNECT_AnalogInput<sp/>&lt;&lt;<sp/>SAADC_CH_PSELP_CONNECT_Pos)</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CH[channel].PSELP<sp/>=<sp/>pselp;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal">}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga4c26cdf7597a21a26f0656dcd0211fd1" kindref="member">nrf_saadc_channel_limits_set</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>low,</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>high)</highlight></codeline>
<codeline lineno="946"><highlight class="normal">{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CH[channel].LIMIT<sp/>=<sp/>(</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((uint32_t)<sp/>low<sp/>&lt;&lt;<sp/>SAADC_CH_LIMIT_LOW_Pos)<sp/>&amp;<sp/>SAADC_CH_LIMIT_LOW_Msk)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(((uint32_t)<sp/>high<sp/>&lt;&lt;<sp/>SAADC_CH_LIMIT_HIGH_Pos)<sp/>&amp;<sp/>SAADC_CH_LIMIT_HIGH_Msk));</highlight></codeline>
<codeline lineno="950"><highlight class="normal">}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gaabd7bf41a8bcbcd011e0b4b0625ad8b2" kindref="member">nrf_saadc_int_set</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="953"><highlight class="normal">{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTEN<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="955"><highlight class="normal">}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gaa8487e94e0de1dd9fc3cb9eda33a896d" kindref="member">nrf_saadc_int_enable</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="958"><highlight class="normal">{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENSET<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__saadc__hal_1ga3a9a24e83f68aa22fad03a04648bad51" kindref="member">nrf_saadc_int_enable_check</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="963"><highlight class="normal">{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;INTENSET<sp/>&amp;<sp/>mask;</highlight></codeline>
<codeline lineno="965"><highlight class="normal">}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gaae53ced5f63daece6fcb751ac7ed6918" kindref="member">nrf_saadc_int_disable</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="968"><highlight class="normal">{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;INTENCLR<sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__saadc__hal_1gab80147c8bd32b89c716f66e0f44664b2" kindref="member">nrf_saadc_limit_int_get</ref>(uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gad3a1aa4df4fa236684487f209f438a3d" kindref="member">nrf_saadc_limit_t</ref><sp/>limit_type)</highlight></codeline>
<codeline lineno="974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(channel<sp/>&lt;<sp/>SAADC_CH_NUM);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>mask<sp/>=<sp/>(limit_type<sp/>==<sp/><ref refid="group__nrf__saadc__hal_1ggad3a1aa4df4fa236684487f209f438a3da668f96bfc2e19db0c72fd6c7ebc2a4f6" kindref="member">NRF_SAADC_LIMIT_LOW</ref>)<sp/>?</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a2ee8aba4ca294b8d94266252268193db" kindref="member">NRF_SAADC_INT_CH0LIMITL</ref><sp/>:<sp/><ref refid="group__nrf__saadc__hal_1gga82c6d9ccbed7aa753b044ae4216a52e7a807ef5f8b39d6d5d05353d817d2b7fd3" kindref="member">NRF_SAADC_INT_CH0LIMITH</ref>;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mask<sp/>&lt;&lt;<sp/>(channel<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gab25084e697b176775ed9ebf6b8b9a3fd" kindref="member">nrf_saadc_busy_check</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="982"><highlight class="normal">{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;STATUS<sp/>==<sp/>(SAADC_STATUS_STATUS_Busy<sp/>&lt;&lt;<sp/>SAADC_STATUS_STATUS_Pos));</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga5fd952bc71c0d7bfc1227570b8e74f6e" kindref="member">nrf_saadc_enable</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="987"><highlight class="normal">{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(SAADC_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>SAADC_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="989"><highlight class="normal">}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga44b8bee69dcb4efea99b2996eecf7956" kindref="member">nrf_saadc_disable</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="992"><highlight class="normal">{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;ENABLE<sp/>=<sp/>(SAADC_ENABLE_ENABLE_Disabled<sp/>&lt;&lt;<sp/>SAADC_ENABLE_ENABLE_Pos);</highlight></codeline>
<codeline lineno="994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga37805e60b6f56abe9faed4aa1e9ce61c" kindref="member">nrf_saadc_enable_check</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="997"><highlight class="normal">{</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_reg-&gt;ENABLE<sp/>==<sp/>(SAADC_ENABLE_ENABLE_Enabled<sp/>&lt;&lt;<sp/>SAADC_ENABLE_ENABLE_Pos));</highlight></codeline>
<codeline lineno="999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gac1986dcb3b95d37d79d55c0263680867" kindref="member">nrf_saadc_buffer_init</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref><sp/>*<sp/>p_buffer,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size)</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(NRF_SAADC_8BIT_SAMPLE_WIDTH<sp/>==<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__saadc__hal_1ga9c6df1f0637afe78a841e59d6c0d05da" kindref="member">nrf_saadc_resolution_get</ref>(p_reg)<sp/>!=<sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a9c906fc4ba0c92e8cd641f2b361e0dca" kindref="member">NRF_SAADC_RESOLUTION_8BIT</ref>)</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>size<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.PTR<sp/>=<sp/>(uint32_t)p_buffer;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.MAXCNT<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RESULT.PTR<sp/>=<sp/>(uint32_t)p_buffer;</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RESULT.MAXCNT<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga1facfe7d84b1304b2bb4dc2d14111e8a" kindref="member">nrf_saadc_buffer_pointer_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref><sp/>*<sp/>p_buffer)</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;DMA.PTR<sp/>=<sp/>(uint32_t)p_buffer;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RESULT.PTR<sp/>=<sp/>(uint32_t)p_buffer;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref><sp/>*<sp/><ref refid="group__nrf__saadc__hal_1ga2a76ad513d6670515127f3b97810667e" kindref="member">nrf_saadc_buffer_pointer_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref><sp/>*)p_reg-&gt;DMA.PTR;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__saadc__hal_1gab991b20f4e170101f92956881889b755" kindref="member">nrf_saadc_value_t</ref><sp/>*)p_reg-&gt;RESULT.PTR;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint16_t<sp/><ref refid="group__nrf__saadc__hal_1gab0c2fd3c8bd02b9ea19876ff6a856e98" kindref="member">nrf_saadc_amount_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1041"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_DMA_REG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>result<sp/>=<sp/>(uint16_t)p_reg-&gt;DMA.AMOUNT;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/>result<sp/>=<sp/>(uint16_t)p_reg-&gt;RESULT.AMOUNT;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(NRF_SAADC_8BIT_SAMPLE_WIDTH<sp/>==<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__saadc__hal_1ga9c6df1f0637afe78a841e59d6c0d05da" kindref="member">nrf_saadc_resolution_get</ref>(p_reg)<sp/>!=<sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a9c906fc4ba0c92e8cd641f2b361e0dca" kindref="member">NRF_SAADC_RESOLUTION_8BIT</ref>)</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/>result<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gae3a1f1453c20051e27cb75ce2616fe33" kindref="member">nrf_saadc_resolution_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref><sp/>resolution)</highlight></codeline>
<codeline lineno="1060"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;RESOLUTION<sp/>=<sp/>resolution;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref><sp/><ref refid="group__nrf__saadc__hal_1ga9c6df1f0637afe78a841e59d6c0d05da" kindref="member">nrf_saadc_resolution_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1065"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref>)p_reg-&gt;RESOLUTION;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga73dd0c72c90270e07a4fccbb88a7e635" kindref="member">nrf_saadc_oversample_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref><sp/>oversample)</highlight></codeline>
<codeline lineno="1071"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;OVERSAMPLE<sp/>=<sp/>oversample;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal">NRF_STATIC_INLINE<sp/><ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref><sp/><ref refid="group__nrf__saadc__hal_1gae2e2bd4002cb6badb4ce4c65d630d1d5" kindref="member">nrf_saadc_oversample_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1076"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref>)p_reg-&gt;OVERSAMPLE;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__saadc__hal_1ga2111f43b238ee2297026937fd63122ae" kindref="member">nrf_saadc_oversample_sample_count_get</ref>(<ref refid="group__nrf__saadc__hal_1ga62ca4cd30bcc0c4a306135c957f7ed39" kindref="member">nrf_saadc_oversample_t</ref><sp/>oversample)</highlight></codeline>
<codeline lineno="1081"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1<sp/>&lt;&lt;<sp/>(uint32_t)oversample);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gafe3f681a38517ddd7a7b510ff028f630" kindref="member">nrf_saadc_continuous_mode_enable</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,<sp/>uint16_t<sp/>cc)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>((cc<sp/>&gt;=<sp/>80)<sp/>&amp;&amp;<sp/>(cc<sp/>&lt;=<sp/>2047));</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SAMPLERATE<sp/>=<sp/>(SAADC_SAMPLERATE_MODE_Timers<sp/>&lt;&lt;<sp/>SAADC_SAMPLERATE_MODE_Pos)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((uint32_t)cc<sp/>&lt;&lt;<sp/>SAADC_SAMPLERATE_CC_Pos);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1gaed86f2ee2f007709d6743c431bf9a6fe" kindref="member">nrf_saadc_continuous_mode_enable_check</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1093"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)((p_reg-&gt;SAMPLERATE<sp/>&amp;<sp/>SAADC_SAMPLERATE_MODE_Msk)</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>(SAADC_SAMPLERATE_MODE_Timers<sp/>&lt;&lt;<sp/>SAADC_SAMPLERATE_MODE_Pos));</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga2d83cf54c0286dc51724f910a9155056" kindref="member">nrf_saadc_continuous_mode_disable</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg)</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;SAMPLERATE<sp/>=<sp/>SAADC_SAMPLERATE_MODE_Task<sp/>&lt;&lt;<sp/>SAADC_SAMPLERATE_MODE_Pos;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_LIN_CAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga1032292d6a90f73e484c7d6afaa2cb34" kindref="member">nrf_saadc_linearity_calibration_coeff_set</ref>(NRF_SAADC_Type<sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index,</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>coeff)</highlight></codeline>
<codeline lineno="1107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__saadc__hal_1ga8787fbd8eab6641623e0a879f573623b" kindref="member">NRF_SAADC_LIN_CAL_MAX_COUNT</ref>);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(coeff<sp/>&lt;=<sp/><ref refid="group__nrf__saadc__hal_1gad5fbfcb2d28ba5939df9d9e690a02918" kindref="member">NRF_SAADC_LIN_CAL_MAX</ref>);</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;TRIM.LINCALCOEFF[index]<sp/>=<sp/>coeff;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal">NRF_STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group__nrf__saadc__hal_1gad11784fbf6f342900ce6fe4339a9ed1c" kindref="member">nrf_saadc_linearity_calibration_coeff_get</ref>(NRF_SAADC_Type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>p_reg,</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index)</highlight></codeline>
<codeline lineno="1115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(index<sp/>&lt;<sp/><ref refid="group__nrf__saadc__hal_1ga8787fbd8eab6641623e0a879f573623b" kindref="member">NRF_SAADC_LIN_CAL_MAX_COUNT</ref>);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_reg-&gt;TRIM.LINCALCOEFF[index];</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga941ace352581ba7295b0f3c09a3570f1" kindref="member">nrf_saadc_channel_init</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structnrf__saadc__channel__config__t" kindref="compound">nrf_saadc_channel_config_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>config)</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!NRF_SAADC_HAS_ACQTIME_ENUM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(config-&gt;<ref refid="structnrf__saadc__channel__config__t_1aa8bf05f1ebe7a17509fc15dce8c4a3c1" kindref="member">acq_time</ref><sp/>&lt;=<sp/>NRF_SAADC_ACQTIME_MAX);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_CONVTIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(config-&gt;<ref refid="structnrf__saadc__channel__config__t_1ababede938a937ce30052a4477747838b" kindref="member">conv_time</ref><sp/>&lt;=<sp/><ref refid="group__nrf__saadc__hal_1gad502160997b1d84e2920f7a12b12c1b4" kindref="member">NRF_SAADC_CONVTIME_MAX</ref>);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CH[channel].CONFIG<sp/>=</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((config-&gt;<ref refid="structnrf__saadc__channel__config__t_1ab18afcc483838dffbb0929d7b77a9d58" kindref="member">gain</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>SAADC_CH_CONFIG_GAIN_Pos)<sp/><sp/><sp/>&amp;<sp/>SAADC_CH_CONFIG_GAIN_Msk)</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((config-&gt;<ref refid="structnrf__saadc__channel__config__t_1a051bcd2ef1076949870168b4fbc83df2" kindref="member">reference</ref><sp/><sp/>&lt;&lt;<sp/>SAADC_CH_CONFIG_REFSEL_Pos)<sp/>&amp;<sp/>SAADC_CH_CONFIG_REFSEL_Msk)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((config-&gt;<ref refid="structnrf__saadc__channel__config__t_1aa8bf05f1ebe7a17509fc15dce8c4a3c1" kindref="member">acq_time</ref><sp/><sp/><sp/>&lt;&lt;<sp/>SAADC_CH_CONFIG_TACQ_Pos)<sp/><sp/><sp/>&amp;<sp/>SAADC_CH_CONFIG_TACQ_Msk)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_CH_CONFIG_RES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((config-&gt;<ref refid="structnrf__saadc__channel__config__t_1ac9f8de092917bc7e736c891a368eb062" kindref="member">resistor_p</ref><sp/>&lt;&lt;<sp/>SAADC_CH_CONFIG_RESP_Pos)<sp/><sp/><sp/>&amp;<sp/>SAADC_CH_CONFIG_RESP_Msk)</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((config-&gt;<ref refid="structnrf__saadc__channel__config__t_1a59748a13af1d7cacc4123629d4ee9c39" kindref="member">resistor_n</ref><sp/>&lt;&lt;<sp/>SAADC_CH_CONFIG_RESN_Pos)<sp/><sp/><sp/>&amp;<sp/>SAADC_CH_CONFIG_RESN_Msk)</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>NRF_SAADC_HAS_CONVTIME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((config-&gt;<ref refid="structnrf__saadc__channel__config__t_1ababede938a937ce30052a4477747838b" kindref="member">conv_time</ref><sp/><sp/>&lt;&lt;<sp/>SAADC_CH_CONFIG_TCONV_Pos)<sp/><sp/>&amp;<sp/>SAADC_CH_CONFIG_TCONV_Msk)</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((config-&gt;<ref refid="structnrf__saadc__channel__config__t_1aa9ca4469bd541c3628ca841f71995c4c" kindref="member">mode</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>SAADC_CH_CONFIG_MODE_Pos)<sp/><sp/><sp/>&amp;<sp/>SAADC_CH_CONFIG_MODE_Msk)</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>((config-&gt;<ref refid="structnrf__saadc__channel__config__t_1a1302832da87878d08d264a9e92def254" kindref="member">burst</ref><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>SAADC_CH_CONFIG_BURST_Pos)<sp/><sp/>&amp;<sp/>SAADC_CH_CONFIG_BURST_Msk);</highlight></codeline>
<codeline lineno="1144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal">NRF_STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ga0e2c3e00c21adb8298fcf13eb618bb93" kindref="member">nrf_saadc_burst_set</ref>(NRF_SAADC_Type<sp/>*<sp/><sp/>p_reg,</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>channel,</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrf__saadc__hal_1ga46239c9f1d0af686aa09373d68c9a61a" kindref="member">nrf_saadc_burst_t</ref><sp/>burst)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>p_reg-&gt;CH[channel].CONFIG<sp/>=<sp/>(p_reg-&gt;CH[channel].CONFIG<sp/>&amp;<sp/>~SAADC_CH_CONFIG_BURST_Msk)<sp/>|</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(burst<sp/>&lt;&lt;<sp/>SAADC_CH_CONFIG_BURST_Pos);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal">NRF_STATIC_INLINE<sp/>int16_t<sp/><ref refid="group__nrf__saadc__hal_1ga428c82af7d71a2d4ac62fea00d0ec66b" kindref="member">nrf_saadc_value_min_get</ref>(<ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref><sp/>resolution)</highlight></codeline>
<codeline lineno="1155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>res_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(resolution)</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a9c906fc4ba0c92e8cd641f2b361e0dca" kindref="member">NRF_SAADC_RESOLUTION_8BIT</ref>:</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res_bits<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a0b1d34632f8e3ef1cf2d4f18a23bd667" kindref="member">NRF_SAADC_RESOLUTION_10BIT</ref>:</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res_bits<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a07b412d0ffcffd71026ceb4effbdb31e" kindref="member">NRF_SAADC_RESOLUTION_12BIT</ref>:</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res_bits<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a3b01ada0cfa0aba5a95b5b222169756b" kindref="member">NRF_SAADC_RESOLUTION_14BIT</ref>:</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res_bits<sp/>=<sp/>14;</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int16_t)(-(1<sp/>&lt;&lt;<sp/>res_bits));</highlight></codeline>
<codeline lineno="1175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal">NRF_STATIC_INLINE<sp/>int16_t<sp/><ref refid="group__nrf__saadc__hal_1gafee2b4a40ff7fdb6c5b8ade61b859878" kindref="member">nrf_saadc_value_max_get</ref>(<ref refid="group__nrf__saadc__hal_1gaeb0690ef4bdb8ec1cfac1f6c6a496630" kindref="member">nrf_saadc_resolution_t</ref><sp/>resolution)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>res_bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(resolution)</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a9c906fc4ba0c92e8cd641f2b361e0dca" kindref="member">NRF_SAADC_RESOLUTION_8BIT</ref>:</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res_bits<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a0b1d34632f8e3ef1cf2d4f18a23bd667" kindref="member">NRF_SAADC_RESOLUTION_10BIT</ref>:</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res_bits<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a07b412d0ffcffd71026ceb4effbdb31e" kindref="member">NRF_SAADC_RESOLUTION_12BIT</ref>:</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res_bits<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group__nrf__saadc__hal_1ggaeb0690ef4bdb8ec1cfac1f6c6a496630a3b01ada0cfa0aba5a95b5b222169756b" kindref="member">NRF_SAADC_RESOLUTION_14BIT</ref>:</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res_bits<sp/>=<sp/>14;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__nrfx__glue_1ga9698a3f6b6bea455d2b54a79e514ee36" kindref="member">NRFX_ASSERT</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(int16_t)((1<sp/>&lt;&lt;<sp/>res_bits)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_DECLARE_ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="1202"><highlight class="comment">/**<sp/>@}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>NRF_SAADC_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="hal/nrf_saadc.h"/>
  </compounddef>
</doxygen>
